
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccGO7nbo.o
f108f85f l       *ABS*	00000000 BootRAM
08004f20 l       .text	00000000 LoopCopyDataInit
08004f18 l       .text	00000000 CopyDataInit
08004f34 l       .text	00000000 LoopFillZerobss
08004f2e l       .text	00000000 FillZerobss
08004f46 l       .text	00000000 LoopForever
08004f60 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_tim.c
00000000 l    df *ABS*	00000000 u8x8_display.c
00000000 l    df *ABS*	00000000 u8g2_buffer.c
080015ac l     F .text	0000005e u8g2_send_buffer
00000000 l    df *ABS*	00000000 u8g2_setup.c
080016a4 l     F .text	0000005a u8g2_update_dimension_common
20000014 l     O .bss	00000008 buf.7325
00000000 l    df *ABS*	00000000 u8g2_d_setup.c
00000000 l    df *ABS*	00000000 u8g2_box.c
00000000 l    df *ABS*	00000000 u8g2_circle.c
08001c34 l     F .text	000000c0 u8g2_draw_circle_section
08001cf4 l     F .text	0000007c u8g2_draw_ellipse_section
08001d70 l     F .text	000000d4 u8g2_draw_disc_section
08001e44 l     F .text	0000007e u8g2_draw_filled_ellipse_section
00000000 l    df *ABS*	00000000 u8x8_gpio.c
00000000 l    df *ABS*	00000000 u8x8_cad.c
080022d8 l     F .text	00000028 u8x8_i2c_data_transfer
2000001c l     O .bss	00000010 buf.6609
2000002c l     O .bss	00000001 in_transfer.6678
2000002d l     O .bss	00000001 in_transfer.6697
00000000 l    df *ABS*	00000000 u8g2_d_memory.c
20000030 l     O .bss	00000080 buf.6910
00000000 l    df *ABS*	00000000 u8x8_d_ssd1306_128x64_noname.c
0800294c l     F .text	000000e4 u8x8_d_ssd1306_sh1106_generic
080051d4 l     O .text	00000005 u8x8_d_ssd1306_128x64_noname_powersave0_seq
080051dc l     O .text	00000005 u8x8_d_ssd1306_128x64_noname_powersave1_seq
080051e4 l     O .text	00000007 u8x8_d_ssd1306_128x64_noname_flip0_seq
080051ec l     O .text	00000007 u8x8_d_ssd1306_128x64_noname_flip1_seq
080051f4 l     O .text	00000035 u8x8_d_ssd1306_128x64_noname_init_seq
0800522c l     O .text	00000018 u8x8_ssd1306_128x64_noname_display_info
08005244 l     O .text	00000035 u8x8_d_ssd1306_128x64_vcomh0_init_seq
0800527c l     O .text	00000035 u8x8_d_ssd1306_128x64_alt0_init_seq
080052b4 l     O .text	00000018 u8x8_sh1106_128x64_noname_display_info
080052cc l     O .text	0000002d u8x8_d_sh1106_128x64_winstar_init_seq
00000000 l    df *ABS*	00000000 u8x8_byte.c
08002bbc l     F .text	0000000e i2c_delay
08002bcc l     F .text	00000014 i2c_read_scl_and_delay
08002be0 l     F .text	00000032 i2c_write_bit
08002c14 l     F .text	00000086 i2c_write_byte
200000b0 l     O .bss	00000001 last_dc.6598
200000b1 l     O .bss	00000001 enable_pin.6647
00000000 l    df *ABS*	00000000 u8x8cb.c
00000000 l    df *ABS*	00000000 u8g2_hvline.c
080035d0 l     F .text	00000014 u8g2_DrawHVLine.part.0
00000000 l    df *ABS*	00000000 stm32f0xx_spi.c
00000000 l    df *ABS*	00000000 u8x8_setup.c
0800552c l     O .text	00000018 u8x8_null_display_info
00000000 l    df *ABS*	00000000 u8g2_ll_hvline.c
00000000 l    df *ABS*	00000000 u8g2_font.c
08003bac l     F .text	0000000e u8g2_font_get_word
08003ce8 l     F .text	00000034 u8g2_font_setup_decode
08003f08 l     F .text	00000068 u8g2_GetGlyphHorizontalProperties
08003fdc l     F .text	00000078 u8g2_string_width
08004090 l     F .text	00000068 u8g2_draw_string
00000000 l    df *ABS*	00000000 u8x8_8x8.c
0800449c l     F .text	00000014 u8x8_upscale_buf
080044c4 l     F .text	0000005e u8x8_get_glyph_data.isra.0
080045e0 l     F .text	00000068 u8x8_draw_string
08004720 l     F .text	00000068 u8x8_draw_2x2_string
080047f0 l     F .text	00000068 u8x8_draw_1x2_string
00000000 l    df *ABS*	00000000 u8g2_kerning.c
00000000 l    df *ABS*	00000000 _udivsi3.o
080049bc l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 stm32f0xx_it.c
00000000 l    df *ABS*	00000000 hw_config.c
200000b2 l     O .bss	00000002 counter_delay_ms
200000b4 l     O .bss	00000004 timestamp_us
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
00000000 l       *UND*	00000000 free
080009ac g     F .text	00000012 TIM_TimeBaseStructInit
08004524 g     F .text	0000008c u8x8_utf8_next
08003504 g     F .text	000000cc u8x8_byte_stm32f0_hw_spi
08004cf8 g     F .text	0000003e Timer_Structure_Config
08000354 g     F .text	00000020 RCC_HSICmd
08000d24 g     F .text	00000014 TIM_ForcedOC2Config
080003e8 g     F .text	00000018 RCC_LSEDriveConfig
08004498 g     F .text	00000002 u8g2_SetFontDirection
08000440 g     F .text	00000024 RCC_PLLCmd
08004cec g     F .text	0000000c Timer_RCC_Config
08000d0c g     F .text	00000004 TIM_SetCompare2
0800071c g     F .text	00000018 RCC_AHBPeriphResetCmd
08001fcc g     F .text	00000180 u8g2_DrawEllipse
08002cac g     F .text	00000010 u8x8_byte_SendBytes
080002ac g     F .text	00000024 GPIO_PinAFConfig
080038fc g     F .text	00000004 SPI_SendData8
08000edc g     F .text	00000018 TIM_SelectCOM
0800080c g     F .text	0000000c RCC_ClearITPendingBit
08000280 g     F .text	0000000c GPIO_ReadOutputDataBit
08000eac g     F .text	00000018 TIM_CCxCmd
080011f0 g     F .text	00000018 TIM_SetIC4Prescaler
08000d58 g     F .text	00000018 TIM_CCPreloadControl
08004f60  w    F .text	00000002 TIM1_CC_IRQHandler
08004c9e g     F .text	00000002 HardFault_Handler
08004358 g     F .text	0000000c u8g2_SetFontPosBottom
08004398 g     F .text	00000022 u8g2_GetStrX
08004f60  w    F .text	00000002 ADC1_COMP_IRQHandler
08004d36 g     F .text	0000000c Timer_Config
08000d70 g     F .text	0000000c TIM_OC1PreloadConfig
08004ca4 g     F .text	00000010 SysTick_Handler
08002cf4 g     F .text	00000114 u8x8_byte_4wire_sw_spi
0800049c g     F .text	0000000c RCC_MCOConfig
08004f60  w    F .text	00000002 PVD_IRQHandler
08002ab0 g     F .text	00000044 u8x8_d_ssd1306_128x64_alt0
0800382c g     F .text	00000018 SPI_TIModeCmd
0800052c g     F .text	00000018 RCC_CECCLKConfig
0800555c g       .text	00000000 _sidata
08004ca2 g     F .text	00000002 PendSV_Handler
080036a4 g     F .text	00000044 SPI_I2S_DeInit
08004c9c g     F .text	00000002 NMI_Handler
200000bc g       .bss	00000000 __exidx_end
08003964 g     F .text	00000006 SPI_GetCRCPolynomial
08001340 g     F .text	00000020 TIM_ETRClockMode2Config
080043bc g     F .text	00000010 u8g2_GetStrWidth
08004f60  w    F .text	00000002 I2C1_IRQHandler
08000764 g     F .text	00000018 RCC_ITConfig
08000e34 g     F .text	0000000c TIM_OC1NPolarityConfig
080050dc g     O .text	00000008 u8g2_cb_r0
08000d18 g     F .text	0000000c TIM_ForcedOC1Config
080018c8 g     F .text	0000000a u8g2_SetDisplayRotation
0800125c g     F .text	00000012 TIM_DMACmd
0800433c g     F .text	0000000e u8g2_SetFontRefHeightAll
08001320 g     F .text	00000020 TIM_ETRClockMode1Config
08001f48 g     F .text	00000084 u8g2_DrawDisc
08003888 g     F .text	00000020 SPI_BiDirectionalLineConfig
080011e0 g     F .text	00000010 TIM_SetIC3Prescaler
080044b0 g     F .text	00000014 u8x8_ascii_next
08000e0c g     F .text	0000000c TIM_ClearOC3Ref
0800555c g       .text	00000000 _etext
20000014 g       .bss	00000000 _sbss
08002344 g     F .text	00000010 u8x8_cad_SendData
080004a8 g     F .text	00000014 RCC_SYSCLKConfig
0800437c g     F .text	0000001a u8g2_SetFont
0800194c g     F .text	00000040 u8g2_DrawBox
080007b0 g     F .text	00000034 RCC_WaitForHSEStartUp
08001794 g     F .text	0000003e u8g2_update_dimension_r3
08001868 g     F .text	00000028 u8g2_draw_l90_r3
080006b0 g     F .text	00000024 RCC_BackupResetCmd
08003a54 g     F .text	0000002a u8x8_Setup
08000aa0 g     F .text	0000001c TIM_CtrlPWMOutputs
08004fac g     F .text	0000007c memcpy
0800190c g     F .text	00000040 u8g2_Setup_ssd1306_128x64_noname_1
08003914 g     F .text	00000014 SPI_CRCLengthConfig
08001644 g     F .text	0000001a u8g2_FirstPage
08001728 g     F .text	00000032 u8g2_update_dimension_r1
08000478 g     F .text	00000024 RCC_ClockSecuritySystemCmd
080007e4 g     F .text	00000014 RCC_ClearFlag
08004890 g     F .text	00000010 u8x8_Draw2x2UTF8
08000a54 g     F .text	00000018 TIM_Cmd
08003c4c g     F .text	00000036 u8g2_GetFontSize
08000d9c g     F .text	00000014 TIM_OC4PreloadConfig
08002940 g     F .text	0000000c u8g2_m_16_8_1
20000010 g     O .data	00000004 SystemCoreClock
08002a70 g     F .text	00000040 u8x8_d_ssd1306_128x64_vcomh0
08000330 g     F .text	00000010 RCC_HSEConfig
080049bc g     F .text	0000010a .hidden __udivsi3
0800122c g     F .text	00000008 TIM_ClearFlag
08001810 g     F .text	00000028 u8g2_draw_l90_r1
08003bc0 g     F .text	00000006 u8g2_font_calc_vref_bottom
08003928 g     F .text	00000020 SPI_CalculateCRC
0800124c g     F .text	00000008 TIM_ClearITPendingBit
08002ce0 g     F .text	0000000e u8x8_byte_EndTransfer
080009dc g     F .text	00000004 TIM_GetCounter
08002c9c g     F .text	0000000e u8x8_byte_SetDC
080039d4 g     F .text	00000008 SPI_I2S_ClearFlag
080006ec g     F .text	00000018 RCC_APB2PeriphClockCmd
080011b0 g     F .text	00000004 TIM_GetCapture3
08000168 g     F .text	000000c6 GPIO_Init
08000420 g     F .text	00000020 RCC_PLLConfig
080004f8 g     F .text	00000034 RCC_ADCCLKConfig
080033e0 g     F .text	00000124 u8x8_gpio_and_delay_ozseccon
20000000 g       .data	00000000 _sdata
08004f60  w    F .text	00000002 SPI1_IRQHandler
080011a8 g     F .text	00000004 TIM_GetCapture1
08000e9c g     F .text	00000010 TIM_SelectOCREFClear
080040f8 g     F .text	00000010 u8g2_DrawStr
080002a8 g     F .text	00000004 GPIO_Write
08002ef4 g     F .text	000000ec u8x8_byte_8bit_8080mode
200000b8 g     O .bss	00000004 MSec
08004f60  w    F .text	00000002 TIM6_DAC_IRQHandler
0800028c g     F .text	00000006 GPIO_ReadOutputData
0800146c g     F .text	0000001e u8x8_DrawTile
08000bbc g     F .text	00000084 TIM_OC3Init
080003c8 g     F .text	00000020 RCC_LSEConfig
0800405c g     F .text	00000032 u8g2_DrawGlyph
0800068c g     F .text	00000024 RCC_RTCCLKCmd
08004118 g     F .text	000000d4 u8g2_DrawExtendedUTF8
08003a80 g     F .text	000000aa u8g2_ll_hvline_vertical_top_lsb
08000818 g     F .text	000000f8 TIM_DeInit
08004054 g     F .text	00000006 u8g2_SetFontMode
08000704 g     F .text	00000018 RCC_APB1PeriphClockCmd
0800140c g     F .text	0000005e u8x8_d_helper_display_init
080007f8 g     F .text	00000014 RCC_GetITStatus
0800490c g     F .text	0000006e u8g2_GetKerning
0800160c g     F .text	00000018 u8g2_ClearBuffer
200000bc g       .bss	00000000 __exidx_start
0800198c g     F .text	0000006a u8g2_DrawFrame
08004870 g     F .text	00000010 u8x8_DrawUTF8
080050cc g     O .text	00000008 u8g2_cb_r2
080039dc g     F .text	0000002a SPI_I2S_GetITStatus
08004f64 g     F .text	00000048 __libc_init_array
080050bc g     O .text	00000008 u8g2_cb_mirror
08001220 g     F .text	0000000c TIM_GetFlagStatus
080039c8 g     F .text	0000000c SPI_I2S_GetFlagStatus
080006d4 g     F .text	00000018 RCC_AHBPeriphClockCmd
08000dd0 g     F .text	0000000c TIM_OC3FastConfig
08004788 g     F .text	00000066 u8x8_Draw1x2Glyph
08004f60  w    F .text	00000002 EXTI2_3_IRQHandler
08004488 g     F .text	00000010 u8g2_GetUTF8Width
08001270 g     F .text	00000018 TIM_SelectCCDMA
080018d4 g     F .text	00000038 u8g2_Setup_null
080014dc g     F .text	0000000e u8x8_RefreshDisplay
08005544 g     F .text	00000000 _init
08004f60  w    F .text	00000002 I2C2_IRQHandler
08000a40 g     F .text	00000014 TIM_SetClockDivision
08002374 g     F .text	0000006a u8x8_cad_SendSequence
08003844 g     F .text	00000020 I2S_Cmd
080038cc g     F .text	00000018 SPI_SSOutputCmd
08003864 g     F .text	00000010 SPI_DataSizeConfig
08004364 g     F .text	0000000c u8g2_SetFontPosTop
08002b7c g     F .text	00000040 u8x8_d_sh1106_128x64_winstar
08004f60  w    F .text	00000002 TIM17_IRQHandler
080023e0 g     F .text	0000002c u8x8_cad_empty
08004f60  w    F .text	00000002 RTC_IRQHandler
08003bc8 g     F .text	0000000a u8g2_font_calc_vref_top
200000bc g       .bss	00000000 _ebss
08000abc g     F .text	00000080 TIM_OC1Init
08000d90 g     F .text	0000000c TIM_OC3PreloadConfig
08004f10  w    F .text	00000038 Reset_Handler
08000278 g     F .text	00000006 GPIO_ReadInputData
080009d8 g     F .text	00000004 TIM_SetAutoreload
08003d1c g     F .text	00000016 u8g2_font_decode_get_signed_bits
08002e08 g     F .text	000000ec u8x8_byte_8bit_6800mode
0800077c g     F .text	00000034 RCC_GetFlagStatus
08000294 g     F .text	00000004 GPIO_SetBits
0800149c g     F .text	0000000e u8x8_InitDisplay
080004bc g     F .text	00000010 RCC_GetSYSCLKSource
08000a18 g     F .text	00000018 TIM_ARRPreloadConfig
0800029c g     F .text	0000000c GPIO_WriteBit
080048c0 g     F .text	0000004c u8x8_GetUTF8Len
08003c8c g     F .text	00000006 u8g2_GetFontBBXHeight
08003ed4 g     F .text	00000032 u8g2_font_get_glyph_data
08003c94 g     F .text	00000006 u8g2_GetFontBBXOffX
080050d4 g     O .text	00000008 u8g2_cb_r1
08001234 g     F .text	00000016 TIM_GetITStatus
08000574 g     F .text	00000108 RCC_GetClocksFreq
08003308 g     F .text	000000d8 u8x8_byte_sw_i2c
08004108 g     F .text	00000010 u8g2_DrawUTF8
08002564 g     F .text	00000138 u8x8_cad_st7920_spi
08004f60  w    F .text	00000002 TIM16_IRQHandler
08000cbc g     F .text	0000004c TIM_SelectOCxM
080019f8 g     F .text	00000146 u8g2_DrawRBox
080013fc g     F .text	00000006 TIM_RemapConfig
08004cc8 g     F .text	00000014 TIM3_IRQHandler
08004f60  w    F .text	00000002 EXTI4_15_IRQHandler
08004f60  w    F .text	00000002 RCC_IRQHandler
20000014 g       .bss	00000000 _bss
0800313c g     F .text	000000e4 u8x8_byte_ks0108
08004f60  w    F .text	00000002 DMA1_Channel1_IRQHandler
0800363c g     F .text	00000016 u8g2_DrawHVLine
08000db0 g     F .text	0000000c TIM_OC1FastConfig
08004f60 g       .text	00000002 Default_Handler
08003ca4 g     F .text	00000006 u8g2_GetFontCapitalAHeight
08002460 g     F .text	00000058 u8x8_cad_100
08003980 g     F .text	00000014 SPI_LastDMATransferCmd
08000d7c g     F .text	00000014 TIM_OC2PreloadConfig
0800067c g     F .text	00000010 RCC_RTCCLKConfig
08001360 g     F .text	0000000c TIM_SelectInputTrigger
080024b8 g     F .text	00000054 u8x8_cad_001
0800269c g     F .text	0000007c u8x8_cad_ssd13xx_i2c
080038e4 g     F .text	00000018 SPI_NSSPulseModeCmd
08004f60  w    F .text	00000002 CEC_IRQHandler
08000388 g     F .text	00000020 RCC_HSI14Cmd
08001208 g     F .text	00000012 TIM_ITConfig
08000b3c g     F .text	00000080 TIM_OC2Init
08004f60  w    F .text	00000002 TIM14_IRQHandler
08003220 g     F .text	000000e8 u8x8_byte_sed1520
08004860 g     F .text	00000010 u8x8_DrawString
08004f60  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
080045b4 g     F .text	0000002c u8x8_DrawGlyph
0800214c g     F .text	00000180 u8g2_DrawFilledEllipse
00001800 g       *ABS*	00000000 __ram_size__
08001838 g     F .text	0000002e u8g2_draw_l90_r2
080043cc g     F .text	000000bc u8g2_GetExactStrWidth
080009c0 g     F .text	00000006 TIM_PrescalerConfig
080038a8 g     F .text	00000024 SPI_NSSInternalSoftwareConfig
08004f60  w    F .text	00000002 TIM7_DAC_IRQHandler
08000298 g     F .text	00000004 GPIO_ResetBits
08000e88 g     F .text	00000014 TIM_OC4PolarityConfig
0800136c g     F .text	00000010 TIM_SelectOutputTrigger
08003948 g     F .text	0000000c SPI_TransmitCRC
08004e48 g     F .text	00000014 increment_timestamp
08003a08 g     F .text	00000004 u8x8_dummy_cb
08000d10 g     F .text	00000004 TIM_SetCompare3
0800250c g     F .text	00000058 u8x8_cad_011
08000c40 g     F .text	00000068 TIM_OC4Init
08004f60  w    F .text	00000002 TIM15_IRQHandler
08001700 g     F .text	00000028 u8g2_update_dimension_r0
08004f60  w    F .text	00000002 EXTI0_1_IRQHandler
08004f60  w    F .text	00000002 USB_IRQHandler
080017e8 g     F .text	00000028 u8g2_draw_l90_mirrorr_r0
080013e4 g     F .text	00000018 TIM_SelectHallSensor
08004adc  w    F .text	00000002 .hidden __aeabi_ldiv0
08002364 g     F .text	0000000e u8x8_cad_EndTransfer
08003a0c g     F .text	00000020 u8x8_d_null_cb
080003a8 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08004dbc g     F .text	00000074 delay_us
080011b8 g     F .text	00000010 TIM_SetIC1Prescaler
08002300 g     F .text	0000000e u8x8_cad_SendCmd
080017d4 g     F .text	00000012 u8g2_draw_l90_r0
08003758 g     F .text	00000012 I2S_StructInit
080048a0 g     F .text	00000010 u8x8_Draw1x2String
08003690 g     F .text	00000012 u8g2_SetDrawColor
08000d44 g     F .text	00000014 TIM_ForcedOC4Config
08004f60  w    F .text	00000002 SPI2_IRQHandler
08002310 g     F .text	0000000e u8x8_cad_SendArg
08001570 g     F .text	0000003a u8x8_ClearLine
08005028 g     F .text	0000008c memset
0800390c g     F .text	00000006 SPI_I2S_ReceiveData16
08000340 g     F .text	00000014 RCC_AdjustHSICalibrationValue
0800279c g     F .text	000000c4 u8x8_cad_ld7032_i2c
08004afc g     F .text	000001a0 main
08004d44 g     F .text	00000078 delay_ms
08001294 g     F .text	00000014 TIM_ITRxExternalClockConfig
08004858 g     F .text	00000008 u8x8_utf8_init
08000e60 g     F .text	00000014 TIM_OC3PolarityConfig
080049bc g     F .text	00000000 .hidden __aeabi_uidiv
08004ca0 g     F .text	00000002 SVC_Handler
08003bbc g     F .text	00000004 u8g2_font_calc_vref_font
0800396c g     F .text	00000012 SPI_I2S_DMACmd
00000000  w      *UND*	00000000 __init_array_end
08001288 g     F .text	0000000a TIM_InternalClockConfig
08000e28 g     F .text	0000000c TIM_OC1PolarityConfig
08000dbc g     F .text	00000014 TIM_OC2FastConfig
080014cc g     F .text	0000000e u8x8_SetContrast
0800148c g     F .text	0000000e u8x8_SetupMemory
08003f70 g     F .text	0000000e u8g2_IsGlyph
080009d4 g     F .text	00000004 TIM_SetCounter
0800432c g     F .text	0000000e u8g2_SetFontRefHeightExtendedText
08002cf0 g     F .text	00000004 u8x8_byte_empty
08000d14 g     F .text	00000004 TIM_SetCompare4
080011ac g     F .text	00000004 TIM_GetCapture2
08003814 g     F .text	00000018 SPI_Cmd
080009e0 g     F .text	00000006 TIM_GetPrescaler
20000000 g       .isr_vector	00000000 __ram_start__
08000dfc g     F .text	00000010 TIM_ClearOC2Ref
08004e5c g     F .text	000000b4 SystemInit
08003900 g     F .text	00000004 SPI_I2S_SendData16
08000374 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
08002860 g     F .text	000000e0 u8x8_cad_uc16xx_i2c
08000ef4 g     F .text	0000014c TIM_ICInit
080000c4 g     F .text	000000a4 GPIO_DeInit
08003b2c g     F .text	0000007e u8g2_ll_hvline_horizontal_right_lsb
08005550 g     F .text	00000000 _fini
080002d0 g     F .text	00000060 RCC_DeInit
08001040 g     F .text	00000010 TIM_ICStructInit
08001050 g     F .text	00000158 TIM_PWMIConfig
08002cbc g     F .text	00000014 u8x8_byte_SendByte
08003a2c g     F .text	00000028 u8x8_SetupDefaults
08004880 g     F .text	00000010 u8x8_Draw2x2String
08004cdc g     F .text	00000010 Interrupts_Config
08000e50 g     F .text	00000010 TIM_OC2NPolarityConfig
08004af8 g     F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08000df0 g     F .text	0000000c TIM_ClearOC1Ref
08004ae0 g     F .text	00000014 WWDG_IRQHandler
08002af4 g     F .text	00000044 u8x8_d_sh1106_128x64_noname
08003bec g     F .text	00000060 u8g2_read_font_info
0800074c g     F .text	00000018 RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
08001624 g     F .text	00000010 u8g2_SendBuffer
08000464 g     F .text	00000014 RCC_PREDIV1Config
08003c9c g     F .text	00000006 u8g2_GetFontBBXOffY
08004cb4 g     F .text	00000012 TIM2_IRQHandler
08001ec4 g     F .text	00000084 u8g2_DrawCircle
08000a00 g     F .text	00000018 TIM_UpdateRequestConfig
0800367c g     F .text	00000012 u8g2_DrawPixel
08000d38 g     F .text	0000000c TIM_ForcedOC3Config
080012a8 g     F .text	00000078 TIM_TIxExternalClockConfig
08004674 g     F .text	000000aa u8x8_Draw2x2Glyph
08000230 g     F .text	00000018 GPIO_StructInit
08004f60  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
080041ec g     F .text	000000c4 u8g2_DrawExtUTF8
08003f80 g     F .text	0000005a u8g2_GetGlyphWidth
08000ca8 g     F .text	00000014 TIM_OCStructInit
08000a8c g     F .text	00000012 TIM_BDTRStructInit
08000e74 g     F .text	00000014 TIM_OC3NPolarityConfig
20001800 g       *ABS*	00000000 _estack
08000ec4 g     F .text	00000018 TIM_CCxNCmd
08003d34 g     F .text	0000009c u8g2_font_decode_len
08004ac8 g     F .text	00000012 .hidden __aeabi_uidivmod
0800138c g     F .text	00000010 TIM_SelectMasterSlaveMode
08003954 g     F .text	00000010 SPI_GetCRC
20001800 g       *ABS*	00000000 __ram_end__
20000014 g       .data	00000000 _edata
08004370 g     F .text	0000000c u8g2_SetFontPosCenter
080011b4 g     F .text	00000004 TIM_GetCapture4
0800175c g     F .text	00000036 u8g2_update_dimension_r2
080014ac g     F .text	0000000e u8x8_SetPowerSave
08003874 g     F .text	00000014 SPI_RxFIFOThresholdConfig
08003dd0 g     F .text	00000102 u8g2_font_decode_glyph
08000910 g     F .text	0000009c TIM_TimeBaseInit
08002cd0 g     F .text	0000000e u8x8_byte_StartTransfer
08003c84 g     F .text	00000006 u8g2_GetFontBBXWidth
08004af4 g     F .text	00000002 USART2_IRQHandler
08003654 g     F .text	00000014 u8g2_DrawHLine
08000000 g     O .isr_vector	00000000 g_pfnVectors
08001890 g     F .text	00000038 u8g2_SetupBuffer
08001254 g     F .text	00000008 TIM_DMAConfig
08003994 g     F .text	0000001a SPI_I2S_ITConfig
0800055c g     F .text	00000018 RCC_USARTCLKConfig
0800152c g     F .text	00000022 u8x8_ClearDisplay
08002354 g     F .text	0000000e u8x8_cad_StartTransfer
0800121c g     F .text	00000004 TIM_GenerateEvent
080042b0 g     F .text	0000006a u8g2_UpdateRefHeight
00000000  w      *UND*	00000000 __init_array_start
08004adc  w    F .text	00000002 .hidden __aeabi_idiv0
08003bd4 g     F .text	00000018 u8g2_font_calc_vref_center
08000a6c g     F .text	00000020 TIM_BDTRConfig
08000544 g     F .text	00000018 RCC_I2CCLKConfig
08004f60  w    F .text	00000002 USART3_4_5_6_7_8_IRQHandler
080004e0 g     F .text	00000018 RCC_PCLKConfig
08004f60  w    F .text	00000002 FLASH_IRQHandler
0800497c g     F .text	00000040 u8g2_GetKerningByTable
080014ec g     F .text	0000003e u8x8_ClearDisplayWithTile
080039b0 g     F .text	0000000a SPI_GetTransmissionFIFOStatus
0800431c g     F .text	0000000e u8g2_SetFontRefHeightText
08000248 g     F .text	00000024 GPIO_PinLockConfig
08004af6 g     F .text	00000002 USART1_IRQHandler
08000400 g     F .text	00000020 RCC_LSICmd
080011c8 g     F .text	00000018 TIM_SetIC2Prescaler
0800139c g     F .text	00000016 TIM_ETRConfig
0800310c g     F .text	0000002e u8x8_byte_set_ks0108_cs
08000734 g     F .text	00000018 RCC_APB2PeriphResetCmd
0800137c g     F .text	00000010 TIM_SelectSlaveMode
08003cac g     F .text	0000003a u8g2_font_decode_get_unsigned_bits
080039bc g     F .text	0000000a SPI_GetReceptionFIFOStatus
08001634 g     F .text	0000000e u8g2_SetBufferCurrTileRow
080014bc g     F .text	0000000e u8x8_SetFlipMode
08004f60  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
080036e8 g     F .text	0000001c SPI_StructInit
08003704 g     F .text	00000054 SPI_Init
08000e18 g     F .text	00000010 TIM_ClearOC4Ref
08002b38 g     F .text	00000044 u8x8_d_sh1106_128x64_vcomh0
08000a30 g     F .text	00000010 TIM_SelectOnePulseMode
080050c4 g     O .text	00000008 u8g2_cb_r3
08003668 g     F .text	00000014 u8g2_DrawVLine
08001b40 g     F .text	000000f4 u8g2_DrawRFrame
080013b4 g     F .text	00000030 TIM_EncoderInterfaceConfig
08001660 g     F .text	00000042 u8g2_NextPage
00000000  w      *UND*	00000000 __preinit_array_start
08000d08 g     F .text	00000004 TIM_SetCompare1
08000e40 g     F .text	00000010 TIM_OC2PolarityConfig
08002718 g     F .text	00000084 u8x8_cad_st75256_i2c
08004e30 g     F .text	00000018 decrement_delay
08003904 g     F .text	00000006 SPI_ReceiveData8
08001404 g     F .text	00000008 u8x8_d_helper_display_setup_memory
08001550 g     F .text	00000020 u8x8_FillDisplay
080045b0 g     F .text	00000004 u8x8_SetFont
080048b0 g     F .text	00000010 u8x8_Draw1x2UTF8
080009e8 g     F .text	00000018 TIM_UpdateDisableConfig
080022cc g     F .text	0000000a u8x8_gpio_call
0800026c g     F .text	0000000c GPIO_ReadInputDataBit
08000ddc g     F .text	00000014 TIM_OC4FastConfig
08002fe0 g     F .text	0000012c u8x8_byte_3wire_sw_spi
08004648 g     F .text	0000002c u8x8_upscale_byte
0800434c g     F .text	0000000c u8g2_SetFontPosBaseline
080035e4 g     F .text	00000056 u8g2_draw_hv_line_4dir
0800376c g     F .text	000000a8 I2S_Init
08002320 g     F .text	00000024 u8x8_cad_SendMultipleArg
080004cc g     F .text	00000014 RCC_HCLKConfig
0800240c g     F .text	00000054 u8x8_cad_110
080009c8 g     F .text	0000000c TIM_CounterModeConfig
08002a30 g     F .text	00000040 u8x8_d_ssd1306_128x64_noname



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	2101      	movs	r1, #1
 80000ec:	03c0      	lsls	r0, r0, #15
 80000ee:	f000 fb15 	bl	800071c <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	2100      	movs	r1, #0
 80000f6:	03c0      	lsls	r0, r0, #15
 80000f8:	f000 fb10 	bl	800071c <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	2101      	movs	r1, #1
 8000102:	0280      	lsls	r0, r0, #10
 8000104:	f000 fb0a 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	2100      	movs	r1, #0
 800010c:	0280      	lsls	r0, r0, #10
 800010e:	f000 fb05 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	2101      	movs	r1, #1
 8000118:	02c0      	lsls	r0, r0, #11
 800011a:	f000 faff 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	2100      	movs	r1, #0
 8000122:	02c0      	lsls	r0, r0, #11
 8000124:	f000 fafa 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	2101      	movs	r1, #1
 800012e:	0300      	lsls	r0, r0, #12
 8000130:	f000 faf4 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	2100      	movs	r1, #0
 8000138:	0300      	lsls	r0, r0, #12
 800013a:	f000 faef 	bl	800071c <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	2101      	movs	r1, #1
 8000144:	0340      	lsls	r0, r0, #13
 8000146:	f000 fae9 	bl	800071c <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	2100      	movs	r1, #0
 800014e:	0340      	lsls	r0, r0, #13
 8000150:	f000 fae4 	bl	800071c <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	4644      	mov	r4, r8
 800016c:	465f      	mov	r7, fp
 800016e:	4656      	mov	r6, sl
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000174:	2403      	movs	r4, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000176:	468c      	mov	ip, r1
 8000178:	b083      	sub	sp, #12
 800017a:	6809      	ldr	r1, [r1, #0]
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2701      	movs	r7, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	46a0      	mov	r8, r4
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d027      	beq.n	80001de <GPIO_Init+0x76>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c3c      	adds	r4, r7, #0

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000190:	1c0d      	adds	r5, r1, #0

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000192:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	4664      	mov	r4, ip
 800019c:	7924      	ldrb	r4, [r4, #4]
 800019e:	46a3      	mov	fp, r4
 80001a0:	3c01      	subs	r4, #1
 80001a2:	2c01      	cmp	r4, #1
 80001a4:	d922      	bls.n	80001ec <GPIO_Init+0x84>
 80001a6:	4644      	mov	r4, r8
 80001a8:	4094      	lsls	r4, r2
 80001aa:	43e4      	mvns	r4, r4
 80001ac:	9401      	str	r4, [sp, #4]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001ae:	6805      	ldr	r5, [r0, #0]
 80001b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001b2:	3301      	adds	r3, #1
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b4:	402c      	ands	r4, r5
 80001b6:	6004      	str	r4, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001b8:	465c      	mov	r4, fp
 80001ba:	4094      	lsls	r4, r2
 80001bc:	6805      	ldr	r5, [r0, #0]
 80001be:	432c      	orrs	r4, r5

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c0:	4645      	mov	r5, r8
 80001c2:	4095      	lsls	r5, r2
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001c4:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c6:	68c4      	ldr	r4, [r0, #12]
 80001c8:	43ac      	bics	r4, r5
 80001ca:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	4664      	mov	r4, ip
 80001ce:	79e4      	ldrb	r4, [r4, #7]
 80001d0:	68c5      	ldr	r5, [r0, #12]
 80001d2:	4094      	lsls	r4, r2
 80001d4:	432c      	orrs	r4, r5
 80001d6:	60c4      	str	r4, [r0, #12]
 80001d8:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d1d7      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001de:	b003      	add	sp, #12
 80001e0:	bc3c      	pop	{r2, r3, r4, r5}
 80001e2:	4690      	mov	r8, r2
 80001e4:	4699      	mov	r9, r3
 80001e6:	46a2      	mov	sl, r4
 80001e8:	46ab      	mov	fp, r5
 80001ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001ec:	6884      	ldr	r4, [r0, #8]
 80001ee:	46a1      	mov	r9, r4
 80001f0:	4644      	mov	r4, r8
 80001f2:	4094      	lsls	r4, r2
 80001f4:	464e      	mov	r6, r9
 80001f6:	43e4      	mvns	r4, r4
 80001f8:	4026      	ands	r6, r4
 80001fa:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	6886      	ldr	r6, [r0, #8]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	9401      	str	r4, [sp, #4]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	46b2      	mov	sl, r6
 8000202:	4666      	mov	r6, ip
 8000204:	7976      	ldrb	r6, [r6, #5]
 8000206:	4096      	lsls	r6, r2
 8000208:	46b1      	mov	r9, r6
 800020a:	4656      	mov	r6, sl
 800020c:	464c      	mov	r4, r9
 800020e:	4326      	orrs	r6, r4
 8000210:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	1c26      	adds	r6, r4, #0
 8000216:	43ae      	bics	r6, r5
 8000218:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800021a:	8884      	ldrh	r4, [r0, #4]
 800021c:	46a1      	mov	r9, r4
 800021e:	4664      	mov	r4, ip
 8000220:	79a5      	ldrb	r5, [r4, #6]
 8000222:	464c      	mov	r4, r9
 8000224:	409d      	lsls	r5, r3
 8000226:	4325      	orrs	r5, r4
 8000228:	b2ad      	uxth	r5, r5
 800022a:	8085      	strh	r5, [r0, #4]
 800022c:	e7bf      	b.n	80001ae <GPIO_Init+0x46>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000232:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000234:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000236:	2300      	movs	r3, #0
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000238:	7142      	strb	r2, [r0, #5]
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800023a:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800023c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800023e:	71c3      	strb	r3, [r0, #7]
}
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	0000ffff 	.word	0x0000ffff

08000248 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000248:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800024a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800024c:	025b      	lsls	r3, r3, #9
 800024e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	430b      	orrs	r3, r1
 8000254:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800025a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000260:	69c3      	ldr	r3, [r0, #28]
 8000262:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000264:	69c3      	ldr	r3, [r0, #28]
 8000266:	9301      	str	r3, [sp, #4]
}
 8000268:	b002      	add	sp, #8
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a00      	ldrh	r0, [r0, #16]
 800026e:	4008      	ands	r0, r1
 8000270:	1e41      	subs	r1, r0, #1
 8000272:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000274:	b2c0      	uxtb	r0, r0
}
 8000276:	4770      	bx	lr

08000278 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000278:	8a00      	ldrh	r0, [r0, #16]
 800027a:	b280      	uxth	r0, r0
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000280:	8a80      	ldrh	r0, [r0, #20]
 8000282:	4008      	ands	r0, r1
 8000284:	1e41      	subs	r1, r0, #1
 8000286:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000288:	b2c0      	uxtb	r0, r0
}
 800028a:	4770      	bx	lr

0800028c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800028c:	8a80      	ldrh	r0, [r0, #20]
 800028e:	b280      	uxth	r0, r0
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000294:	6181      	str	r1, [r0, #24]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000298:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800029a:	4770      	bx	lr

0800029c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800029c:	2a00      	cmp	r2, #0
 800029e:	d101      	bne.n	80002a4 <GPIO_WriteBit+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80002a0:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 80002a2:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 80002a4:	6181      	str	r1, [r0, #24]
 80002a6:	e7fc      	b.n	80002a2 <GPIO_WriteBit+0x6>

080002a8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80002a8:	8281      	strh	r1, [r0, #20]
}
 80002aa:	4770      	bx	lr

080002ac <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ac:	2307      	movs	r3, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002ae:	b510      	push	{r4, lr}
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b0:	240f      	movs	r4, #15
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	400b      	ands	r3, r1
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b8:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002ba:	1c13      	adds	r3, r2, #0
 80002bc:	08c9      	lsrs	r1, r1, #3
 80002be:	0089      	lsls	r1, r1, #2
 80002c0:	1840      	adds	r0, r0, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002c2:	6a01      	ldr	r1, [r0, #32]
 80002c4:	43a1      	bics	r1, r4
 80002c6:	6201      	str	r1, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002c8:	6a01      	ldr	r1, [r0, #32]
 80002ca:	430b      	orrs	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002cc:	6203      	str	r3, [r0, #32]
}
 80002ce:	bd10      	pop	{r4, pc}

080002d0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d0:	2101      	movs	r1, #1
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <RCC_DeInit+0x48>)
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 80002da:	6858      	ldr	r0, [r3, #4]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <RCC_DeInit+0x4c>)
 80002de:	4002      	ands	r2, r0
 80002e0:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <RCC_DeInit+0x50>)
 80002e6:	4002      	ands	r2, r0
 80002e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <RCC_DeInit+0x54>)
 80002ee:	4002      	ands	r2, r0
 80002f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002f2:	6858      	ldr	r0, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <RCC_DeInit+0x58>)
 80002f6:	4002      	ands	r2, r0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002f8:	200f      	movs	r0, #15

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 80002fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002fe:	4382      	bics	r2, r0
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000302:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <RCC_DeInit+0x5c>)
 8000306:	4002      	ands	r2, r0
 8000308:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800030a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800030c:	438a      	bics	r2, r1
 800030e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
}
 8000314:	4770      	bx	lr
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000
 800031c:	f8ffb80c 	.word	0xf8ffb80c
 8000320:	fef6ffff 	.word	0xfef6ffff
 8000324:	fffbffff 	.word	0xfffbffff
 8000328:	ffc0ffff 	.word	0xffc0ffff
 800032c:	fffffeac 	.word	0xfffffeac

08000330 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 8000330:	2200      	movs	r2, #0
 8000332:	4b02      	ldr	r3, [pc, #8]	; (800033c <RCC_HSEConfig+0xc>)
 8000334:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 8000336:	7018      	strb	r0, [r3, #0]

}
 8000338:	4770      	bx	lr
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	40021002 	.word	0x40021002

08000340 <RCC_AdjustHSICalibrationValue>:
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000340:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000342:	4a03      	ldr	r2, [pc, #12]	; (8000350 <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000344:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000346:	6813      	ldr	r3, [r2, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000348:	438b      	bics	r3, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800034a:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR = tmpreg;
 800034c:	6010      	str	r0, [r2, #0]
}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <RCC_HSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000356:	2800      	cmp	r0, #0
 8000358:	d104      	bne.n	8000364 <RCC_HSICmd+0x10>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 800035a:	2101      	movs	r1, #1
 800035c:	6813      	ldr	r3, [r2, #0]
 800035e:	438b      	bics	r3, r1
 8000360:	6013      	str	r3, [r2, #0]
  }
}
 8000362:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 8000364:	2301      	movs	r3, #1
 8000366:	6811      	ldr	r1, [r2, #0]
 8000368:	430b      	orrs	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	e7f9      	b.n	8000362 <RCC_HSICmd+0xe>
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40021000 	.word	0x40021000

08000374 <RCC_AdjustHSI14CalibrationValue>:
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 8000374:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 8000376:	4a03      	ldr	r2, [pc, #12]	; (8000384 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 8000378:	00c0      	lsls	r0, r0, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 800037a:	6b53      	ldr	r3, [r2, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 800037c:	438b      	bics	r3, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 800037e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CR2 = tmpreg;
 8000380:	6350      	str	r0, [r2, #52]	; 0x34
}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <RCC_HSI14Cmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800038a:	2800      	cmp	r0, #0
 800038c:	d104      	bne.n	8000398 <RCC_HSI14Cmd+0x10>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800038e:	2101      	movs	r1, #1
 8000390:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000392:	438b      	bics	r3, r1
 8000394:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 8000396:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000398:	2301      	movs	r3, #1
 800039a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800039c:	430b      	orrs	r3, r1
 800039e:	6353      	str	r3, [r2, #52]	; 0x34
 80003a0:	e7f9      	b.n	8000396 <RCC_HSI14Cmd+0xe>
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000

080003a8 <RCC_HSI14ADCRequestCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d104      	bne.n	80003b8 <RCC_HSI14ADCRequestCmd+0x10>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 80003ae:	2304      	movs	r3, #4
 80003b0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80003b2:	430b      	orrs	r3, r1
 80003b4:	6353      	str	r3, [r2, #52]	; 0x34
  }
}
 80003b6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 80003b8:	2104      	movs	r1, #4
 80003ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80003bc:	438b      	bics	r3, r1
 80003be:	6353      	str	r3, [r2, #52]	; 0x34
 80003c0:	e7f9      	b.n	80003b6 <RCC_HSI14ADCRequestCmd+0xe>
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000

080003c8 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 80003c8:	2101      	movs	r1, #1
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <RCC_LSEConfig+0x1c>)
 80003cc:	6a1a      	ldr	r2, [r3, #32]
 80003ce:	438a      	bics	r2, r1
 80003d0:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 80003d2:	6a1a      	ldr	r2, [r3, #32]
 80003d4:	3103      	adds	r1, #3
 80003d6:	438a      	bics	r2, r1
 80003d8:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 80003da:	6a1a      	ldr	r2, [r3, #32]
 80003dc:	4310      	orrs	r0, r2
 80003de:	6218      	str	r0, [r3, #32]
}
 80003e0:	4770      	bx	lr
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	40021000 	.word	0x40021000

080003e8 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 80003e8:	2118      	movs	r1, #24
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <RCC_LSEDriveConfig+0x14>)
 80003ec:	6a1a      	ldr	r2, [r3, #32]
 80003ee:	438a      	bics	r2, r1
 80003f0:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 80003f2:	6a1a      	ldr	r2, [r3, #32]
 80003f4:	4310      	orrs	r0, r2
 80003f6:	6218      	str	r0, [r3, #32]
}
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <RCC_LSICmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <RCC_LSICmd+0x10>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8000406:	2101      	movs	r1, #1
 8000408:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800040a:	438b      	bics	r3, r1
 800040c:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 800040e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 8000410:	2301      	movs	r3, #1
 8000412:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000414:	430b      	orrs	r3, r1
 8000416:	6253      	str	r3, [r2, #36]	; 0x24
 8000418:	e7f9      	b.n	800040e <RCC_LSICmd+0xe>
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 8000422:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <RCC_PLLConfig+0x1c>)
 8000426:	685c      	ldr	r4, [r3, #4]
 8000428:	4022      	ands	r2, r4
 800042a:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 800042c:	685a      	ldr	r2, [r3, #4]
 800042e:	4311      	orrs	r1, r2
 8000430:	4308      	orrs	r0, r1
 8000432:	6058      	str	r0, [r3, #4]
}
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40021000 	.word	0x40021000
 800043c:	ffc2ffff 	.word	0xffc2ffff

08000440 <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000440:	4a06      	ldr	r2, [pc, #24]	; (800045c <RCC_PLLCmd+0x1c>)
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000442:	2800      	cmp	r0, #0
 8000444:	d104      	bne.n	8000450 <RCC_PLLCmd+0x10>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 8000446:	6811      	ldr	r1, [r2, #0]
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <RCC_PLLCmd+0x20>)
 800044a:	400b      	ands	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
  }
}
 800044e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	6813      	ldr	r3, [r2, #0]
 8000454:	0449      	lsls	r1, r1, #17
 8000456:	430b      	orrs	r3, r1
 8000458:	6013      	str	r3, [r2, #0]
 800045a:	e7f8      	b.n	800044e <RCC_PLLCmd+0xe>
 800045c:	40021000 	.word	0x40021000
 8000460:	feffffff 	.word	0xfeffffff

08000464 <RCC_PREDIV1Config>:
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 8000464:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8000466:	4a03      	ldr	r2, [pc, #12]	; (8000474 <RCC_PREDIV1Config+0x10>)
 8000468:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 800046a:	438b      	bics	r3, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 800046c:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800046e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <RCC_ClockSecuritySystemCmd+0x1c>)
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <RCC_ClockSecuritySystemCmd+0x10>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 800047e:	6811      	ldr	r1, [r2, #0]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <RCC_ClockSecuritySystemCmd+0x20>)
 8000482:	400b      	ands	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
  }
}
 8000486:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	6813      	ldr	r3, [r2, #0]
 800048c:	0309      	lsls	r1, r1, #12
 800048e:	430b      	orrs	r3, r1
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e7f8      	b.n	8000486 <RCC_ClockSecuritySystemCmd+0xe>
 8000494:	40021000 	.word	0x40021000
 8000498:	fff7ffff 	.word	0xfff7ffff

0800049c <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_MCOConfig+0x8>)
 800049e:	7018      	strb	r0, [r3, #0]
}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021007 	.word	0x40021007

080004a8 <RCC_SYSCLKConfig>:
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80004a8:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80004aa:	4a03      	ldr	r2, [pc, #12]	; (80004b8 <RCC_SYSCLKConfig+0x10>)
 80004ac:	6853      	ldr	r3, [r2, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80004ae:	438b      	bics	r3, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80004b0:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004b2:	6050      	str	r0, [r2, #4]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80004bc:	200c      	movs	r0, #12
 80004be:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <RCC_GetSYSCLKSource+0xc>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	4018      	ands	r0, r3
}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <RCC_HCLKConfig>:
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80004cc:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 80004ce:	4a03      	ldr	r2, [pc, #12]	; (80004dc <RCC_HCLKConfig+0x10>)
 80004d0:	6853      	ldr	r3, [r2, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80004d2:	438b      	bics	r3, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80004d4:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004d6:	6050      	str	r0, [r2, #4]
}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80004e0:	4a03      	ldr	r2, [pc, #12]	; (80004f0 <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 80004e4:	6851      	ldr	r1, [r2, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 80004e6:	400b      	ands	r3, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80004e8:	4318      	orrs	r0, r3
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004ea:	6050      	str	r0, [r2, #4]
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000
 80004f4:	fffff8ff 	.word	0xfffff8ff

080004f8 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <RCC_ADCCLKConfig+0x28>)
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <RCC_ADCCLKConfig+0x2c>)
 80004fc:	6859      	ldr	r1, [r3, #4]
 80004fe:	400a      	ands	r2, r1
 8000500:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	0402      	lsls	r2, r0, #16
 8000506:	0c12      	lsrs	r2, r2, #16
 8000508:	430a      	orrs	r2, r1
 800050a:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800050c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800050e:	4a06      	ldr	r2, [pc, #24]	; (8000528 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000510:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000512:	400a      	ands	r2, r1
 8000514:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000518:	4310      	orrs	r0, r2
 800051a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021000 	.word	0x40021000
 8000524:	ffffbfff 	.word	0xffffbfff
 8000528:	fffffeff 	.word	0xfffffeff

0800052c <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 800052c:	2140      	movs	r1, #64	; 0x40
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <RCC_CECCLKConfig+0x14>)
 8000530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000532:	438a      	bics	r2, r1
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	4310      	orrs	r0, r2
 800053a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000

08000544 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 8000544:	2110      	movs	r1, #16
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <RCC_I2CCLKConfig+0x14>)
 8000548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054a:	438a      	bics	r2, r1
 800054c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 800054e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000550:	4310      	orrs	r0, r2
 8000552:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 800055c:	2103      	movs	r1, #3
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <RCC_USARTCLKConfig+0x14>)
 8000560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000562:	438a      	bics	r2, r1
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 8000566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000568:	4310      	orrs	r0, r2
 800056a:	6318      	str	r0, [r3, #48]	; 0x30
}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000

08000574 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000574:	210c      	movs	r1, #12
 8000576:	4a3b      	ldr	r2, [pc, #236]	; (8000664 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800057a:	6853      	ldr	r3, [r2, #4]
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800057c:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800057e:	400b      	ands	r3, r1
  
  switch (tmp)
 8000580:	2b04      	cmp	r3, #4
 8000582:	d001      	beq.n	8000588 <RCC_GetClocksFreq+0x14>
 8000584:	2b08      	cmp	r3, #8
 8000586:	d051      	beq.n	800062c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000588:	4837      	ldr	r0, [pc, #220]	; (8000668 <RCC_GetClocksFreq+0xf4>)
 800058a:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800058c:	4935      	ldr	r1, [pc, #212]	; (8000664 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 800058e:	4d37      	ldr	r5, [pc, #220]	; (800066c <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	061b      	lsls	r3, r3, #24
  tmp = tmp >> 4;
 8000594:	0f1b      	lsrs	r3, r3, #28
  presc = APBAHBPrescTable[tmp]; 
 8000596:	5cea      	ldrb	r2, [r5, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000598:	1c03      	adds	r3, r0, #0
 800059a:	40d3      	lsrs	r3, r2
 800059c:	1c1a      	adds	r2, r3, #0
 800059e:	6063      	str	r3, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 80005a0:	684b      	ldr	r3, [r1, #4]
 80005a2:	055b      	lsls	r3, r3, #21
  tmp = tmp >> 8;
 80005a4:	0f5b      	lsrs	r3, r3, #29
  presc = APBAHBPrescTable[tmp];
 80005a6:	5ceb      	ldrb	r3, [r5, r3]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	60a2      	str	r2, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 80005ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	d421      	bmi.n	80005f6 <RCC_GetClocksFreq+0x82>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <RCC_GetClocksFreq+0xfc>)
 80005b4:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	065b      	lsls	r3, r3, #25
 80005bc:	d424      	bmi.n	8000608 <RCC_GetClocksFreq+0x94>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <RCC_GetClocksFreq+0x100>)
 80005c0:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80005c2:	4b28      	ldr	r3, [pc, #160]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	06db      	lsls	r3, r3, #27
 80005c8:	d425      	bmi.n	8000616 <RCC_GetClocksFreq+0xa2>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005cc:	4925      	ldr	r1, [pc, #148]	; (8000664 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80005ce:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80005d0:	2303      	movs	r3, #3
 80005d2:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80005d4:	422b      	tst	r3, r5
 80005d6:	d024      	beq.n	8000622 <RCC_GetClocksFreq+0xae>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 80005d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005da:	401a      	ands	r2, r3
 80005dc:	2a01      	cmp	r2, #1
 80005de:	d03a      	beq.n	8000656 <RCC_GetClocksFreq+0xe2>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 80005e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005e2:	401a      	ands	r2, r3
 80005e4:	2a02      	cmp	r2, #2
 80005e6:	d038      	beq.n	800065a <RCC_GetClocksFreq+0xe6>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 80005e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80005ea:	4013      	ands	r3, r2
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d101      	bne.n	80005f4 <RCC_GetClocksFreq+0x80>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <RCC_GetClocksFreq+0xf4>)
 80005f2:	61a3      	str	r3, [r4, #24]
  }
}
 80005f4:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80005f6:	684b      	ldr	r3, [r1, #4]
 80005f8:	045b      	lsls	r3, r3, #17
 80005fa:	d414      	bmi.n	8000626 <RCC_GetClocksFreq+0xb2>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80005fc:	0853      	lsrs	r3, r2, #1
 80005fe:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	065b      	lsls	r3, r3, #25
 8000606:	d5da      	bpl.n	80005be <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <RCC_GetClocksFreq+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	06db      	lsls	r3, r3, #27
 8000614:	d5d9      	bpl.n	80005ca <RCC_GetClocksFreq+0x56>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000616:	2303      	movs	r3, #3
 8000618:	4912      	ldr	r1, [pc, #72]	; (8000664 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800061a:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800061c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800061e:	422b      	tst	r3, r5
 8000620:	d1da      	bne.n	80005d8 <RCC_GetClocksFreq+0x64>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000622:	61a2      	str	r2, [r4, #24]
 8000624:	e7e6      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000626:	0893      	lsrs	r3, r2, #2
 8000628:	60e3      	str	r3, [r4, #12]
 800062a:	e7c4      	b.n	80005b6 <RCC_GetClocksFreq+0x42>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800062c:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800062e:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000630:	0280      	lsls	r0, r0, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 8000632:	0f00      	lsrs	r0, r0, #28
 8000634:	1c85      	adds	r5, r0, #2
      
      if (pllsource == 0x00)
 8000636:	03db      	lsls	r3, r3, #15
 8000638:	d403      	bmi.n	8000642 <RCC_GetClocksFreq+0xce>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <RCC_GetClocksFreq+0x104>)
 800063c:	4368      	muls	r0, r5
 800063e:	6020      	str	r0, [r4, #0]
 8000640:	e7a4      	b.n	800058c <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000642:	210f      	movs	r1, #15
 8000644:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <RCC_GetClocksFreq+0xf4>)
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000648:	4019      	ands	r1, r3
 800064a:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 800064c:	f004 f9b6 	bl	80049bc <__aeabi_uidiv>
 8000650:	4368      	muls	r0, r5
 8000652:	6020      	str	r0, [r4, #0]
 8000654:	e79a      	b.n	800058c <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000656:	61a0      	str	r0, [r4, #24]
 8000658:	e7cc      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	61a3      	str	r3, [r4, #24]
 8000660:	e7c8      	b.n	80005f4 <RCC_GetClocksFreq+0x80>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000
 8000668:	007a1200 	.word	0x007a1200
 800066c:	20000000 	.word	0x20000000
 8000670:	00d59f80 	.word	0x00d59f80
 8000674:	00008012 	.word	0x00008012
 8000678:	003d0900 	.word	0x003d0900

0800067c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800067c:	4a02      	ldr	r2, [pc, #8]	; (8000688 <RCC_RTCCLKConfig+0xc>)
 800067e:	6a13      	ldr	r3, [r2, #32]
 8000680:	4318      	orrs	r0, r3
 8000682:	6210      	str	r0, [r2, #32]
}
 8000684:	4770      	bx	lr
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <RCC_RTCCLKCmd+0x1c>)
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800068e:	2800      	cmp	r0, #0
 8000690:	d104      	bne.n	800069c <RCC_RTCCLKCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000692:	6a11      	ldr	r1, [r2, #32]
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <RCC_RTCCLKCmd+0x20>)
 8000696:	400b      	ands	r3, r1
 8000698:	6213      	str	r3, [r2, #32]
  }
}
 800069a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	6a13      	ldr	r3, [r2, #32]
 80006a0:	0209      	lsls	r1, r1, #8
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6213      	str	r3, [r2, #32]
 80006a6:	e7f8      	b.n	800069a <RCC_RTCCLKCmd+0xe>
 80006a8:	40021000 	.word	0x40021000
 80006ac:	ffff7fff 	.word	0xffff7fff

080006b0 <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <RCC_BackupResetCmd+0x1c>)
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d104      	bne.n	80006c0 <RCC_BackupResetCmd+0x10>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 80006b6:	6a11      	ldr	r1, [r2, #32]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <RCC_BackupResetCmd+0x20>)
 80006ba:	400b      	ands	r3, r1
 80006bc:	6213      	str	r3, [r2, #32]
  }
}
 80006be:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	6a13      	ldr	r3, [r2, #32]
 80006c4:	0249      	lsls	r1, r1, #9
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6213      	str	r3, [r2, #32]
 80006ca:	e7f8      	b.n	80006be <RCC_BackupResetCmd+0xe>
 80006cc:	40021000 	.word	0x40021000
 80006d0:	fffeffff 	.word	0xfffeffff

080006d4 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <RCC_AHBPeriphClockCmd+0x14>)
 80006d6:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80006d8:	2900      	cmp	r1, #0
 80006da:	d102      	bne.n	80006e2 <RCC_AHBPeriphClockCmd+0xe>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80006dc:	4383      	bics	r3, r0
 80006de:	6153      	str	r3, [r2, #20]
  }
}
 80006e0:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80006e2:	4318      	orrs	r0, r3
 80006e4:	6150      	str	r0, [r2, #20]
 80006e6:	e7fb      	b.n	80006e0 <RCC_AHBPeriphClockCmd+0xc>
 80006e8:	40021000 	.word	0x40021000

080006ec <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <RCC_APB2PeriphClockCmd+0x14>)
 80006ee:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006f0:	2900      	cmp	r1, #0
 80006f2:	d102      	bne.n	80006fa <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006f4:	4383      	bics	r3, r0
 80006f6:	6193      	str	r3, [r2, #24]
  }
}
 80006f8:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006fa:	4318      	orrs	r0, r3
 80006fc:	6190      	str	r0, [r2, #24]
 80006fe:	e7fb      	b.n	80006f8 <RCC_APB2PeriphClockCmd+0xc>
 8000700:	40021000 	.word	0x40021000

08000704 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <RCC_APB1PeriphClockCmd+0x14>)
 8000706:	69d3      	ldr	r3, [r2, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000708:	2900      	cmp	r1, #0
 800070a:	d102      	bne.n	8000712 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800070c:	4383      	bics	r3, r0
 800070e:	61d3      	str	r3, [r2, #28]
  }
}
 8000710:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000712:	4318      	orrs	r0, r3
 8000714:	61d0      	str	r0, [r2, #28]
 8000716:	e7fb      	b.n	8000710 <RCC_APB1PeriphClockCmd+0xc>
 8000718:	40021000 	.word	0x40021000

0800071c <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <RCC_AHBPeriphResetCmd+0x14>)
 800071e:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000720:	2900      	cmp	r1, #0
 8000722:	d102      	bne.n	800072a <RCC_AHBPeriphResetCmd+0xe>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000724:	4383      	bics	r3, r0
 8000726:	6293      	str	r3, [r2, #40]	; 0x28
  }
}
 8000728:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 800072a:	4318      	orrs	r0, r3
 800072c:	6290      	str	r0, [r2, #40]	; 0x28
 800072e:	e7fb      	b.n	8000728 <RCC_AHBPeriphResetCmd+0xc>
 8000730:	40021000 	.word	0x40021000

08000734 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000734:	4a04      	ldr	r2, [pc, #16]	; (8000748 <RCC_APB2PeriphResetCmd+0x14>)
 8000736:	68d3      	ldr	r3, [r2, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000738:	2900      	cmp	r1, #0
 800073a:	d102      	bne.n	8000742 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800073c:	4383      	bics	r3, r0
 800073e:	60d3      	str	r3, [r2, #12]
  }
}
 8000740:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000742:	4318      	orrs	r0, r3
 8000744:	60d0      	str	r0, [r2, #12]
 8000746:	e7fb      	b.n	8000740 <RCC_APB2PeriphResetCmd+0xc>
 8000748:	40021000 	.word	0x40021000

0800074c <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <RCC_APB1PeriphResetCmd+0x14>)
 800074e:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000750:	2900      	cmp	r1, #0
 8000752:	d102      	bne.n	800075a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000754:	4383      	bics	r3, r0
 8000756:	6113      	str	r3, [r2, #16]
  }
}
 8000758:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800075a:	4318      	orrs	r0, r3
 800075c:	6110      	str	r0, [r2, #16]
 800075e:	e7fb      	b.n	8000758 <RCC_APB1PeriphResetCmd+0xc>
 8000760:	40021000 	.word	0x40021000

08000764 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <RCC_ITConfig+0x14>)
 8000766:	7813      	ldrb	r3, [r2, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000768:	2900      	cmp	r1, #0
 800076a:	d102      	bne.n	8000772 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 800076c:	4383      	bics	r3, r0
 800076e:	7013      	strb	r3, [r2, #0]
  }
}
 8000770:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000772:	4318      	orrs	r0, r3
 8000774:	7010      	strb	r0, [r2, #0]
 8000776:	e7fb      	b.n	8000770 <RCC_ITConfig+0xc>
 8000778:	40021009 	.word	0x40021009

0800077c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800077c:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 800077e:	d108      	bne.n	8000792 <RCC_GetFlagStatus+0x16>
  {
    statusreg = RCC->CR;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <RCC_GetFlagStatus+0x30>)
 8000782:	681b      	ldr	r3, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000784:	221f      	movs	r2, #31
 8000786:	4010      	ands	r0, r2
 8000788:	40c3      	lsrs	r3, r0
 800078a:	1c18      	adds	r0, r3, #0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800078c:	2301      	movs	r3, #1
 800078e:	4018      	ands	r0, r3
}
 8000790:	4770      	bx	lr

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000792:	2b01      	cmp	r3, #1
 8000794:	d004      	beq.n	80007a0 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000796:	2b02      	cmp	r3, #2
 8000798:	d005      	beq.n	80007a6 <RCC_GetFlagStatus+0x2a>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <RCC_GetFlagStatus+0x30>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	e7f1      	b.n	8000784 <RCC_GetFlagStatus+0x8>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <RCC_GetFlagStatus+0x30>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	e7ee      	b.n	8000784 <RCC_GetFlagStatus+0x8>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80007a6:	4b01      	ldr	r3, [pc, #4]	; (80007ac <RCC_GetFlagStatus+0x30>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	e7eb      	b.n	8000784 <RCC_GetFlagStatus+0x8>
 80007ac:	40021000 	.word	0x40021000

080007b0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007b0:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 80007b2:	2300      	movs	r3, #0
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007b4:	24a0      	movs	r4, #160	; 0xa0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80007b6:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0;
 80007b8:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007ba:	00e4      	lsls	r4, r4, #3
 80007bc:	e001      	b.n	80007c2 <RCC_WaitForHSEStartUp+0x12>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d108      	bne.n	80007d4 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80007c2:	2011      	movs	r0, #17
 80007c4:	f7ff ffda 	bl	800077c <RCC_GetFlagStatus>
    StartUpCounter++;  
 80007c8:	9b01      	ldr	r3, [sp, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 80007ce:	9b01      	ldr	r3, [sp, #4]
 80007d0:	42a3      	cmp	r3, r4
 80007d2:	d1f4      	bne.n	80007be <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80007d4:	2011      	movs	r0, #17
 80007d6:	f7ff ffd1 	bl	800077c <RCC_GetFlagStatus>
 80007da:	1e43      	subs	r3, r0, #1
 80007dc:	4198      	sbcs	r0, r3
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 80007de:	b2c0      	uxtb	r0, r0
}
 80007e0:	b002      	add	sp, #8
 80007e2:	bd10      	pop	{r4, pc}

080007e4 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <RCC_ClearFlag+0x10>)
 80007e8:	0449      	lsls	r1, r1, #17
 80007ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6253      	str	r3, [r2, #36]	; 0x24
}
 80007f0:	4770      	bx	lr
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <RCC_GetITStatus+0x10>)
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	4018      	ands	r0, r3
 80007fe:	1e43      	subs	r3, r0, #1
 8000800:	4198      	sbcs	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000802:	b2c0      	uxtb	r0, r0
}
 8000804:	4770      	bx	lr
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000

0800080c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 800080c:	4b01      	ldr	r3, [pc, #4]	; (8000814 <RCC_ClearITPendingBit+0x8>)
 800080e:	7018      	strb	r0, [r3, #0]
}
 8000810:	4770      	bx	lr
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	4002100a 	.word	0x4002100a

08000818 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM peripheral.
  * @retval None
  *   
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000818:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
 800081a:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <TIM_DeInit+0xdc>)
 800081c:	4298      	cmp	r0, r3
 800081e:	d021      	beq.n	8000864 <TIM_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  }     
  else if (TIMx == TIM2)
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	4298      	cmp	r0, r3
 8000826:	d028      	beq.n	800087a <TIM_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <TIM_DeInit+0xe0>)
 800082a:	4298      	cmp	r0, r3
 800082c:	d02e      	beq.n	800088c <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM6)
 800082e:	4b33      	ldr	r3, [pc, #204]	; (80008fc <TIM_DeInit+0xe4>)
 8000830:	4298      	cmp	r0, r3
 8000832:	d034      	beq.n	800089e <TIM_DeInit+0x86>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  } 
  else if (TIMx == TIM14) 
 8000834:	4b32      	ldr	r3, [pc, #200]	; (8000900 <TIM_DeInit+0xe8>)
 8000836:	4298      	cmp	r0, r3
 8000838:	d03a      	beq.n	80008b0 <TIM_DeInit+0x98>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
  }        
  else if (TIMx == TIM15)
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <TIM_DeInit+0xec>)
 800083c:	4298      	cmp	r0, r3
 800083e:	d042      	beq.n	80008c6 <TIM_DeInit+0xae>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
  } 
  else if (TIMx == TIM16)
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <TIM_DeInit+0xf0>)
 8000842:	4298      	cmp	r0, r3
 8000844:	d04a      	beq.n	80008dc <TIM_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
  } 
  else
  {
    if (TIMx == TIM17)
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <TIM_DeInit+0xf4>)
 8000848:	4298      	cmp	r0, r3
 800084a:	d000      	beq.n	800084e <TIM_DeInit+0x36>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
     
}
 800084c:	bd08      	pop	{r3, pc}
  } 
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800084e:	2080      	movs	r0, #128	; 0x80
 8000850:	2101      	movs	r1, #1
 8000852:	02c0      	lsls	r0, r0, #11
 8000854:	f7ff ff6e 	bl	8000734 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8000858:	2080      	movs	r0, #128	; 0x80
 800085a:	2100      	movs	r1, #0
 800085c:	02c0      	lsls	r0, r0, #11
 800085e:	f7ff ff69 	bl	8000734 <RCC_APB2PeriphResetCmd>
 8000862:	e7f3      	b.n	800084c <TIM_DeInit+0x34>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	2101      	movs	r1, #1
 8000868:	0100      	lsls	r0, r0, #4
 800086a:	f7ff ff63 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	2100      	movs	r1, #0
 8000872:	0100      	lsls	r0, r0, #4
 8000874:	f7ff ff5e 	bl	8000734 <RCC_APB2PeriphResetCmd>
 8000878:	e7e8      	b.n	800084c <TIM_DeInit+0x34>
  }     
  else if (TIMx == TIM2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800087a:	2001      	movs	r0, #1
 800087c:	2101      	movs	r1, #1
 800087e:	f7ff ff65 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000882:	2001      	movs	r0, #1
 8000884:	2100      	movs	r1, #0
 8000886:	f7ff ff61 	bl	800074c <RCC_APB1PeriphResetCmd>
 800088a:	e7df      	b.n	800084c <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800088c:	2002      	movs	r0, #2
 800088e:	2101      	movs	r1, #1
 8000890:	f7ff ff5c 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000894:	2002      	movs	r0, #2
 8000896:	2100      	movs	r1, #0
 8000898:	f7ff ff58 	bl	800074c <RCC_APB1PeriphResetCmd>
 800089c:	e7d6      	b.n	800084c <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM6)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800089e:	2010      	movs	r0, #16
 80008a0:	2101      	movs	r1, #1
 80008a2:	f7ff ff53 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80008a6:	2010      	movs	r0, #16
 80008a8:	2100      	movs	r1, #0
 80008aa:	f7ff ff4f 	bl	800074c <RCC_APB1PeriphResetCmd>
 80008ae:	e7cd      	b.n	800084c <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM14) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80008b0:	2080      	movs	r0, #128	; 0x80
 80008b2:	2101      	movs	r1, #1
 80008b4:	0040      	lsls	r0, r0, #1
 80008b6:	f7ff ff49 	bl	800074c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80008ba:	2080      	movs	r0, #128	; 0x80
 80008bc:	2100      	movs	r1, #0
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	f7ff ff44 	bl	800074c <RCC_APB1PeriphResetCmd>
 80008c4:	e7c2      	b.n	800084c <TIM_DeInit+0x34>
  }        
  else if (TIMx == TIM15)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80008c6:	2080      	movs	r0, #128	; 0x80
 80008c8:	2101      	movs	r1, #1
 80008ca:	0240      	lsls	r0, r0, #9
 80008cc:	f7ff ff32 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80008d0:	2080      	movs	r0, #128	; 0x80
 80008d2:	2100      	movs	r1, #0
 80008d4:	0240      	lsls	r0, r0, #9
 80008d6:	f7ff ff2d 	bl	8000734 <RCC_APB2PeriphResetCmd>
 80008da:	e7b7      	b.n	800084c <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM16)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80008dc:	2080      	movs	r0, #128	; 0x80
 80008de:	2101      	movs	r1, #1
 80008e0:	0280      	lsls	r0, r0, #10
 80008e2:	f7ff ff27 	bl	8000734 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	2100      	movs	r1, #0
 80008ea:	0280      	lsls	r0, r0, #10
 80008ec:	f7ff ff22 	bl	8000734 <RCC_APB2PeriphResetCmd>
 80008f0:	e7ac      	b.n	800084c <TIM_DeInit+0x34>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40001000 	.word	0x40001000
 8000900:	40002000 	.word	0x40002000
 8000904:	40014000 	.word	0x40014000
 8000908:	40014400 	.word	0x40014400
 800090c:	40014800 	.word	0x40014800

08000910 <TIM_TimeBaseInit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000910:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <TIM_TimeBaseInit+0x80>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000914:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8000916:	4290      	cmp	r0, r2
 8000918:	d01e      	beq.n	8000958 <TIM_TimeBaseInit+0x48>
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	05d2      	lsls	r2, r2, #23
 800091e:	4290      	cmp	r0, r2
 8000920:	d02a      	beq.n	8000978 <TIM_TimeBaseInit+0x68>
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <TIM_TimeBaseInit+0x84>)
 8000924:	4290      	cmp	r0, r2
 8000926:	d027      	beq.n	8000978 <TIM_TimeBaseInit+0x68>
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  }
 
  if(TIMx != TIM6)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <TIM_TimeBaseInit+0x88>)
 800092a:	4290      	cmp	r0, r2
 800092c:	d029      	beq.n	8000982 <TIM_TimeBaseInit+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <TIM_TimeBaseInit+0x8c>)
 8000930:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000932:	890a      	ldrh	r2, [r1, #8]
 8000934:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000936:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000938:	684b      	ldr	r3, [r1, #4]
 800093a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800093c:	880b      	ldrh	r3, [r1, #0]
 800093e:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <TIM_TimeBaseInit+0x90>)
 8000942:	4298      	cmp	r0, r3
 8000944:	d015      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <TIM_TimeBaseInit+0x94>)
 8000948:	4298      	cmp	r0, r3
 800094a:	d012      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <TIM_TimeBaseInit+0x98>)
 800094e:	4298      	cmp	r0, r3
 8000950:	d00f      	beq.n	8000972 <TIM_TimeBaseInit+0x62>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000952:	2301      	movs	r3, #1
 8000954:	8283      	strh	r3, [r0, #20]
}
 8000956:	4770      	bx	lr
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000958:	2270      	movs	r2, #112	; 0x70
 800095a:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800095c:	884a      	ldrh	r2, [r1, #2]
 800095e:	4313      	orrs	r3, r2
  }
 
  if(TIMx != TIM6)
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <TIM_TimeBaseInit+0x8c>)
 8000962:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000964:	890a      	ldrh	r2, [r1, #8]
 8000966:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000968:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800096a:	684b      	ldr	r3, [r1, #4]
 800096c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800096e:	880b      	ldrh	r3, [r1, #0]
 8000970:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000972:	7a8b      	ldrb	r3, [r1, #10]
 8000974:	8603      	strh	r3, [r0, #48]	; 0x30
 8000976:	e7ec      	b.n	8000952 <TIM_TimeBaseInit+0x42>
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000978:	2270      	movs	r2, #112	; 0x70
 800097a:	4393      	bics	r3, r2
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800097c:	884a      	ldrh	r2, [r1, #2]
 800097e:	4313      	orrs	r3, r2
 8000980:	e7d5      	b.n	800092e <TIM_TimeBaseInit+0x1e>
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000982:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000984:	684b      	ldr	r3, [r1, #4]
 8000986:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000988:	880b      	ldrh	r3, [r1, #0]
 800098a:	8503      	strh	r3, [r0, #40]	; 0x28
 800098c:	e7e1      	b.n	8000952 <TIM_TimeBaseInit+0x42>
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40000400 	.word	0x40000400
 8000998:	40001000 	.word	0x40001000
 800099c:	fffffcff 	.word	0xfffffcff
 80009a0:	40014000 	.word	0x40014000
 80009a4:	40014400 	.word	0x40014400
 80009a8:	40014800 	.word	0x40014800

080009ac <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80009b2:	2300      	movs	r3, #0
 80009b4:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80009b6:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80009b8:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80009ba:	7283      	strb	r3, [r0, #10]
}
 80009bc:	4770      	bx	lr
 80009be:	46c0      	nop			; (mov r8, r8)

080009c0 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80009c0:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80009c2:	8282      	strh	r2, [r0, #20]
}
 80009c4:	4770      	bx	lr
 80009c6:	46c0      	nop			; (mov r8, r8)

080009c8 <TIM_CounterModeConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009c8:	2270      	movs	r2, #112	; 0x70
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
 80009ca:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009cc:	4393      	bics	r3, r2
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80009ce:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80009d0:	8001      	strh	r1, [r0, #0]
}
 80009d2:	4770      	bx	lr

080009d4 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80009d4:	6241      	str	r1, [r0, #36]	; 0x24
}
 80009d6:	4770      	bx	lr

080009d8 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80009d8:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80009da:	4770      	bx	lr

080009dc <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 80009dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80009de:	4770      	bx	lr

080009e0 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80009e0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80009e2:	b280      	uxth	r0, r0
}
 80009e4:	4770      	bx	lr
 80009e6:	46c0      	nop			; (mov r8, r8)

080009e8 <TIM_UpdateDisableConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d104      	bne.n	80009f6 <TIM_UpdateDisableConfig+0xe>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 80009ec:	2202      	movs	r2, #2
 80009ee:	8803      	ldrh	r3, [r0, #0]
 80009f0:	4393      	bics	r3, r2
 80009f2:	8003      	strh	r3, [r0, #0]
  }
}
 80009f4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80009f6:	2302      	movs	r3, #2
 80009f8:	8802      	ldrh	r2, [r0, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	8003      	strh	r3, [r0, #0]
 80009fe:	e7f9      	b.n	80009f4 <TIM_UpdateDisableConfig+0xc>

08000a00 <TIM_UpdateRequestConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d104      	bne.n	8000a0e <TIM_UpdateRequestConfig+0xe>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8000a04:	2204      	movs	r2, #4
 8000a06:	8803      	ldrh	r3, [r0, #0]
 8000a08:	4393      	bics	r3, r2
 8000a0a:	8003      	strh	r3, [r0, #0]
  }
}
 8000a0c:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	8802      	ldrh	r2, [r0, #0]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	8003      	strh	r3, [r0, #0]
 8000a16:	e7f9      	b.n	8000a0c <TIM_UpdateRequestConfig+0xc>

08000a18 <TIM_ARRPreloadConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	d104      	bne.n	8000a26 <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	8803      	ldrh	r3, [r0, #0]
 8000a20:	4393      	bics	r3, r2
 8000a22:	8003      	strh	r3, [r0, #0]
  }
}
 8000a24:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	8802      	ldrh	r2, [r0, #0]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	8003      	strh	r3, [r0, #0]
 8000a2e:	e7f9      	b.n	8000a24 <TIM_ARRPreloadConfig+0xc>

08000a30 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8000a30:	2208      	movs	r2, #8
 8000a32:	8803      	ldrh	r3, [r0, #0]
 8000a34:	4393      	bics	r3, r2
 8000a36:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8000a38:	8803      	ldrh	r3, [r0, #0]
 8000a3a:	4319      	orrs	r1, r3
 8000a3c:	8001      	strh	r1, [r0, #0]
}
 8000a3e:	4770      	bx	lr

08000a40 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8000a40:	8802      	ldrh	r2, [r0, #0]
 8000a42:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <TIM_SetClockDivision+0x10>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8000a48:	8803      	ldrh	r3, [r0, #0]
 8000a4a:	4319      	orrs	r1, r3
 8000a4c:	8001      	strh	r1, [r0, #0]
}
 8000a4e:	4770      	bx	lr
 8000a50:	fffffcff 	.word	0xfffffcff

08000a54 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d104      	bne.n	8000a62 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000a58:	2201      	movs	r2, #1
 8000a5a:	8803      	ldrh	r3, [r0, #0]
 8000a5c:	4393      	bics	r3, r2
 8000a5e:	8003      	strh	r3, [r0, #0]
  }
}
 8000a60:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a62:	2301      	movs	r3, #1
 8000a64:	8802      	ldrh	r2, [r0, #0]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	8003      	strh	r3, [r0, #0]
 8000a6a:	e7f9      	b.n	8000a60 <TIM_Cmd+0xc>

08000a6c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8000a6c:	884a      	ldrh	r2, [r1, #2]
 8000a6e:	880b      	ldrh	r3, [r1, #0]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	888a      	ldrh	r2, [r1, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	88ca      	ldrh	r2, [r1, #6]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	890a      	ldrh	r2, [r1, #8]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	894a      	ldrh	r2, [r1, #10]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	898a      	ldrh	r2, [r1, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	2244      	movs	r2, #68	; 0x44
 8000a88:	5283      	strh	r3, [r0, r2]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8000a8a:	4770      	bx	lr

08000a8c <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8000a90:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8000a92:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8000a94:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8000a96:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8000a98:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8000a9a:	8183      	strh	r3, [r0, #12]
}
 8000a9c:	4770      	bx	lr
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000aa0:	2244      	movs	r2, #68	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d104      	bne.n	8000ab0 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8000aa6:	5a83      	ldrh	r3, [r0, r2]
 8000aa8:	045b      	lsls	r3, r3, #17
 8000aaa:	0c5b      	lsrs	r3, r3, #17
 8000aac:	5283      	strh	r3, [r0, r2]
  }  
}
 8000aae:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	5a81      	ldrh	r1, [r0, r2]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	430b      	orrs	r3, r1
 8000ab8:	5283      	strh	r3, [r0, r2]
 8000aba:	e7f8      	b.n	8000aae <TIM_CtrlPWMOutputs+0xe>

08000abc <TIM_OC1Init>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000abc:	2201      	movs	r2, #1
 8000abe:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000ac2:	4393      	bics	r3, r2
 8000ac4:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ac6:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ac8:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000aca:	8b05      	ldrh	r5, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000acc:	3272      	adds	r2, #114	; 0x72
 8000ace:	4395      	bics	r5, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000ad0:	880a      	ldrh	r2, [r1, #0]
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ad2:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000ad4:	4315      	orrs	r5, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	4393      	bics	r3, r2
 8000ada:	1c1e      	adds	r6, r3, #0
 8000adc:	898a      	ldrh	r2, [r1, #12]
 8000ade:	884b      	ldrh	r3, [r1, #2]
 8000ae0:	4313      	orrs	r3, r2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <TIM_OC1Init+0x6c>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000ae4:	4333      	orrs	r3, r6
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000ae6:	4290      	cmp	r0, r2
 8000ae8:	d00e      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <TIM_OC1Init+0x70>)
 8000aec:	4290      	cmp	r0, r2
 8000aee:	d00b      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <TIM_OC1Init+0x74>)
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d008      	beq.n	8000b08 <TIM_OC1Init+0x4c>
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <TIM_OC1Init+0x78>)
 8000af8:	4290      	cmp	r0, r2
 8000afa:	d005      	beq.n	8000b08 <TIM_OC1Init+0x4c>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000afc:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000afe:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b00:	8305      	strh	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000b02:	6342      	str	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b04:	8403      	strh	r3, [r0, #32]
}
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000b08:	2208      	movs	r2, #8
 8000b0a:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b0c:	89ca      	ldrh	r2, [r1, #14]
 8000b0e:	8a4e      	ldrh	r6, [r1, #18]
 8000b10:	4313      	orrs	r3, r2
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000b12:	2204      	movs	r2, #4
 8000b14:	4393      	bics	r3, r2
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b16:	888a      	ldrh	r2, [r1, #4]
 8000b18:	4313      	orrs	r3, r2
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <TIM_OC1Init+0x7c>)
 8000b1c:	4014      	ands	r4, r2
 8000b1e:	8a0a      	ldrh	r2, [r1, #16]
 8000b20:	4332      	orrs	r2, r6
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000b22:	4314      	orrs	r4, r2
 8000b24:	e7ea      	b.n	8000afc <TIM_OC1Init+0x40>
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40014000 	.word	0x40014000
 8000b30:	40014400 	.word	0x40014400
 8000b34:	40014800 	.word	0x40014800
 8000b38:	fffffcff 	.word	0xfffffcff

08000b3c <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000b42:	4393      	bics	r3, r2
 8000b44:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000b46:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <TIM_OC2Init+0x70>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b4a:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b4c:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b4e:	880e      	ldrh	r6, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000b50:	401c      	ands	r4, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8000b52:	2320      	movs	r3, #32
 8000b54:	439a      	bics	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b56:	898b      	ldrh	r3, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b58:	0236      	lsls	r6, r6, #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	431a      	orrs	r2, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000b5e:	884b      	ldrh	r3, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000b60:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	431a      	orrs	r2, r3
 8000b66:	b293      	uxth	r3, r2
    
  if(TIMx == TIM1)
 8000b68:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <TIM_OC2Init+0x74>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b6a:	4334      	orrs	r4, r6
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b6c:	b2ad      	uxth	r5, r5
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000b6e:	b2a4      	uxth	r4, r4
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if(TIMx == TIM1)
 8000b70:	4290      	cmp	r0, r2
 8000b72:	d005      	beq.n	8000b80 <TIM_OC2Init+0x44>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000b74:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b76:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000b78:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000b7a:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b7c:	8403      	strh	r3, [r0, #32]
}
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000b84:	89ca      	ldrh	r2, [r1, #14]
 8000b86:	0112      	lsls	r2, r2, #4
 8000b88:	4313      	orrs	r3, r2
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <TIM_OC2Init+0x78>)
 8000b8c:	4013      	ands	r3, r2
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000b8e:	888a      	ldrh	r2, [r1, #4]
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	4313      	orrs	r3, r2
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <TIM_OC2Init+0x7c>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000b96:	b29b      	uxth	r3, r3
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000b98:	4015      	ands	r5, r2
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000b9a:	8a0a      	ldrh	r2, [r1, #16]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4315      	orrs	r5, r2
 8000ba0:	b2aa      	uxth	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000ba2:	8a4d      	ldrh	r5, [r1, #18]
 8000ba4:	00ad      	lsls	r5, r5, #2
 8000ba6:	432a      	orrs	r2, r5
 8000ba8:	b295      	uxth	r5, r2
 8000baa:	e7e3      	b.n	8000b74 <TIM_OC2Init+0x38>
 8000bac:	ffff8cff 	.word	0xffff8cff
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	0000ffbf 	.word	0x0000ffbf
 8000bb8:	fffff3ff 	.word	0xfffff3ff

08000bbc <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000bbc:	8c02      	ldrh	r2, [r0, #32]
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <TIM_OC3Init+0x6c>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000bc6:	2373      	movs	r3, #115	; 0x73
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bc8:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bca:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bcc:	8b86      	ldrh	r6, [r0, #28]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000bce:	898c      	ldrh	r4, [r1, #12]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000bd0:	439e      	bics	r6, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000bd2:	880b      	ldrh	r3, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000bd4:	0224      	lsls	r4, r4, #8
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000bd6:	431e      	orrs	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <TIM_OC3Init+0x70>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000bda:	b2ad      	uxth	r5, r5
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000bdc:	401a      	ands	r2, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000bde:	884b      	ldrh	r3, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000be0:	4322      	orrs	r2, r4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000be2:	021b      	lsls	r3, r3, #8
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000be4:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000be6:	431a      	orrs	r2, r3
 8000be8:	b293      	uxth	r3, r2
    
  if(TIMx == TIM1)
 8000bea:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <TIM_OC3Init+0x74>)
 8000bec:	4290      	cmp	r0, r2
 8000bee:	d005      	beq.n	8000bfc <TIM_OC3Init+0x40>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000bf0:	688a      	ldr	r2, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bf2:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000bf4:	8386      	strh	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000bf6:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bf8:	8403      	strh	r3, [r0, #32]
}
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <TIM_OC3Init+0x78>)
 8000bfe:	4013      	ands	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000c00:	89ca      	ldrh	r2, [r1, #14]
 8000c02:	0212      	lsls	r2, r2, #8
 8000c04:	4313      	orrs	r3, r2
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <TIM_OC3Init+0x7c>)
 8000c08:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c0a:	888a      	ldrh	r2, [r1, #4]
 8000c0c:	0212      	lsls	r2, r2, #8
 8000c0e:	4313      	orrs	r3, r2
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <TIM_OC3Init+0x80>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c12:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000c14:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000c16:	8a0a      	ldrh	r2, [r1, #16]
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	4315      	orrs	r5, r2
 8000c1c:	b2aa      	uxth	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000c1e:	8a4d      	ldrh	r5, [r1, #18]
 8000c20:	012d      	lsls	r5, r5, #4
 8000c22:	432a      	orrs	r2, r5
 8000c24:	b295      	uxth	r5, r2
 8000c26:	e7e3      	b.n	8000bf0 <TIM_OC3Init+0x34>
 8000c28:	fffffeff 	.word	0xfffffeff
 8000c2c:	fffffdff 	.word	0xfffffdff
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	fffff7ff 	.word	0xfffff7ff
 8000c38:	0000fbff 	.word	0x0000fbff
 8000c3c:	ffffcfff 	.word	0xffffcfff

08000c40 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000c40:	8c02      	ldrh	r2, [r0, #32]
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <TIM_OC4Init+0x54>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000c46:	4013      	ands	r3, r2
 8000c48:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c4a:	8c04      	ldrh	r4, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <TIM_OC4Init+0x58>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c4e:	8886      	ldrh	r6, [r0, #4]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c50:	880d      	ldrh	r5, [r1, #0]
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c52:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c54:	022d      	lsls	r5, r5, #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000c56:	401a      	ands	r2, r3
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c58:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <TIM_OC4Init+0x5c>)
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000c5c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000c5e:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000c60:	032d      	lsls	r5, r5, #12
 8000c62:	432b      	orrs	r3, r5
 8000c64:	b29c      	uxth	r4, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c66:	884b      	ldrh	r3, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c68:	b2b6      	uxth	r6, r6
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	4323      	orrs	r3, r4
    
  if(TIMx == TIM1)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ca0 <TIM_OC4Init+0x60>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000c70:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000c72:	b29b      	uxth	r3, r3
    
  if(TIMx == TIM1)
 8000c74:	42a0      	cmp	r0, r4
 8000c76:	d005      	beq.n	8000c84 <TIM_OC4Init+0x44>
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c78:	8086      	strh	r6, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000c7a:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000c7c:	688a      	ldr	r2, [r1, #8]
 8000c7e:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c80:	8403      	strh	r3, [r0, #32]
}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
    
  if(TIMx == TIM1)
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8000c84:	4c07      	ldr	r4, [pc, #28]	; (8000ca4 <TIM_OC4Init+0x64>)
 8000c86:	4026      	ands	r6, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000c88:	8a0c      	ldrh	r4, [r1, #16]
 8000c8a:	01a4      	lsls	r4, r4, #6
 8000c8c:	4326      	orrs	r6, r4
 8000c8e:	b2b6      	uxth	r6, r6
 8000c90:	e7f2      	b.n	8000c78 <TIM_OC4Init+0x38>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	ffffefff 	.word	0xffffefff
 8000c98:	ffff8cff 	.word	0xffff8cff
 8000c9c:	ffffdfff 	.word	0xffffdfff
 8000ca0:	40012c00 	.word	0x40012c00
 8000ca4:	ffffbfff 	.word	0xffffbfff

08000ca8 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8000cac:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8000cae:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8000cb0:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8000cb2:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8000cb4:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000cb6:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8000cb8:	8243      	strh	r3, [r0, #18]
}
 8000cba:	4770      	bx	lr

08000cbc <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8000cbc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8000cbe:	2501      	movs	r5, #1
 8000cc0:	408d      	lsls	r5, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000cc2:	8c03      	ldrh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000cc4:	1c04      	adds	r4, r0, #0

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000cc6:	43ab      	bics	r3, r5
 8000cc8:	8403      	strh	r3, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000cca:	2308      	movs	r3, #8
 8000ccc:	1c08      	adds	r0, r1, #0
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000cce:	3418      	adds	r4, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000cd0:	4398      	bics	r0, r3
 8000cd2:	d00d      	beq.n	8000cf0 <TIM_SelectOCxM+0x34>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8000cd4:	1f0b      	subs	r3, r1, #4
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	191b      	adds	r3, r3, r4

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	4909      	ldr	r1, [pc, #36]	; (8000d04 <TIM_SelectOCxM+0x48>)
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000ce0:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000ce2:	4001      	ands	r1, r0
 8000ce4:	6019      	str	r1, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000ce6:	6819      	ldr	r1, [r3, #0]
 8000ce8:	b292      	uxth	r2, r2
 8000cea:	430a      	orrs	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]
  }
}
 8000cee:	bd30      	pop	{r4, r5, pc}
  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8000cf0:	2070      	movs	r0, #112	; 0x70
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8000cf2:	0849      	lsrs	r1, r1, #1
 8000cf4:	1861      	adds	r1, r4, r1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8000cf6:	680b      	ldr	r3, [r1, #0]
 8000cf8:	4383      	bics	r3, r0
 8000cfa:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8000cfc:	680b      	ldr	r3, [r1, #0]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	600a      	str	r2, [r1, #0]
 8000d02:	e7f4      	b.n	8000cee <TIM_SelectOCxM+0x32>
 8000d04:	ffff8fff 	.word	0xffff8fff

08000d08 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000d08:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000d0a:	4770      	bx	lr

08000d0c <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8000d0c:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000d0e:	4770      	bx	lr

08000d10 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8000d10:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000d12:	4770      	bx	lr

08000d14 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8000d14:	6401      	str	r1, [r0, #64]	; 0x40
}
 8000d16:	4770      	bx	lr

08000d18 <TIM_ForcedOC1Config>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8000d18:	2270      	movs	r2, #112	; 0x70
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8000d1a:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8000d1c:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8000d1e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d20:	8301      	strh	r1, [r0, #24]
}
 8000d22:	4770      	bx	lr

08000d24 <TIM_ForcedOC2Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d24:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8000d26:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <TIM_ForcedOC2Config+0x10>)
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d28:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8000d2a:	4013      	ands	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d2c:	4319      	orrs	r1, r3
 8000d2e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d30:	8301      	strh	r1, [r0, #24]
}
 8000d32:	4770      	bx	lr
 8000d34:	ffff8fff 	.word	0xffff8fff

08000d38 <TIM_ForcedOC3Config>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8000d38:	2270      	movs	r2, #112	; 0x70
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d3a:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8000d3c:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8000d3e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d40:	8381      	strh	r1, [r0, #28]
}
 8000d42:	4770      	bx	lr

08000d44 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d44:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8000d46:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <TIM_ForcedOC4Config+0x10>)
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d48:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8000d4a:	4013      	ands	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d50:	8381      	strh	r1, [r0, #28]
}
 8000d52:	4770      	bx	lr
 8000d54:	ffff8fff 	.word	0xffff8fff

08000d58 <TIM_CCPreloadControl>:
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d104      	bne.n	8000d66 <TIM_CCPreloadControl+0xe>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	8883      	ldrh	r3, [r0, #4]
 8000d60:	4393      	bics	r3, r2
 8000d62:	8083      	strh	r3, [r0, #4]
  }
}
 8000d64:	4770      	bx	lr
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8000d66:	2301      	movs	r3, #1
 8000d68:	8882      	ldrh	r2, [r0, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	8083      	strh	r3, [r0, #4]
 8000d6e:	e7f9      	b.n	8000d64 <TIM_CCPreloadControl+0xc>

08000d70 <TIM_OC1PreloadConfig>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000d70:	2208      	movs	r2, #8
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d72:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000d74:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000d76:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d78:	8301      	strh	r1, [r0, #24]
}
 8000d7a:	4770      	bx	lr

08000d7c <TIM_OC2PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000d7c:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000d7e:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <TIM_OC2PreloadConfig+0x10>)
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d80:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000d82:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000d84:	4319      	orrs	r1, r3
 8000d86:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000d88:	8301      	strh	r1, [r0, #24]
}
 8000d8a:	4770      	bx	lr
 8000d8c:	fffff7ff 	.word	0xfffff7ff

08000d90 <TIM_OC3PreloadConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000d90:	2208      	movs	r2, #8
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d92:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000d94:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000d96:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000d98:	8381      	strh	r1, [r0, #28]
}
 8000d9a:	4770      	bx	lr

08000d9c <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000d9c:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <TIM_OC4PreloadConfig+0x10>)
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000da0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000da2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000da4:	4319      	orrs	r1, r3
 8000da6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000da8:	8381      	strh	r1, [r0, #28]
}
 8000daa:	4770      	bx	lr
 8000dac:	fffff7ff 	.word	0xfffff7ff

08000db0 <TIM_OC1FastConfig>:
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8000db0:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000db2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8000db4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8000db6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000db8:	8301      	strh	r1, [r0, #24]
}
 8000dba:	4770      	bx	lr

08000dbc <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000dbc:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <TIM_OC2FastConfig+0x10>)
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8000dc0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8000dc2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000dc8:	8301      	strh	r1, [r0, #24]
}
 8000dca:	4770      	bx	lr
 8000dcc:	fffffbff 	.word	0xfffffbff

08000dd0 <TIM_OC3FastConfig>:
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8000dd0:	2204      	movs	r2, #4
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000dd2:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8000dd4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8000dd6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000dd8:	8381      	strh	r1, [r0, #28]
}
 8000dda:	4770      	bx	lr

08000ddc <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000ddc:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <TIM_OC4FastConfig+0x10>)
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8000de0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8000de2:	4013      	ands	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8000de4:	4319      	orrs	r1, r3
 8000de6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000de8:	8381      	strh	r1, [r0, #28]
}
 8000dea:	4770      	bx	lr
 8000dec:	fffffbff 	.word	0xfffffbff

08000df0 <TIM_ClearOC1Ref>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8000df0:	2280      	movs	r2, #128	; 0x80
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000df2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8000df4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8000df6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000df8:	8301      	strh	r1, [r0, #24]
}
 8000dfa:	4770      	bx	lr

08000dfc <TIM_ClearOC2Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000dfc:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000dfe:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8000e00:	045b      	lsls	r3, r3, #17
 8000e02:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000e04:	4319      	orrs	r1, r3
 8000e06:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e08:	8301      	strh	r1, [r0, #24]
}
 8000e0a:	4770      	bx	lr

08000e0c <TIM_ClearOC3Ref>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8000e0c:	2280      	movs	r2, #128	; 0x80
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e0e:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8000e10:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8000e12:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e14:	8381      	strh	r1, [r0, #28]
}
 8000e16:	4770      	bx	lr

08000e18 <TIM_ClearOC4Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e18:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000e1a:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8000e1c:	045b      	lsls	r3, r3, #17
 8000e1e:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000e20:	4319      	orrs	r1, r3
 8000e22:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e24:	8381      	strh	r1, [r0, #28]
}
 8000e26:	4770      	bx	lr

08000e28 <TIM_OC1PolarityConfig>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8000e28:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e2a:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8000e2c:	4393      	bics	r3, r2
  tmpccer |= TIM_OCPolarity;
 8000e2e:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e30:	8401      	strh	r1, [r0, #32]
}
 8000e32:	4770      	bx	lr

08000e34 <TIM_OC1NPolarityConfig>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8000e34:	2208      	movs	r2, #8
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8000e36:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8000e38:	4393      	bics	r3, r2
  tmpccer |= TIM_OCNPolarity;
 8000e3a:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e3c:	8401      	strh	r1, [r0, #32]
}
 8000e3e:	4770      	bx	lr

08000e40 <TIM_OC2PolarityConfig>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8000e40:	2220      	movs	r2, #32
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e42:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8000e44:	0109      	lsls	r1, r1, #4
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8000e46:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e4c:	8401      	strh	r1, [r0, #32]
}
 8000e4e:	4770      	bx	lr

08000e50 <TIM_OC2NPolarityConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8000e50:	2280      	movs	r2, #128	; 0x80
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8000e52:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8000e54:	0109      	lsls	r1, r1, #4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8000e56:	4393      	bics	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8000e58:	4319      	orrs	r1, r3
 8000e5a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e5c:	8401      	strh	r1, [r0, #32]
}
 8000e5e:	4770      	bx	lr

08000e60 <TIM_OC3PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e60:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <TIM_OC3PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8000e64:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8000e66:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8000e68:	4319      	orrs	r1, r3
 8000e6a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e6c:	8401      	strh	r1, [r0, #32]
}
 8000e6e:	4770      	bx	lr
 8000e70:	fffffdff 	.word	0xfffffdff

08000e74 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8000e74:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <TIM_OC3NPolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8000e78:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8000e7a:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8000e7c:	4319      	orrs	r1, r3
 8000e7e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e80:	8401      	strh	r1, [r0, #32]
}
 8000e82:	4770      	bx	lr
 8000e84:	fffff7ff 	.word	0xfffff7ff

08000e88 <TIM_OC4PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000e88:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8000e8a:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <TIM_OC4PolarityConfig+0x10>)
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8000e8c:	0309      	lsls	r1, r1, #12
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8000e8e:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8000e90:	4319      	orrs	r1, r3
 8000e92:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000e94:	8401      	strh	r1, [r0, #32]
}
 8000e96:	4770      	bx	lr
 8000e98:	ffffdfff 	.word	0xffffdfff

08000e9c <TIM_SelectOCREFClear>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	8903      	ldrh	r3, [r0, #8]
 8000ea0:	4393      	bics	r3, r2
 8000ea2:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8000ea4:	8903      	ldrh	r3, [r0, #8]
 8000ea6:	4319      	orrs	r1, r3
 8000ea8:	8101      	strh	r1, [r0, #8]
}
 8000eaa:	4770      	bx	lr

08000eac <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000eac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000eae:	2401      	movs	r4, #1
 8000eb0:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000eb2:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000eb4:	8c03      	ldrh	r3, [r0, #32]
 8000eb6:	43a3      	bics	r3, r4
 8000eb8:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000eba:	8c03      	ldrh	r3, [r0, #32]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	8402      	strh	r2, [r0, #32]
}
 8000ec2:	bd10      	pop	{r4, pc}

08000ec4 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8000ec4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8000ec6:	2404      	movs	r4, #4
 8000ec8:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8000eca:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8000ecc:	8c03      	ldrh	r3, [r0, #32]
 8000ece:	43a3      	bics	r3, r4
 8000ed0:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8000ed2:	8c03      	ldrh	r3, [r0, #32]
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	b292      	uxth	r2, r2
 8000ed8:	8402      	strh	r2, [r0, #32]
}
 8000eda:	bd10      	pop	{r4, pc}

08000edc <TIM_SelectCOM>:
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d104      	bne.n	8000eea <TIM_SelectCOM+0xe>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	8883      	ldrh	r3, [r0, #4]
 8000ee4:	4393      	bics	r3, r2
 8000ee6:	8083      	strh	r3, [r0, #4]
  }
}
 8000ee8:	4770      	bx	lr
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8000eea:	2304      	movs	r3, #4
 8000eec:	8882      	ldrh	r2, [r0, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	8083      	strh	r3, [r0, #4]
 8000ef2:	e7f9      	b.n	8000ee8 <TIM_SelectCOM+0xc>

08000ef4 <TIM_ICInit>:
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ef4:	880b      	ldrh	r3, [r1, #0]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d02a      	beq.n	8000f52 <TIM_ICInit+0x5e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d04a      	beq.n	8000f96 <TIM_ICInit+0xa2>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d100      	bne.n	8000f06 <TIM_ICInit+0x12>
 8000f04:	e06d      	b.n	8000fe2 <TIM_ICInit+0xee>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f06:	8c04      	ldrh	r4, [r0, #32]
 8000f08:	4b47      	ldr	r3, [pc, #284]	; (8001028 <TIM_ICInit+0x134>)
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f0a:	890a      	ldrh	r2, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f0c:	4023      	ands	r3, r4
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f0e:	884f      	ldrh	r7, [r1, #2]
 8000f10:	888e      	ldrh	r6, [r1, #4]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f12:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000f14:	8b85      	ldrh	r5, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000f16:	4c45      	ldr	r4, [pc, #276]	; (800102c <TIM_ICInit+0x138>)
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f18:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000f1a:	402c      	ands	r4, r5
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f1c:	4334      	orrs	r4, r6
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8000f1e:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000f20:	b2a5      	uxth	r5, r4
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f22:	0314      	lsls	r4, r2, #12
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f24:	4a42      	ldr	r2, [pc, #264]	; (8001030 <TIM_ICInit+0x13c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f26:	432c      	orrs	r4, r5
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000f28:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000f2a:	2280      	movs	r2, #128	; 0x80

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000f2c:	033d      	lsls	r5, r7, #12
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000f2e:	432b      	orrs	r3, r5
 8000f30:	0152      	lsls	r2, r2, #5
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000f36:	b2a4      	uxth	r4, r4
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000f38:	8384      	strh	r4, [r0, #28]
  TIMx->CCER = tmpccer;
 8000f3a:	8403      	strh	r3, [r0, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f3c:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000f3e:	4a3d      	ldr	r2, [pc, #244]	; (8001034 <TIM_ICInit+0x140>)
 8000f40:	8b81      	ldrh	r1, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000f42:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000f44:	400a      	ands	r2, r1
 8000f46:	8382      	strh	r2, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000f48:	8b82      	ldrh	r2, [r0, #28]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f52:	2601      	movs	r6, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000f54:	27f3      	movs	r7, #243	; 0xf3
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f56:	8c02      	ldrh	r2, [r0, #32]

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f58:	888d      	ldrh	r5, [r1, #4]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f5a:	43b2      	bics	r2, r6

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f5c:	884b      	ldrh	r3, [r1, #2]
 8000f5e:	890c      	ldrh	r4, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000f60:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f62:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000f64:	0124      	lsls	r4, r4, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000f66:	43ba      	bics	r2, r7
 8000f68:	4314      	orrs	r4, r2
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000f6a:	8c06      	ldrh	r6, [r0, #32]
 8000f6c:	b2a2      	uxth	r2, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000f6e:	432a      	orrs	r2, r5
 8000f70:	1c14      	adds	r4, r2, #0
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8000f72:	1c35      	adds	r5, r6, #0
 8000f74:	220a      	movs	r2, #10
 8000f76:	4395      	bics	r5, r2
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4313      	orrs	r3, r2
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000f7c:	432b      	orrs	r3, r5
 8000f7e:	b29b      	uxth	r3, r3
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f80:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f82:	8403      	strh	r3, [r0, #32]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000f84:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000f86:	210c      	movs	r1, #12
 8000f88:	8b02      	ldrh	r2, [r0, #24]
 8000f8a:	438a      	bics	r2, r1
 8000f8c:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000f8e:	8b02      	ldrh	r2, [r0, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	8303      	strh	r3, [r0, #24]
 8000f94:	e7dc      	b.n	8000f50 <TIM_ICInit+0x5c>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000f96:	2410      	movs	r4, #16
 8000f98:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f9a:	888a      	ldrh	r2, [r1, #4]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000f9c:	43a3      	bics	r3, r4
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000f9e:	884f      	ldrh	r7, [r1, #2]
 8000fa0:	890e      	ldrh	r6, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000fa2:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fa4:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <TIM_ICInit+0x138>)
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000fa8:	0336      	lsls	r6, r6, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000faa:	402b      	ands	r3, r5
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000fac:	4333      	orrs	r3, r6
 8000fae:	b29d      	uxth	r5, r3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fb0:	0213      	lsls	r3, r2, #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000fb2:	22a0      	movs	r2, #160	; 0xa0
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000fb4:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fb6:	432b      	orrs	r3, r5
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8000fb8:	4394      	bics	r4, r2
 8000fba:	1c22      	adds	r2, r4, #0
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fbc:	2410      	movs	r4, #16
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000fbe:	013d      	lsls	r5, r7, #4
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fc0:	432a      	orrs	r2, r5
 8000fc2:	b292      	uxth	r2, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8000fc4:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8000fc6:	4322      	orrs	r2, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000fc8:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fca:	8402      	strh	r2, [r0, #32]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000fcc:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000fce:	4a19      	ldr	r2, [pc, #100]	; (8001034 <TIM_ICInit+0x140>)
 8000fd0:	8b01      	ldrh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000fd2:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000fd8:	8b02      	ldrh	r2, [r0, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	8303      	strh	r3, [r0, #24]
 8000fe0:	e7b6      	b.n	8000f50 <TIM_ICInit+0x5c>
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8000fe2:	27f3      	movs	r7, #243	; 0xf3
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000fe4:	8c02      	ldrh	r2, [r0, #32]
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <TIM_ICInit+0x144>)
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000fe8:	888d      	ldrh	r5, [r1, #4]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000fea:	4013      	ands	r3, r2
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8000fec:	884e      	ldrh	r6, [r1, #2]
 8000fee:	890c      	ldrh	r4, [r1, #8]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8000ff0:	8403      	strh	r3, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000ff2:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ff4:	0124      	lsls	r4, r4, #4
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8000ff6:	43ba      	bics	r2, r7
 8000ff8:	4314      	orrs	r4, r2
 8000ffa:	b2a2      	uxth	r2, r4
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ffc:	432a      	orrs	r2, r5
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8000ffe:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001000:	1c14      	adds	r4, r2, #0
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <TIM_ICInit+0x148>)
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8001004:	0235      	lsls	r5, r6, #8
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001006:	4013      	ands	r3, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	432b      	orrs	r3, r5
 800100c:	0052      	lsls	r2, r2, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	4313      	orrs	r3, r2
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001012:	8384      	strh	r4, [r0, #28]
  TIMx->CCER = tmpccer;
 8001014:	8403      	strh	r3, [r0, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001016:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001018:	210c      	movs	r1, #12
 800101a:	8b82      	ldrh	r2, [r0, #28]
 800101c:	438a      	bics	r2, r1
 800101e:	8382      	strh	r2, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8001020:	8b82      	ldrh	r2, [r0, #28]
 8001022:	4313      	orrs	r3, r2
 8001024:	8383      	strh	r3, [r0, #28]
 8001026:	e793      	b.n	8000f50 <TIM_ICInit+0x5c>
 8001028:	ffffefff 	.word	0xffffefff
 800102c:	00000cff 	.word	0x00000cff
 8001030:	00005fff 	.word	0x00005fff
 8001034:	fffff3ff 	.word	0xfffff3ff
 8001038:	fffffeff 	.word	0xfffffeff
 800103c:	fffff5ff 	.word	0xfffff5ff

08001040 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001040:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001042:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8001044:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001046:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001048:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800104a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800104c:	8103      	strh	r3, [r0, #8]
}
 800104e:	4770      	bx	lr

08001050 <TIM_PWMIConfig>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	4657      	mov	r7, sl
 8001054:	464e      	mov	r6, r9
 8001056:	4645      	mov	r5, r8
 8001058:	b4e0      	push	{r5, r6, r7}
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800105a:	884d      	ldrh	r5, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800105c:	888a      	ldrh	r2, [r1, #4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800105e:	426e      	negs	r6, r5
 8001060:	416e      	adcs	r6, r5
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001062:	1e53      	subs	r3, r2, #1
 8001064:	425f      	negs	r7, r3
 8001066:	417b      	adcs	r3, r7
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001068:	880f      	ldrh	r7, [r1, #0]
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800106a:	3301      	adds	r3, #1
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800106c:	b082      	sub	sp, #8
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800106e:	0074      	lsls	r4, r6, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8001070:	4699      	mov	r9, r3
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8001072:	2f00      	cmp	r7, #0
 8001074:	d050      	beq.n	8001118 <TIM_PWMIConfig+0xc8>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001076:	2310      	movs	r3, #16
 8001078:	8c07      	ldrh	r7, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800107a:	890e      	ldrh	r6, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800107c:	439f      	bics	r7, r3
 800107e:	8407      	strh	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001080:	8b03      	ldrh	r3, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001082:	0212      	lsls	r2, r2, #8
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
 8001084:	4698      	mov	r8, r3
  tmpccer = TIMx->CCER;
 8001086:	8c03      	ldrh	r3, [r0, #32]
 8001088:	469a      	mov	sl, r3
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <TIM_PWMIConfig+0x150>)
 800108c:	469c      	mov	ip, r3
 800108e:	4643      	mov	r3, r8
 8001090:	4667      	mov	r7, ip
 8001092:	403b      	ands	r3, r7
 8001094:	469c      	mov	ip, r3
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001096:	0333      	lsls	r3, r6, #12
 8001098:	4698      	mov	r8, r3
 800109a:	4663      	mov	r3, ip
 800109c:	4647      	mov	r7, r8
 800109e:	433b      	orrs	r3, r7
 80010a0:	466f      	mov	r7, sp
 80010a2:	80fb      	strh	r3, [r7, #6]
 80010a4:	88fb      	ldrh	r3, [r7, #6]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80010a6:	4657      	mov	r7, sl
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80010a8:	431a      	orrs	r2, r3
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80010aa:	012b      	lsls	r3, r5, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80010ac:	25a0      	movs	r5, #160	; 0xa0
 80010ae:	43af      	bics	r7, r5
 80010b0:	1c3d      	adds	r5, r7, #0
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80010b2:	2710      	movs	r7, #16
 80010b4:	431d      	orrs	r5, r3
 80010b6:	b2ad      	uxth	r5, r5
 80010b8:	433d      	orrs	r5, r7
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80010ba:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80010bc:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010be:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80010c0:	8b05      	ldrh	r5, [r0, #24]
 80010c2:	4a38      	ldr	r2, [pc, #224]	; (80011a4 <TIM_PWMIConfig+0x154>)
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80010c4:	88c9      	ldrh	r1, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80010c6:	402a      	ands	r2, r5
 80010c8:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80010ca:	8b05      	ldrh	r5, [r0, #24]
 80010cc:	020a      	lsls	r2, r1, #8
 80010ce:	432a      	orrs	r2, r5
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010d0:	2501      	movs	r5, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010d2:	464b      	mov	r3, r9
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80010d4:	b292      	uxth	r2, r2
 80010d6:	8302      	strh	r2, [r0, #24]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010d8:	8c02      	ldrh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80010da:	37e3      	adds	r7, #227	; 0xe3
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80010dc:	43aa      	bics	r2, r5
 80010de:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010e0:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010e2:	0136      	lsls	r6, r6, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80010e4:	43ba      	bics	r2, r7
 80010e6:	4332      	orrs	r2, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010e8:	4313      	orrs	r3, r2
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010ea:	220a      	movs	r2, #10
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80010ec:	8c05      	ldrh	r5, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80010ee:	b29b      	uxth	r3, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010f0:	4395      	bics	r5, r2
 80010f2:	1c2a      	adds	r2, r5, #0
 80010f4:	2501      	movs	r5, #1
 80010f6:	432a      	orrs	r2, r5
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80010f8:	4314      	orrs	r4, r2
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80010fa:	220c      	movs	r2, #12
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010fc:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010fe:	8404      	strh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001100:	8b03      	ldrh	r3, [r0, #24]
 8001102:	4393      	bics	r3, r2
 8001104:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001106:	8b03      	ldrh	r3, [r0, #24]
 8001108:	4319      	orrs	r1, r3
 800110a:	8301      	strh	r1, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800110c:	b002      	add	sp, #8
 800110e:	bc1c      	pop	{r2, r3, r4}
 8001110:	4690      	mov	r8, r2
 8001112:	4699      	mov	r9, r3
 8001114:	46a2      	mov	sl, r4
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001118:	2301      	movs	r3, #1
 800111a:	8c07      	ldrh	r7, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800111c:	890c      	ldrh	r4, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800111e:	439f      	bics	r7, r3
 8001120:	8407      	strh	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001122:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
 8001124:	8c03      	ldrh	r3, [r0, #32]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001126:	0176      	lsls	r6, r6, #5
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001128:	469c      	mov	ip, r3
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800112a:	23f3      	movs	r3, #243	; 0xf3
 800112c:	439f      	bics	r7, r3
 800112e:	46b8      	mov	r8, r7
 8001130:	4643      	mov	r3, r8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001132:	0127      	lsls	r7, r4, #4
 8001134:	431f      	orrs	r7, r3
 8001136:	b2bf      	uxth	r7, r7
 8001138:	433a      	orrs	r2, r7
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800113a:	4663      	mov	r3, ip
 800113c:	270a      	movs	r7, #10
 800113e:	43bb      	bics	r3, r7
 8001140:	2701      	movs	r7, #1
 8001142:	433d      	orrs	r5, r7
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001144:	431d      	orrs	r5, r3
 8001146:	b2ad      	uxth	r5, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001148:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800114a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800114c:	250c      	movs	r5, #12
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 800114e:	464b      	mov	r3, r9
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001150:	88ca      	ldrh	r2, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001152:	8b01      	ldrh	r1, [r0, #24]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001154:	0324      	lsls	r4, r4, #12
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001156:	43a9      	bics	r1, r5
 8001158:	8301      	strh	r1, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800115a:	8b01      	ldrh	r1, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800115c:	3504      	adds	r5, #4
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800115e:	4311      	orrs	r1, r2
 8001160:	8301      	strh	r1, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001162:	8c01      	ldrh	r1, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001164:	021b      	lsls	r3, r3, #8
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001166:	43a9      	bics	r1, r5
 8001168:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800116a:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800116c:	4d0c      	ldr	r5, [pc, #48]	; (80011a0 <TIM_PWMIConfig+0x150>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800116e:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001170:	403d      	ands	r5, r7
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001172:	432c      	orrs	r4, r5
 8001174:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001176:	431c      	orrs	r4, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	4399      	bics	r1, r3
 800117c:	1c0b      	adds	r3, r1, #0
 800117e:	2110      	movs	r1, #16
 8001180:	430b      	orrs	r3, r1
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001182:	431e      	orrs	r6, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001184:	b2a4      	uxth	r4, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001186:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001188:	8406      	strh	r6, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800118a:	8b01      	ldrh	r1, [r0, #24]
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <TIM_PWMIConfig+0x154>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800118e:	0212      	lsls	r2, r2, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001190:	400b      	ands	r3, r1
 8001192:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001194:	8b03      	ldrh	r3, [r0, #24]
 8001196:	431a      	orrs	r2, r3
 8001198:	b292      	uxth	r2, r2
 800119a:	8302      	strh	r2, [r0, #24]
 800119c:	e7b6      	b.n	800110c <TIM_PWMIConfig+0xbc>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	00000cff 	.word	0x00000cff
 80011a4:	fffff3ff 	.word	0xfffff3ff

080011a8 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80011a8:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80011aa:	4770      	bx	lr

080011ac <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80011ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80011ae:	4770      	bx	lr

080011b0 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80011b0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80011b2:	4770      	bx	lr

080011b4 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80011b4:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80011b6:	4770      	bx	lr

080011b8 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80011b8:	220c      	movs	r2, #12
 80011ba:	8b03      	ldrh	r3, [r0, #24]
 80011bc:	4393      	bics	r3, r2
 80011be:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80011c0:	8b03      	ldrh	r3, [r0, #24]
 80011c2:	4319      	orrs	r1, r3
 80011c4:	8301      	strh	r1, [r0, #24]
}
 80011c6:	4770      	bx	lr

080011c8 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80011c8:	8b02      	ldrh	r2, [r0, #24]
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <TIM_SetIC2Prescaler+0x14>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80011cc:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80011ce:	4013      	ands	r3, r2
 80011d0:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80011d2:	8b03      	ldrh	r3, [r0, #24]
 80011d4:	4319      	orrs	r1, r3
 80011d6:	b289      	uxth	r1, r1
 80011d8:	8301      	strh	r1, [r0, #24]
}
 80011da:	4770      	bx	lr
 80011dc:	fffff3ff 	.word	0xfffff3ff

080011e0 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80011e0:	220c      	movs	r2, #12
 80011e2:	8b83      	ldrh	r3, [r0, #28]
 80011e4:	4393      	bics	r3, r2
 80011e6:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80011e8:	8b83      	ldrh	r3, [r0, #28]
 80011ea:	4319      	orrs	r1, r3
 80011ec:	8381      	strh	r1, [r0, #28]
}
 80011ee:	4770      	bx	lr

080011f0 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80011f0:	8b82      	ldrh	r2, [r0, #28]
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <TIM_SetIC4Prescaler+0x14>)
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80011f4:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80011f6:	4013      	ands	r3, r2
 80011f8:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80011fa:	8b83      	ldrh	r3, [r0, #28]
 80011fc:	4319      	orrs	r1, r3
 80011fe:	b289      	uxth	r1, r1
 8001200:	8381      	strh	r1, [r0, #28]
}
 8001202:	4770      	bx	lr
 8001204:	fffff3ff 	.word	0xfffff3ff

08001208 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001208:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800120a:	2a00      	cmp	r2, #0
 800120c:	d102      	bne.n	8001214 <TIM_ITConfig+0xc>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800120e:	438b      	bics	r3, r1
 8001210:	8183      	strh	r3, [r0, #12]
  }
}
 8001212:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001214:	4319      	orrs	r1, r3
 8001216:	8181      	strh	r1, [r0, #12]
 8001218:	e7fb      	b.n	8001212 <TIM_ITConfig+0xa>
 800121a:	46c0      	nop			; (mov r8, r8)

0800121c <TIM_GenerateEvent>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800121c:	8281      	strh	r1, [r0, #20]
}
 800121e:	4770      	bx	lr

08001220 <TIM_GetFlagStatus>:
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001220:	8a00      	ldrh	r0, [r0, #16]
 8001222:	4008      	ands	r0, r1
 8001224:	1e41      	subs	r1, r0, #1
 8001226:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001228:	b2c0      	uxtb	r0, r0
}
 800122a:	4770      	bx	lr

0800122c <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800122c:	43c9      	mvns	r1, r1
 800122e:	b289      	uxth	r1, r1
 8001230:	8201      	strh	r1, [r0, #16]
}
 8001232:	4770      	bx	lr

08001234 <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001234:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8001236:	8980      	ldrh	r0, [r0, #12]
 8001238:	b283      	uxth	r3, r0
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 800123a:	2000      	movs	r0, #0
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800123c:	420a      	tst	r2, r1
 800123e:	d003      	beq.n	8001248 <TIM_GetITStatus+0x14>
 8001240:	4019      	ands	r1, r3
 8001242:	1e48      	subs	r0, r1, #1
 8001244:	4181      	sbcs	r1, r0
  {
    bitstatus = SET;
 8001246:	b2c8      	uxtb	r0, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001248:	4770      	bx	lr
 800124a:	46c0      	nop			; (mov r8, r8)

0800124c <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800124c:	43c9      	mvns	r1, r1
 800124e:	b289      	uxth	r1, r1
 8001250:	8201      	strh	r1, [r0, #16]
}
 8001252:	4770      	bx	lr

08001254 <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8001254:	2348      	movs	r3, #72	; 0x48
 8001256:	430a      	orrs	r2, r1
 8001258:	52c2      	strh	r2, [r0, r3]
}
 800125a:	4770      	bx	lr

0800125c <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800125c:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST10_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800125e:	2a00      	cmp	r2, #0
 8001260:	d102      	bne.n	8001268 <TIM_DMACmd+0xc>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001262:	438b      	bics	r3, r1
 8001264:	8183      	strh	r3, [r0, #12]
  }
}
 8001266:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001268:	4319      	orrs	r1, r3
 800126a:	8181      	strh	r1, [r0, #12]
 800126c:	e7fb      	b.n	8001266 <TIM_DMACmd+0xa>
 800126e:	46c0      	nop			; (mov r8, r8)

08001270 <TIM_SelectCCDMA>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001270:	2900      	cmp	r1, #0
 8001272:	d104      	bne.n	800127e <TIM_SelectCCDMA+0xe>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8001274:	2208      	movs	r2, #8
 8001276:	8883      	ldrh	r3, [r0, #4]
 8001278:	4393      	bics	r3, r2
 800127a:	8083      	strh	r3, [r0, #4]
  }
}
 800127c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800127e:	2308      	movs	r3, #8
 8001280:	8882      	ldrh	r2, [r0, #4]
 8001282:	4313      	orrs	r3, r2
 8001284:	8083      	strh	r3, [r0, #4]
 8001286:	e7f9      	b.n	800127c <TIM_SelectCCDMA+0xc>

08001288 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001288:	2207      	movs	r2, #7
 800128a:	8903      	ldrh	r3, [r0, #8]
 800128c:	4393      	bics	r3, r2
 800128e:	8103      	strh	r3, [r0, #8]
}
 8001290:	4770      	bx	lr
 8001292:	46c0      	nop			; (mov r8, r8)

08001294 <TIM_ITRxExternalClockConfig>:
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001294:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001296:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001298:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800129a:	4319      	orrs	r1, r3
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800129c:	2307      	movs	r3, #7
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800129e:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012a0:	8902      	ldrh	r2, [r0, #8]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	8103      	strh	r3, [r0, #8]
}
 80012a6:	4770      	bx	lr

080012a8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80012aa:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80012ac:	2960      	cmp	r1, #96	; 0x60
 80012ae:	d01d      	beq.n	80012ec <TIM_TIxExternalClockConfig+0x44>
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80012b0:	2501      	movs	r5, #1
 80012b2:	43ac      	bics	r4, r5
 80012b4:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b6:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 80012b8:	35f2      	adds	r5, #242	; 0xf2
 80012ba:	43ac      	bics	r4, r5
 80012bc:	2501      	movs	r5, #1
 80012be:	432c      	orrs	r4, r5
 80012c0:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4323      	orrs	r3, r4
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012c6:	240a      	movs	r4, #10
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80012c8:	8c06      	ldrh	r6, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80012ca:	b29b      	uxth	r3, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012cc:	43a6      	bics	r6, r4
 80012ce:	4335      	orrs	r5, r6
 80012d0:	b2ad      	uxth	r5, r5
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80012d2:	432a      	orrs	r2, r5
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012d4:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012d6:	8402      	strh	r2, [r0, #32]
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80012d8:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80012da:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80012dc:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80012de:	4319      	orrs	r1, r3
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012e0:	2307      	movs	r3, #7
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012e2:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80012e4:	8902      	ldrh	r2, [r0, #8]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	8103      	strh	r3, [r0, #8]
}
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80012ec:	2510      	movs	r5, #16
 80012ee:	43ac      	bics	r4, r5
 80012f0:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012f2:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80012f4:	4c09      	ldr	r4, [pc, #36]	; (800131c <TIM_TIxExternalClockConfig+0x74>)
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80012f6:	031b      	lsls	r3, r3, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80012f8:	4034      	ands	r4, r6
 80012fa:	2680      	movs	r6, #128	; 0x80
 80012fc:	0076      	lsls	r6, r6, #1
 80012fe:	4334      	orrs	r4, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001300:	4323      	orrs	r3, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001302:	24a0      	movs	r4, #160	; 0xa0
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001304:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001306:	0112      	lsls	r2, r2, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001308:	43a5      	bics	r5, r4
 800130a:	1c2c      	adds	r4, r5, #0
 800130c:	2510      	movs	r5, #16
 800130e:	432c      	orrs	r4, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001310:	4322      	orrs	r2, r4
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001312:	b29b      	uxth	r3, r3
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001314:	b292      	uxth	r2, r2
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001316:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001318:	8402      	strh	r2, [r0, #32]
 800131a:	e7dd      	b.n	80012d8 <TIM_TIxExternalClockConfig+0x30>
 800131c:	00000cff 	.word	0x00000cff

08001320 <TIM_ETRClockMode1Config>:
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	431a      	orrs	r2, r3
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001324:	23ff      	movs	r3, #255	; 0xff
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8001326:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001328:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800132a:	401c      	ands	r4, r3
 800132c:	4322      	orrs	r2, r4
 800132e:	b292      	uxth	r2, r2
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001330:	4311      	orrs	r1, r2
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001332:	2277      	movs	r2, #119	; 0x77
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001334:	8101      	strh	r1, [r0, #8]
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001336:	8903      	ldrh	r3, [r0, #8]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001338:	4393      	bics	r3, r2
  tmpsmcr |= TIM_TS_ETRF;
 800133a:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800133c:	8103      	strh	r3, [r0, #8]
}
 800133e:	bd10      	pop	{r4, pc}

08001340 <TIM_ETRClockMode2Config>:
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	431a      	orrs	r2, r3
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001344:	23ff      	movs	r3, #255	; 0xff
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8001346:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001348:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800134a:	401c      	ands	r4, r3
 800134c:	4322      	orrs	r2, r4
 800134e:	b292      	uxth	r2, r2
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001350:	4311      	orrs	r1, r2
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001352:	2280      	movs	r2, #128	; 0x80
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001354:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8001356:	8903      	ldrh	r3, [r0, #8]
 8001358:	01d2      	lsls	r2, r2, #7
 800135a:	4313      	orrs	r3, r2
 800135c:	8103      	strh	r3, [r0, #8]
}
 800135e:	bd10      	pop	{r4, pc}

08001360 <TIM_SelectInputTrigger>:
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001360:	2270      	movs	r2, #112	; 0x70
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001362:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001364:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001366:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001368:	8101      	strh	r1, [r0, #8]
}
 800136a:	4770      	bx	lr

0800136c <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 800136c:	2270      	movs	r2, #112	; 0x70
 800136e:	8883      	ldrh	r3, [r0, #4]
 8001370:	4393      	bics	r3, r2
 8001372:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8001374:	8883      	ldrh	r3, [r0, #4]
 8001376:	4319      	orrs	r1, r3
 8001378:	8081      	strh	r1, [r0, #4]
}
 800137a:	4770      	bx	lr

0800137c <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  
  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 800137c:	2207      	movs	r2, #7
 800137e:	8903      	ldrh	r3, [r0, #8]
 8001380:	4393      	bics	r3, r2
 8001382:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8001384:	8903      	ldrh	r3, [r0, #8]
 8001386:	4319      	orrs	r1, r3
 8001388:	8101      	strh	r1, [r0, #8]
}
 800138a:	4770      	bx	lr

0800138c <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	8903      	ldrh	r3, [r0, #8]
 8001390:	4393      	bics	r3, r2
 8001392:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001394:	8903      	ldrh	r3, [r0, #8]
 8001396:	4319      	orrs	r1, r3
 8001398:	8101      	strh	r1, [r0, #8]
}
 800139a:	4770      	bx	lr

0800139c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 800139c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800139e:	25ff      	movs	r5, #255	; 0xff
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 80013a0:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80013a2:	021b      	lsls	r3, r3, #8
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80013a4:	402c      	ands	r4, r5
 80013a6:	4321      	orrs	r1, r4
 80013a8:	430a      	orrs	r2, r1
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80013aa:	431a      	orrs	r2, r3
 80013ac:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013ae:	8102      	strh	r2, [r0, #8]
}
 80013b0:	bd30      	pop	{r4, r5, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)

080013b4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80013b6:	2407      	movs	r4, #7
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80013b8:	8906      	ldrh	r6, [r0, #8]
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80013ba:	8b07      	ldrh	r7, [r0, #24]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80013bc:	43a6      	bics	r6, r4
  tmpsmcr |= TIM_EncoderMode;
 80013be:	4331      	orrs	r1, r6
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80013c0:	2602      	movs	r6, #2
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80013c2:	4c07      	ldr	r4, [pc, #28]	; (80013e0 <TIM_EncoderInterfaceConfig+0x2c>)
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013c4:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80013c6:	403c      	ands	r4, r7
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80013c8:	36ff      	adds	r6, #255	; 0xff
 80013ca:	4334      	orrs	r4, r6
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80013cc:	3e57      	subs	r6, #87	; 0x57
 80013ce:	43b5      	bics	r5, r6
 80013d0:	432a      	orrs	r2, r5
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	431a      	orrs	r2, r3
 80013d6:	b292      	uxth	r2, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013d8:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80013da:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013dc:	8402      	strh	r2, [r0, #32]
}
 80013de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e0:	fffffcfc 	.word	0xfffffcfc

080013e4 <TIM_SelectHallSensor>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013e4:	2900      	cmp	r1, #0
 80013e6:	d104      	bne.n	80013f2 <TIM_SelectHallSensor+0xe>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	8883      	ldrh	r3, [r0, #4]
 80013ec:	4393      	bics	r3, r2
 80013ee:	8083      	strh	r3, [r0, #4]
  }
}
 80013f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	8882      	ldrh	r2, [r0, #4]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	8083      	strh	r3, [r0, #4]
 80013fa:	e7f9      	b.n	80013f0 <TIM_SelectHallSensor+0xc>

080013fc <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST11_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80013fc:	2350      	movs	r3, #80	; 0x50
 80013fe:	52c1      	strh	r1, [r0, r3]
}
 8001400:	4770      	bx	lr
 8001402:	46c0      	nop			; (mov r8, r8)

08001404 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8001404:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8001406:	7c8b      	ldrb	r3, [r1, #18]
 8001408:	7783      	strb	r3, [r0, #30]
}
 800140a:	4770      	bx	lr

0800140c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	1c04      	adds	r4, r0, #0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8001410:	2128      	movs	r1, #40	; 0x28
 8001412:	6965      	ldr	r5, [r4, #20]
 8001414:	2200      	movs	r2, #0
 8001416:	2300      	movs	r3, #0
 8001418:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 800141a:	2300      	movs	r3, #0
 800141c:	68e5      	ldr	r5, [r4, #12]
 800141e:	1c20      	adds	r0, r4, #0
 8001420:	2114      	movs	r1, #20
 8001422:	2200      	movs	r2, #0
 8001424:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8001426:	1c20      	adds	r0, r4, #0
 8001428:	214b      	movs	r1, #75	; 0x4b
 800142a:	2201      	movs	r2, #1
 800142c:	f000 ff4e 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	1c20      	adds	r0, r4, #0
 8001434:	791a      	ldrb	r2, [r3, #4]
 8001436:	2129      	movs	r1, #41	; 0x29
 8001438:	f000 ff48 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800143c:	1c20      	adds	r0, r4, #0
 800143e:	214b      	movs	r1, #75	; 0x4b
 8001440:	2200      	movs	r2, #0
 8001442:	f000 ff43 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	1c20      	adds	r0, r4, #0
 800144a:	791a      	ldrb	r2, [r3, #4]
 800144c:	2129      	movs	r1, #41	; 0x29
 800144e:	f000 ff3d 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8001452:	1c20      	adds	r0, r4, #0
 8001454:	214b      	movs	r1, #75	; 0x4b
 8001456:	2201      	movs	r2, #1
 8001458:	f000 ff38 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	1c20      	adds	r0, r4, #0
 8001460:	795a      	ldrb	r2, [r3, #5]
 8001462:	2129      	movs	r1, #41	; 0x29
 8001464:	f000 ff32 	bl	80022cc <u8x8_gpio_call>
}    
 8001468:	bd38      	pop	{r3, r4, r5, pc}
 800146a:	46c0      	nop			; (mov r8, r8)

0800146c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800146c:	b510      	push	{r4, lr}
 800146e:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001470:	466c      	mov	r4, sp
  tile.y_pos = y;
  tile.cnt = cnt;
 8001472:	7123      	strb	r3, [r4, #4]
  tile.tile_ptr = tile_ptr;
 8001474:	9b04      	ldr	r3, [sp, #16]
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
 8001476:	7161      	strb	r1, [r4, #5]
  tile.y_pos = y;
 8001478:	71a2      	strb	r2, [r4, #6]
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
 800147a:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800147c:	6884      	ldr	r4, [r0, #8]
 800147e:	210f      	movs	r1, #15
 8001480:	2201      	movs	r2, #1
 8001482:	466b      	mov	r3, sp
 8001484:	47a0      	blx	r4
}
 8001486:	b002      	add	sp, #8
 8001488:	bd10      	pop	{r4, pc}
 800148a:	46c0      	nop			; (mov r8, r8)

0800148c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800148c:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800148e:	2109      	movs	r1, #9
 8001490:	6884      	ldr	r4, [r0, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	2300      	movs	r3, #0
 8001496:	47a0      	blx	r4
}
 8001498:	bd10      	pop	{r4, pc}
 800149a:	46c0      	nop			; (mov r8, r8)

0800149c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800149c:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800149e:	210a      	movs	r1, #10
 80014a0:	6884      	ldr	r4, [r0, #8]
 80014a2:	2200      	movs	r2, #0
 80014a4:	2300      	movs	r3, #0
 80014a6:	47a0      	blx	r4
}
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)

080014ac <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	1c0a      	adds	r2, r1, #0
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80014b0:	6884      	ldr	r4, [r0, #8]
 80014b2:	210b      	movs	r1, #11
 80014b4:	2300      	movs	r3, #0
 80014b6:	47a0      	blx	r4
}
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)

080014bc <u8x8_SetFlipMode>:

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
 80014bc:	b510      	push	{r4, lr}
 80014be:	1c0a      	adds	r2, r1, #0
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
 80014c0:	6884      	ldr	r4, [r0, #8]
 80014c2:	210d      	movs	r1, #13
 80014c4:	2300      	movs	r3, #0
 80014c6:	47a0      	blx	r4
}
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)

080014cc <u8x8_SetContrast>:

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80014cc:	b510      	push	{r4, lr}
 80014ce:	1c0a      	adds	r2, r1, #0
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80014d0:	6884      	ldr	r4, [r0, #8]
 80014d2:	210e      	movs	r1, #14
 80014d4:	2300      	movs	r3, #0
 80014d6:	47a0      	blx	r4
}
 80014d8:	bd10      	pop	{r4, pc}
 80014da:	46c0      	nop			; (mov r8, r8)

080014dc <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80014dc:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80014de:	2110      	movs	r1, #16
 80014e0:	6884      	ldr	r4, [r0, #8]
 80014e2:	2200      	movs	r2, #0
 80014e4:	2300      	movs	r3, #0
 80014e6:	47a0      	blx	r4
}
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)

080014ec <u8x8_ClearDisplayWithTile>:

void u8x8_ClearDisplayWithTile(u8x8_t *u8x8, const uint8_t *buf)
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  uint8_t h;

  tile.x_pos = 0;
 80014f0:	2200      	movs	r2, #0
 80014f2:	466b      	mov	r3, sp
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
}

void u8x8_ClearDisplayWithTile(u8x8_t *u8x8, const uint8_t *buf)
{
 80014f4:	1c04      	adds	r4, r0, #0
  u8x8_tile_t tile;
  uint8_t h;

  tile.x_pos = 0;
 80014f6:	715a      	strb	r2, [r3, #5]
  tile.cnt = 1;
 80014f8:	4668      	mov	r0, sp
 80014fa:	2301      	movs	r3, #1
 80014fc:	7103      	strb	r3, [r0, #4]
  tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
  
  h = u8x8->display_info->tile_height;
 80014fe:	6823      	ldr	r3, [r4, #0]
  u8x8_tile_t tile;
  uint8_t h;

  tile.x_pos = 0;
  tile.cnt = 1;
  tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
 8001500:	9100      	str	r1, [sp, #0]
  
  h = u8x8->display_info->tile_height;
 8001502:	7c5d      	ldrb	r5, [r3, #17]
  tile.y_pos = 0;
 8001504:	7182      	strb	r2, [r0, #6]
 8001506:	e000      	b.n	800150a <u8x8_ClearDisplayWithTile+0x1e>
 8001508:	6823      	ldr	r3, [r4, #0]
  do
  {
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, u8x8->display_info->tile_width, (void *)&tile);
 800150a:	7c1a      	ldrb	r2, [r3, #16]
 800150c:	1c20      	adds	r0, r4, #0
 800150e:	466b      	mov	r3, sp
 8001510:	210f      	movs	r1, #15
 8001512:	68a6      	ldr	r6, [r4, #8]
 8001514:	47b0      	blx	r6
    tile.y_pos++;
 8001516:	466b      	mov	r3, sp
 8001518:	466a      	mov	r2, sp
 800151a:	799b      	ldrb	r3, [r3, #6]
 800151c:	3301      	adds	r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	7193      	strb	r3, [r2, #6]
  } while( tile.y_pos < h );
 8001522:	429d      	cmp	r5, r3
 8001524:	d8f0      	bhi.n	8001508 <u8x8_ClearDisplayWithTile+0x1c>
}
 8001526:	b002      	add	sp, #8
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	46c0      	nop			; (mov r8, r8)

0800152c <u8x8_ClearDisplay>:

void u8x8_ClearDisplay(u8x8_t *u8x8)
{
 800152c:	b500      	push	{lr}
 800152e:	b083      	sub	sp, #12
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8001530:	2300      	movs	r3, #0
 8001532:	466a      	mov	r2, sp
  u8x8_ClearDisplayWithTile(u8x8, buf);
 8001534:	4669      	mov	r1, sp
  } while( tile.y_pos < h );
}

void u8x8_ClearDisplay(u8x8_t *u8x8)
{
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8001536:	7013      	strb	r3, [r2, #0]
 8001538:	7053      	strb	r3, [r2, #1]
 800153a:	7093      	strb	r3, [r2, #2]
 800153c:	70d3      	strb	r3, [r2, #3]
 800153e:	7113      	strb	r3, [r2, #4]
 8001540:	7153      	strb	r3, [r2, #5]
 8001542:	7193      	strb	r3, [r2, #6]
 8001544:	71d3      	strb	r3, [r2, #7]
  u8x8_ClearDisplayWithTile(u8x8, buf);
 8001546:	f7ff ffd1 	bl	80014ec <u8x8_ClearDisplayWithTile>
}
 800154a:	b003      	add	sp, #12
 800154c:	bd00      	pop	{pc}
 800154e:	46c0      	nop			; (mov r8, r8)

08001550 <u8x8_FillDisplay>:

void u8x8_FillDisplay(u8x8_t *u8x8)
{
 8001550:	b510      	push	{r4, lr}
 8001552:	1c04      	adds	r4, r0, #0
 8001554:	b082      	sub	sp, #8
  uint8_t buf[8] = { 255, 255, 255, 255, 255, 255, 255, 255 };
 8001556:	2208      	movs	r2, #8
 8001558:	4668      	mov	r0, sp
 800155a:	4904      	ldr	r1, [pc, #16]	; (800156c <u8x8_FillDisplay+0x1c>)
 800155c:	f003 fd26 	bl	8004fac <memcpy>
  u8x8_ClearDisplayWithTile(u8x8, buf);
 8001560:	1c20      	adds	r0, r4, #0
 8001562:	4669      	mov	r1, sp
 8001564:	f7ff ffc2 	bl	80014ec <u8x8_ClearDisplayWithTile>
}
 8001568:	b002      	add	sp, #8
 800156a:	bd10      	pop	{r4, pc}
 800156c:	080050b4 	.word	0x080050b4

08001570 <u8x8_ClearLine>:

void u8x8_ClearLine(u8x8_t *u8x8, uint8_t line)
{
 8001570:	b510      	push	{r4, lr}
 8001572:	b084      	sub	sp, #16
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 8001574:	466b      	mov	r3, sp
 8001576:	2200      	movs	r2, #0
  u8x8_tile_t tile;
  if ( line < u8x8->display_info->tile_height )
 8001578:	6804      	ldr	r4, [r0, #0]
  u8x8_ClearDisplayWithTile(u8x8, buf);
}

void u8x8_ClearLine(u8x8_t *u8x8, uint8_t line)
{
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	705a      	strb	r2, [r3, #1]
 800157e:	709a      	strb	r2, [r3, #2]
 8001580:	70da      	strb	r2, [r3, #3]
 8001582:	711a      	strb	r2, [r3, #4]
 8001584:	715a      	strb	r2, [r3, #5]
 8001586:	719a      	strb	r2, [r3, #6]
 8001588:	71da      	strb	r2, [r3, #7]
  u8x8_tile_t tile;
  if ( line < u8x8->display_info->tile_height )
 800158a:	7c63      	ldrb	r3, [r4, #17]
 800158c:	428b      	cmp	r3, r1
 800158e:	d90a      	bls.n	80015a6 <u8x8_ClearLine+0x36>
  {
    tile.x_pos = 0;
 8001590:	ab02      	add	r3, sp, #8
 8001592:	715a      	strb	r2, [r3, #5]
    tile.y_pos = line;
    tile.cnt = 1;
 8001594:	3201      	adds	r2, #1
 8001596:	711a      	strb	r2, [r3, #4]
    tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
 8001598:	466a      	mov	r2, sp
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
  u8x8_tile_t tile;
  if ( line < u8x8->display_info->tile_height )
  {
    tile.x_pos = 0;
    tile.y_pos = line;
 800159a:	7199      	strb	r1, [r3, #6]
    tile.cnt = 1;
    tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
 800159c:	9202      	str	r2, [sp, #8]
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, u8x8->display_info->tile_width, (void *)&tile);
 800159e:	7c22      	ldrb	r2, [r4, #16]
 80015a0:	210f      	movs	r1, #15
 80015a2:	6884      	ldr	r4, [r0, #8]
 80015a4:	47a0      	blx	r4
  }  
 80015a6:	b004      	add	sp, #16
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)

080015ac <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464f      	mov	r7, r9
 80015b0:	4646      	mov	r6, r8
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 80015b2:	2338      	movs	r3, #56	; 0x38
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80015b4:	b4c0      	push	{r6, r7}
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 80015b6:	5cc3      	ldrb	r3, [r0, r3]
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80015b8:	b083      	sub	sp, #12
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 80015ba:	4698      	mov	r8, r3
  dest_row = u8g2->tile_curr_row;
 80015bc:	2339      	movs	r3, #57	; 0x39
 80015be:	5cc7      	ldrb	r7, [r0, r3]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80015c0:	6803      	ldr	r3, [r0, #0]
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80015c2:	1c06      	adds	r6, r0, #0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80015c4:	7c5a      	ldrb	r2, [r3, #17]
 80015c6:	2500      	movs	r5, #0
 80015c8:	4691      	mov	r9, r2
 80015ca:	e005      	b.n	80015d8 <u8g2_send_buffer+0x2c>
 80015cc:	3501      	adds	r5, #1
 80015ce:	197b      	adds	r3, r7, r5
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4599      	cmp	r9, r3
 80015d4:	d914      	bls.n	8001600 <u8g2_send_buffer+0x54>
 80015d6:	6833      	ldr	r3, [r6, #0]
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80015d8:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
 80015da:	b2a9      	uxth	r1, r5
 80015dc:	00d8      	lsls	r0, r3, #3
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
 80015de:	4341      	muls	r1, r0
  ptr += offset;
 80015e0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80015e2:	b2ec      	uxtb	r4, r5
 80015e4:	4684      	mov	ip, r0
 80015e6:	b289      	uxth	r1, r1
 80015e8:	4461      	add	r1, ip
 80015ea:	19e2      	adds	r2, r4, r7
 80015ec:	3401      	adds	r4, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80015ee:	9100      	str	r1, [sp, #0]
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	1c30      	adds	r0, r6, #0
 80015f4:	2100      	movs	r1, #0
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 80015f6:	b2e4      	uxtb	r4, r4
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80015f8:	f7ff ff38 	bl	800146c <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 80015fc:	45a0      	cmp	r8, r4
 80015fe:	d8e5      	bhi.n	80015cc <u8g2_send_buffer+0x20>
}
 8001600:	b003      	add	sp, #12
 8001602:	bc0c      	pop	{r2, r3}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)

0800160c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800160c:	b508      	push	{r3, lr}
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800160e:	6803      	ldr	r3, [r0, #0]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001610:	2100      	movs	r1, #0

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001612:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 8001614:	2338      	movs	r3, #56	; 0x38
 8001616:	5cc3      	ldrb	r3, [r0, r3]
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001618:	6b40      	ldr	r0, [r0, #52]	; 0x34
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
 800161a:	435a      	muls	r2, r3
  cnt *= 8;
 800161c:	00d2      	lsls	r2, r2, #3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800161e:	f003 fd03 	bl	8005028 <memset>
}
 8001622:	bd08      	pop	{r3, pc}

08001624 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001624:	b510      	push	{r4, lr}
 8001626:	1c04      	adds	r4, r0, #0
  u8g2_send_buffer(u8g2);
 8001628:	f7ff ffc0 	bl	80015ac <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800162c:	1c20      	adds	r0, r4, #0
 800162e:	f7ff ff55 	bl	80014dc <u8x8_RefreshDisplay>
}
 8001632:	bd10      	pop	{r4, pc}

08001634 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001634:	b508      	push	{r3, lr}
  u8g2->tile_curr_row = row;
 8001636:	2339      	movs	r3, #57	; 0x39
 8001638:	54c1      	strb	r1, [r0, r3]
  u8g2->cb->update(u8g2);
 800163a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4798      	blx	r3
}
 8001640:	bd08      	pop	{r3, pc}
 8001642:	46c0      	nop			; (mov r8, r8)

08001644 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
  if ( u8g2->is_auto_page_clear )
 8001644:	237c      	movs	r3, #124	; 0x7c
  u8g2->tile_curr_row = row;
  u8g2->cb->update(u8g2);
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001646:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8001648:	5cc3      	ldrb	r3, [r0, r3]
  u8g2->tile_curr_row = row;
  u8g2->cb->update(u8g2);
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800164a:	1c04      	adds	r4, r0, #0
  if ( u8g2->is_auto_page_clear )
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <u8g2_FirstPage+0x10>
  {
    u8g2_ClearBuffer(u8g2);
 8001650:	f7ff ffdc 	bl	800160c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001654:	1c20      	adds	r0, r4, #0
 8001656:	2100      	movs	r1, #0
 8001658:	f7ff ffec 	bl	8001634 <u8g2_SetBufferCurrTileRow>
}
 800165c:	bd10      	pop	{r4, pc}
 800165e:	46c0      	nop			; (mov r8, r8)

08001660 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	1c04      	adds	r4, r0, #0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001664:	f7ff ffa2 	bl	80015ac <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001668:	2339      	movs	r3, #57	; 0x39
 800166a:	5ce5      	ldrb	r5, [r4, r3]
  row += u8g2->tile_buf_height;
 800166c:	3b01      	subs	r3, #1
 800166e:	5ce3      	ldrb	r3, [r4, r3]
 8001670:	18ed      	adds	r5, r5, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001672:	6823      	ldr	r3, [r4, #0]
uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
  uint8_t row;
  u8g2_send_buffer(u8g2);
  row = u8g2->tile_curr_row;
  row += u8g2->tile_buf_height;
 8001674:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001676:	7c5b      	ldrb	r3, [r3, #17]
 8001678:	42ab      	cmp	r3, r5
 800167a:	d90d      	bls.n	8001698 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 800167c:	237c      	movs	r3, #124	; 0x7c
 800167e:	5ce3      	ldrb	r3, [r4, r3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <u8g2_NextPage+0x30>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001684:	1c20      	adds	r0, r4, #0
 8001686:	1c29      	adds	r1, r5, #0
 8001688:	f7ff ffd4 	bl	8001634 <u8g2_SetBufferCurrTileRow>
  return 1;
 800168c:	2001      	movs	r0, #1
}
 800168e:	bd38      	pop	{r3, r4, r5, pc}
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
 8001690:	1c20      	adds	r0, r4, #0
 8001692:	f7ff ffbb 	bl	800160c <u8g2_ClearBuffer>
 8001696:	e7f5      	b.n	8001684 <u8g2_NextPage+0x24>
  u8g2_send_buffer(u8g2);
  row = u8g2->tile_curr_row;
  row += u8g2->tile_buf_height;
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001698:	1c20      	adds	r0, r4, #0
 800169a:	f7ff ff1f 	bl	80014dc <u8x8_RefreshDisplay>
    return 0;
 800169e:	2000      	movs	r0, #0
 80016a0:	e7f5      	b.n	800168e <u8g2_NextPage+0x2e>
 80016a2:	46c0      	nop			; (mov r8, r8)

080016a4 <u8g2_update_dimension_common>:

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80016a4:	2338      	movs	r3, #56	; 0x38
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80016a6:	b570      	push	{r4, r5, r6, lr}
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80016a8:	5cc5      	ldrb	r5, [r0, r3]
  t *= 8;
  u8g2->pixel_buf_height = t;
 80016aa:	3303      	adds	r3, #3
static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
  t *= 8;
 80016ac:	00e9      	lsls	r1, r5, #3
 80016ae:	b2c9      	uxtb	r1, r1
  u8g2->pixel_buf_height = t;
 80016b0:	54c1      	strb	r1, [r0, r3]
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80016b2:	6804      	ldr	r4, [r0, #0]
 80016b4:	7c22      	ldrb	r2, [r4, #16]
 80016b6:	1c13      	adds	r3, r2, #0
 80016b8:	2a1f      	cmp	r2, #31
 80016ba:	d900      	bls.n	80016be <u8g2_update_dimension_common+0x1a>
 80016bc:	231f      	movs	r3, #31
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
 80016be:	223a      	movs	r2, #58	; 0x3a
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80016c0:	00db      	lsls	r3, r3, #3
  u8g2->pixel_buf_width = t;
 80016c2:	5483      	strb	r3, [r0, r2]
  
  t = u8g2->tile_curr_row;
 80016c4:	2339      	movs	r3, #57	; 0x39
 80016c6:	5cc6      	ldrb	r6, [r0, r3]
  t *= 8;
 80016c8:	00f2      	lsls	r2, r6, #3
 80016ca:	b2d3      	uxtb	r3, r2
  u8g2->pixel_curr_row = t;
 80016cc:	223c      	movs	r2, #60	; 0x3c
 80016ce:	5483      	strb	r3, [r0, r2]
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80016d0:	7c62      	ldrb	r2, [r4, #17]
 80016d2:	19ad      	adds	r5, r5, r6
 80016d4:	4295      	cmp	r5, r2
 80016d6:	dd02      	ble.n	80016de <u8g2_update_dimension_common+0x3a>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 80016d8:	1b91      	subs	r1, r2, r6
 80016da:	00c9      	lsls	r1, r1, #3
 80016dc:	b2c9      	uxtb	r1, r1
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80016de:	223d      	movs	r2, #61	; 0x3d
 80016e0:	5483      	strb	r3, [r0, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 80016e2:	18cb      	adds	r3, r1, r3
 80016e4:	3201      	adds	r2, #1
 80016e6:	5483      	strb	r3, [r0, r2]
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 80016e8:	233f      	movs	r3, #63	; 0x3f
 80016ea:	32b2      	adds	r2, #178	; 0xb2
 80016ec:	54c2      	strb	r2, [r0, r3]
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 80016ee:	8aa2      	ldrh	r2, [r4, #20]
 80016f0:	2af0      	cmp	r2, #240	; 0xf0
 80016f2:	d800      	bhi.n	80016f6 <u8g2_update_dimension_common+0x52>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80016f4:	54c2      	strb	r2, [r0, r3]
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80016f6:	2340      	movs	r3, #64	; 0x40
 80016f8:	8ae2      	ldrh	r2, [r4, #22]
 80016fa:	54c2      	strb	r2, [r0, r3]
#endif

}
 80016fc:	bd70      	pop	{r4, r5, r6, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)

08001700 <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8001700:	b510      	push	{r4, lr}
 8001702:	1c04      	adds	r4, r0, #0
  u8g2_update_dimension_common(u8g2);
 8001704:	f7ff ffce 	bl	80016a4 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 8001708:	2200      	movs	r2, #0
 800170a:	2341      	movs	r3, #65	; 0x41
 800170c:	54e2      	strb	r2, [r4, r3]
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 800170e:	3b07      	subs	r3, #7
 8001710:	5ce2      	ldrb	r2, [r4, r3]
 8001712:	3308      	adds	r3, #8
 8001714:	54e2      	strb	r2, [r4, r3]
  
  u8g2->user_y0 = u8g2->buf_y0;
 8001716:	3b05      	subs	r3, #5
 8001718:	5ce2      	ldrb	r2, [r4, r3]
 800171a:	3306      	adds	r3, #6
 800171c:	54e2      	strb	r2, [r4, r3]
  u8g2->user_y1 = u8g2->buf_y1;
 800171e:	3b05      	subs	r3, #5
 8001720:	5ce2      	ldrb	r2, [r4, r3]
 8001722:	3306      	adds	r3, #6
 8001724:	54e2      	strb	r2, [r4, r3]
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8001726:	bd10      	pop	{r4, pc}

08001728 <u8g2_update_dimension_r1>:

void u8g2_update_dimension_r1(u8g2_t *u8g2)
{
 8001728:	b510      	push	{r4, lr}
 800172a:	1c04      	adds	r4, r0, #0
  u8g2_update_dimension_common(u8g2);
 800172c:	f7ff ffba 	bl	80016a4 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	6822      	ldr	r2, [r4, #0]
 8001734:	7d13      	ldrb	r3, [r2, #20]
 8001736:	5463      	strb	r3, [r4, r1]
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8001738:	8ad1      	ldrh	r1, [r2, #22]
 800173a:	223f      	movs	r2, #63	; 0x3f
 800173c:	54a1      	strb	r1, [r4, r2]
  
  u8g2->user_x0 = u8g2->buf_y0;
 800173e:	3a02      	subs	r2, #2
 8001740:	5ca1      	ldrb	r1, [r4, r2]
 8001742:	3204      	adds	r2, #4
 8001744:	54a1      	strb	r1, [r4, r2]
  u8g2->user_x1 = u8g2->buf_y1;
 8001746:	3a03      	subs	r2, #3
 8001748:	5ca1      	ldrb	r1, [r4, r2]
 800174a:	3204      	adds	r2, #4
 800174c:	54a1      	strb	r1, [r4, r2]
  
  u8g2->user_y0 = 0;
 800174e:	2100      	movs	r1, #0
 8001750:	3201      	adds	r2, #1
 8001752:	54a1      	strb	r1, [r4, r2]
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (which is the real pixel width) */
 8001754:	3201      	adds	r2, #1
 8001756:	54a3      	strb	r3, [r4, r2]
  
  //printf("x0=%d x1=%d y0=%d y1=%d\n", 
   //   u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8001758:	bd10      	pop	{r4, pc}
 800175a:	46c0      	nop			; (mov r8, r8)

0800175c <u8g2_update_dimension_r2>:

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	1c04      	adds	r4, r0, #0
  u8g2_update_dimension_common(u8g2);
 8001760:	f7ff ffa0 	bl	80016a4 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	2241      	movs	r2, #65	; 0x41
 8001768:	54a3      	strb	r3, [r4, r2]
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800176a:	3a02      	subs	r2, #2
 800176c:	5ca1      	ldrb	r1, [r4, r2]
 800176e:	3203      	adds	r2, #3
 8001770:	54a1      	strb	r1, [r4, r2]
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001772:	2143      	movs	r1, #67	; 0x43
  if ( u8g2->height >= u8g2->buf_y1 )
 8001774:	3a04      	subs	r2, #4
  u8g2->user_x0 = 0;
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8001776:	5463      	strb	r3, [r4, r1]
  if ( u8g2->height >= u8g2->buf_y1 )
 8001778:	3340      	adds	r3, #64	; 0x40
 800177a:	5ce3      	ldrb	r3, [r4, r3]
 800177c:	5ca2      	ldrb	r2, [r4, r2]
 800177e:	4293      	cmp	r3, r2
 8001780:	d301      	bcc.n	8001786 <u8g2_update_dimension_r2+0x2a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8001782:	1a9a      	subs	r2, r3, r2
 8001784:	5462      	strb	r2, [r4, r1]
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8001786:	223d      	movs	r2, #61	; 0x3d
 8001788:	5ca2      	ldrb	r2, [r4, r2]
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	2244      	movs	r2, #68	; 0x44
 800178e:	54a3      	strb	r3, [r4, r2]

//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8001790:	bd10      	pop	{r4, pc}
 8001792:	46c0      	nop			; (mov r8, r8)

08001794 <u8g2_update_dimension_r3>:

void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
 8001794:	b510      	push	{r4, lr}
 8001796:	1c04      	adds	r4, r0, #0
  u8g2_update_dimension_common(u8g2);
 8001798:	f7ff ff84 	bl	80016a4 <u8g2_update_dimension_common>
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	6823      	ldr	r3, [r4, #0]
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;

  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80017a0:	2041      	movs	r0, #65	; 0x41

void u8g2_update_dimension_r3(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);
  
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80017a2:	7d19      	ldrb	r1, [r3, #20]
 80017a4:	54a1      	strb	r1, [r4, r2]
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 80017a6:	7d9b      	ldrb	r3, [r3, #22]
 80017a8:	3a01      	subs	r2, #1
 80017aa:	54a3      	strb	r3, [r4, r2]

  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->width */
  u8g2->user_x0 = 0;
 80017ac:	2200      	movs	r2, #0
 80017ae:	5422      	strb	r2, [r4, r0]
  if ( u8g2->width >= u8g2->buf_y1 )
 80017b0:	323e      	adds	r2, #62	; 0x3e
 80017b2:	5ca2      	ldrb	r2, [r4, r2]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d301      	bcc.n	80017bc <u8g2_update_dimension_r3+0x28>
    u8g2->user_x0 = u8g2->width - u8g2->buf_y1;
 80017b8:	1a9a      	subs	r2, r3, r2
 80017ba:	5422      	strb	r2, [r4, r0]
  u8g2->user_x1 = u8g2->width - u8g2->buf_y0;
 80017bc:	223d      	movs	r2, #61	; 0x3d
 80017be:	5ca2      	ldrb	r2, [r4, r2]
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	2242      	movs	r2, #66	; 0x42
 80017c4:	54a3      	strb	r3, [r4, r2]
  
  u8g2->user_y0 = 0;
 80017c6:	2200      	movs	r2, #0
 80017c8:	2343      	movs	r3, #67	; 0x43
 80017ca:	54e2      	strb	r2, [r4, r3]
  u8g2->user_y1 = u8g2->height;	/* pixel_buf_width replaced with height (pixel_width) */
 80017cc:	3301      	adds	r3, #1
 80017ce:	54e1      	strb	r1, [r4, r3]

//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)

080017d4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80017d4:	b510      	push	{r4, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	ac04      	add	r4, sp, #16
 80017da:	7824      	ldrb	r4, [r4, #0]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 80017dc:	9400      	str	r4, [sp, #0]
 80017de:	f001 ff01 	bl	80035e4 <u8g2_draw_hv_line_4dir>
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)

080017e8 <u8g2_draw_l90_mirrorr_r0>:

void u8g2_draw_l90_mirrorr_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	b083      	sub	sp, #12
 80017ec:	ac06      	add	r4, sp, #24
 80017ee:	7825      	ldrb	r5, [r4, #0]
  u8g2_uint_t xx;
  xx = u8g2->width;
 80017f0:	243f      	movs	r4, #63	; 0x3f
 80017f2:	5d04      	ldrb	r4, [r0, r4]
  xx -= x;
 80017f4:	1a61      	subs	r1, r4, r1
 80017f6:	b2c9      	uxtb	r1, r1
  if ( (dir & 1) == 0 )
 80017f8:	07ec      	lsls	r4, r5, #31
 80017fa:	d506      	bpl.n	800180a <u8g2_draw_l90_mirrorr_r0+0x22>
  {
    xx -= len;
  }
  else
  {
    xx--;
 80017fc:	3901      	subs	r1, #1
 80017fe:	b2c9      	uxtb	r1, r1
  }
  u8g2_draw_hv_line_4dir(u8g2, xx, y, len, dir);
 8001800:	9500      	str	r5, [sp, #0]
 8001802:	f001 feef 	bl	80035e4 <u8g2_draw_hv_line_4dir>
}
 8001806:	b003      	add	sp, #12
 8001808:	bd30      	pop	{r4, r5, pc}
  u8g2_uint_t xx;
  xx = u8g2->width;
  xx -= x;
  if ( (dir & 1) == 0 )
  {
    xx -= len;
 800180a:	1ac9      	subs	r1, r1, r3
 800180c:	b2c9      	uxtb	r1, r1
 800180e:	e7f7      	b.n	8001800 <u8g2_draw_l90_mirrorr_r0+0x18>

08001810 <u8g2_draw_l90_r1>:
}



void u8g2_draw_l90_r1(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	1c0e      	adds	r6, r1, #0
 8001816:	a906      	add	r1, sp, #24
 8001818:	780d      	ldrb	r5, [r1, #0]
  u8g2_uint_t xx, yy;
  
  yy = x;
  
  xx = u8g2->height;
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	5c41      	ldrb	r1, [r0, r1]
  xx -= y;
  xx--;
  
  dir ++;
 800181e:	3501      	adds	r5, #1
 8001820:	3901      	subs	r1, #1
  
  yy = x;
  
  xx = u8g2->height;
  xx -= y;
  xx--;
 8001822:	1a89      	subs	r1, r1, r2
  
  dir ++;
  dir &= 3;
  u8g2_draw_hv_line_4dir(u8g2, xx, yy, len, dir);
 8001824:	2403      	movs	r4, #3
 8001826:	1c2a      	adds	r2, r5, #0
 8001828:	4022      	ands	r2, r4
 800182a:	9200      	str	r2, [sp, #0]
 800182c:	b2c9      	uxtb	r1, r1
 800182e:	1c32      	adds	r2, r6, #0
 8001830:	f001 fed8 	bl	80035e4 <u8g2_draw_hv_line_4dir>
}
 8001834:	b002      	add	sp, #8
 8001836:	bd70      	pop	{r4, r5, r6, pc}

08001838 <u8g2_draw_l90_r2>:

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	ac06      	add	r4, sp, #24
 800183e:	7826      	ldrb	r6, [r4, #0]

  yy = u8g2->height;
  yy -= y;
  yy--;
  
  xx = u8g2->width;
 8001840:	253f      	movs	r5, #63	; 0x3f

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  u8g2_uint_t xx, yy;

  yy = u8g2->height;
 8001842:	2440      	movs	r4, #64	; 0x40
 8001844:	5d45      	ldrb	r5, [r0, r5]
 8001846:	5d04      	ldrb	r4, [r0, r4]
 8001848:	3d01      	subs	r5, #1
 800184a:	3c01      	subs	r4, #1
  
  xx = u8g2->width;
  xx -= x;
  xx--;
  
  dir +=2;
 800184c:	3602      	adds	r6, #2
  yy -= y;
  yy--;
  
  xx = u8g2->width;
  xx -= x;
  xx--;
 800184e:	1a69      	subs	r1, r5, r1
{
  u8g2_uint_t xx, yy;

  yy = u8g2->height;
  yy -= y;
  yy--;
 8001850:	1aa2      	subs	r2, r4, r2
  xx -= x;
  xx--;
  
  dir +=2;
  dir &= 3;
  u8g2_draw_hv_line_4dir(u8g2, xx, yy, len, dir);
 8001852:	2503      	movs	r5, #3
 8001854:	1c34      	adds	r4, r6, #0
 8001856:	402c      	ands	r4, r5
 8001858:	b2c9      	uxtb	r1, r1
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	9400      	str	r4, [sp, #0]
 800185e:	f001 fec1 	bl	80035e4 <u8g2_draw_hv_line_4dir>
}
 8001862:	b002      	add	sp, #8
 8001864:	bd70      	pop	{r4, r5, r6, pc}
 8001866:	46c0      	nop			; (mov r8, r8)

08001868 <u8g2_draw_l90_r3>:

void u8g2_draw_l90_r3(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	1c17      	adds	r7, r2, #0
 800186e:	aa08      	add	r2, sp, #32
 8001870:	7816      	ldrb	r6, [r2, #0]
  u8g2_uint_t xx, yy;

  xx = y;
  
  yy = u8g2->width;
 8001872:	223f      	movs	r2, #63	; 0x3f
 8001874:	5c84      	ldrb	r4, [r0, r2]
  yy -= x;
  yy--;
  
  dir +=3;
 8001876:	3603      	adds	r6, #3
 8001878:	3c01      	subs	r4, #1

  xx = y;
  
  yy = u8g2->width;
  yy -= x;
  yy--;
 800187a:	1a64      	subs	r4, r4, r1
  
  dir +=3;
  dir &= 3;
  u8g2_draw_hv_line_4dir(u8g2, xx, yy, len, dir);
 800187c:	b2e2      	uxtb	r2, r4
 800187e:	2503      	movs	r5, #3
 8001880:	1c34      	adds	r4, r6, #0
 8001882:	402c      	ands	r4, r5
 8001884:	9400      	str	r4, [sp, #0]
 8001886:	1c39      	adds	r1, r7, #0
 8001888:	f001 feac 	bl	80035e4 <u8g2_draw_hv_line_4dir>
}
 800188c:	b003      	add	sp, #12
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001890 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	1c04      	adds	r4, r0, #0
  u8g2->font = NULL;
 8001894:	2000      	movs	r0, #0
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001896:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
  u8g2->tile_buf_height = tile_buf_height;
 8001898:	2338      	movs	r3, #56	; 0x38
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
  u8g2->font = NULL;
 800189a:	64a0      	str	r0, [r4, #72]	; 0x48
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
  
  u8g2->tile_buf_ptr = buf;
 800189c:	6361      	str	r1, [r4, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800189e:	54e2      	strb	r2, [r4, r3]
  u8g2->tile_curr_row = 0;
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
  u8g2->bitmap_transparency = 0;
  
  u8g2->draw_color = 1;
 80018a0:	227b      	movs	r2, #123	; 0x7b
  u8g2->ll_hvline = ll_hvline_cb;
  
  u8g2->tile_buf_ptr = buf;
  u8g2->tile_buf_height = tile_buf_height;
  
  u8g2->tile_curr_row = 0;
 80018a2:	3301      	adds	r3, #1
 80018a4:	54e0      	strb	r0, [r4, r3]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80018a6:	3322      	adds	r3, #34	; 0x22
 80018a8:	54e0      	strb	r0, [r4, r3]
  u8g2->bitmap_transparency = 0;
 80018aa:	331f      	adds	r3, #31
 80018ac:	54e0      	strb	r0, [r4, r3]
  
  u8g2->draw_color = 1;
 80018ae:	3b79      	subs	r3, #121	; 0x79
 80018b0:	54a3      	strb	r3, [r4, r2]
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80018b2:	9d04      	ldr	r5, [sp, #16]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
  u8g2->bitmap_transparency = 0;
  
  u8g2->draw_color = 1;
  u8g2->is_auto_page_clear = 1;
 80018b4:	3201      	adds	r2, #1
 80018b6:	54a3      	strb	r3, [r4, r2]
  
  u8g2->cb = u8g2_cb;
  u8g2->cb->update(u8g2);
 80018b8:	682b      	ldr	r3, [r5, #0]
  u8g2->bitmap_transparency = 0;
  
  u8g2->draw_color = 1;
  u8g2->is_auto_page_clear = 1;
  
  u8g2->cb = u8g2_cb;
 80018ba:	6325      	str	r5, [r4, #48]	; 0x30
  u8g2->cb->update(u8g2);
 80018bc:	1c20      	adds	r0, r4, #0
 80018be:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80018c0:	1c20      	adds	r0, r4, #0
 80018c2:	f002 fd43 	bl	800434c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
#endif
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 80018c8:	b508      	push	{r3, lr}
  u8g2->cb = u8g2_cb;
 80018ca:	6301      	str	r1, [r0, #48]	; 0x30
  u8g2->cb->update(u8g2);
 80018cc:	680b      	ldr	r3, [r1, #0]
 80018ce:	4798      	blx	r3
}
 80018d0:	bd08      	pop	{r3, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)

080018d4 <u8g2_Setup_null>:
/*============================================*/
/* setup for the null device */

/* setup for the null (empty) device */
void u8g2_Setup_null(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	1c16      	adds	r6, r2, #0
 80018d8:	1c04      	adds	r4, r0, #0
 80018da:	1c0d      	adds	r5, r1, #0
 80018dc:	b082      	sub	sp, #8
  static uint8_t buf[8];
  u8g2_SetupDisplay(u8g2, u8x8_d_null_cb, u8x8_cad_empty, byte_cb, gpio_and_delay_cb);
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4906      	ldr	r1, [pc, #24]	; (80018fc <u8g2_Setup_null+0x28>)
 80018e2:	1c33      	adds	r3, r6, #0
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <u8g2_Setup_null+0x2c>)
 80018e6:	f002 f8b5 	bl	8003a54 <u8x8_Setup>
  u8g2_SetupBuffer(u8g2, buf, 1, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80018ea:	9500      	str	r5, [sp, #0]
 80018ec:	1c20      	adds	r0, r4, #0
 80018ee:	4905      	ldr	r1, [pc, #20]	; (8001904 <u8g2_Setup_null+0x30>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <u8g2_Setup_null+0x34>)
 80018f4:	f7ff ffcc 	bl	8001890 <u8g2_SetupBuffer>
}
 80018f8:	b002      	add	sp, #8
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	08003a0d 	.word	0x08003a0d
 8001900:	080023e1 	.word	0x080023e1
 8001904:	20000014 	.word	0x20000014
 8001908:	08003a81 	.word	0x08003a81

0800190c <u8g2_Setup_ssd1306_128x64_noname_1>:
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	1c15      	adds	r5, r2, #0
 8001910:	b084      	sub	sp, #16
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	1c2b      	adds	r3, r5, #0
  buf = u8g2_m_16_8_1(&tile_buf_height);
 8001916:	250f      	movs	r5, #15
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001918:	1c0e      	adds	r6, r1, #0
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <u8g2_Setup_ssd1306_128x64_noname_1+0x34>)
 800191c:	4909      	ldr	r1, [pc, #36]	; (8001944 <u8g2_Setup_ssd1306_128x64_noname_1+0x38>)
  buf = u8g2_m_16_8_1(&tile_buf_height);
 800191e:	446d      	add	r5, sp
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001920:	1c04      	adds	r4, r0, #0
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001922:	f002 f897 	bl	8003a54 <u8x8_Setup>
  buf = u8g2_m_16_8_1(&tile_buf_height);
 8001926:	1c28      	adds	r0, r5, #0
 8001928:	f001 f80a 	bl	8002940 <u8g2_m_16_8_1>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800192c:	782a      	ldrb	r2, [r5, #0]
void u8g2_Setup_ssd1306_128x64_noname_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_1(&tile_buf_height);
 800192e:	1c01      	adds	r1, r0, #0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001930:	9600      	str	r6, [sp, #0]
 8001932:	1c20      	adds	r0, r4, #0
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <u8g2_Setup_ssd1306_128x64_noname_1+0x3c>)
 8001936:	f7ff ffab 	bl	8001890 <u8g2_SetupBuffer>
}
 800193a:	b004      	add	sp, #16
 800193c:	bd70      	pop	{r4, r5, r6, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	080024b9 	.word	0x080024b9
 8001944:	08002a31 	.word	0x08002a31
 8001948:	08003a81 	.word	0x08003a81

0800194c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	464f      	mov	r7, r9
 8001950:	4646      	mov	r6, r8
 8001952:	b4c0      	push	{r6, r7}
 8001954:	b083      	sub	sp, #12
 8001956:	1c1f      	adds	r7, r3, #0
 8001958:	ab0a      	add	r3, sp, #40	; 0x28
 800195a:	781c      	ldrb	r4, [r3, #0]
 800195c:	4681      	mov	r9, r0
 800195e:	4688      	mov	r8, r1
 8001960:	1c15      	adds	r5, r2, #0
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001962:	2600      	movs	r6, #0
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001964:	2c00      	cmp	r4, #0
 8001966:	d00c      	beq.n	8001982 <u8g2_DrawBox+0x36>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
 8001968:	3c01      	subs	r4, #1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800196a:	1c2a      	adds	r2, r5, #0
 800196c:	9600      	str	r6, [sp, #0]
 800196e:	4648      	mov	r0, r9
 8001970:	4641      	mov	r1, r8
 8001972:	1c3b      	adds	r3, r7, #0
    y++;    
 8001974:	3501      	adds	r5, #1
    h--;
 8001976:	b2e4      	uxtb	r4, r4
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001978:	f001 fe60 	bl	800363c <u8g2_DrawHVLine>
    y++;    
 800197c:	b2ed      	uxtb	r5, r5
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800197e:	2c00      	cmp	r4, #0
 8001980:	d1f2      	bne.n	8001968 <u8g2_DrawBox+0x1c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
 8001982:	b003      	add	sp, #12
 8001984:	bc0c      	pop	{r2, r3}
 8001986:	4690      	mov	r8, r2
 8001988:	4699      	mov	r9, r3
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198c <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	4657      	mov	r7, sl
 8001990:	464e      	mov	r6, r9
 8001992:	4645      	mov	r5, r8
 8001994:	b4e0      	push	{r5, r6, r7}
 8001996:	b082      	sub	sp, #8
 8001998:	1c1f      	adds	r7, r3, #0
 800199a:	ab0a      	add	r3, sp, #40	; 0x28
 800199c:	781c      	ldrb	r4, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800199e:	2300      	movs	r3, #0
 80019a0:	4698      	mov	r8, r3
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	1c3b      	adds	r3, r7, #0
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80019a6:	1c06      	adds	r6, r0, #0
 80019a8:	1c0d      	adds	r5, r1, #0
 80019aa:	4691      	mov	r9, r2
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80019ac:	f001 fe46 	bl	800363c <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80019b0:	2301      	movs	r3, #1
 80019b2:	469a      	mov	sl, r3
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	1c30      	adds	r0, r6, #0
 80019b8:	1c29      	adds	r1, r5, #0
 80019ba:	464a      	mov	r2, r9
 80019bc:	1c23      	adds	r3, r4, #0
 80019be:	f001 fe3d 	bl	800363c <u8g2_DrawHVLine>
  x+=w;
  x--;
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80019c2:	4653      	mov	r3, sl
 80019c4:	1e79      	subs	r1, r7, #1
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
  x+=w;
  x--;
 80019c6:	1869      	adds	r1, r5, r1
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	1c30      	adds	r0, r6, #0
 80019cc:	464a      	mov	r2, r9
 80019ce:	1c23      	adds	r3, r4, #0
 80019d0:	b2c9      	uxtb	r1, r1
 80019d2:	f001 fe33 	bl	800363c <u8g2_DrawHVLine>
  y+=h;
  y--;
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80019d6:	4643      	mov	r3, r8
 80019d8:	1e62      	subs	r2, r4, #1
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
  x+=w;
  x--;
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
  y+=h;
  y--;
 80019da:	444a      	add	r2, r9
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	1c30      	adds	r0, r6, #0
 80019e2:	1c29      	adds	r1, r5, #0
 80019e4:	1c3b      	adds	r3, r7, #0
 80019e6:	f001 fe29 	bl	800363c <u8g2_DrawHVLine>
}
 80019ea:	b002      	add	sp, #8
 80019ec:	bc1c      	pop	{r2, r3, r4}
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	46a2      	mov	sl, r4
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	46c0      	nop			; (mov r8, r8)

080019f8 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	465f      	mov	r7, fp
 80019fc:	4656      	mov	r6, sl
 80019fe:	464d      	mov	r5, r9
 8001a00:	4644      	mov	r4, r8
 8001a02:	b4f0      	push	{r4, r5, r6, r7}
 8001a04:	b087      	sub	sp, #28
 8001a06:	469a      	mov	sl, r3
 8001a08:	ab10      	add	r3, sp, #64	; 0x40
 8001a0a:	1c15      	adds	r5, r2, #0
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	ab11      	add	r3, sp, #68	; 0x44
 8001a10:	781c      	ldrb	r4, [r3, #0]
 8001a12:	4680      	mov	r8, r0
 8001a14:	46a3      	mov	fp, r4
 8001a16:	1c08      	adds	r0, r1, #0
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8001a18:	1963      	adds	r3, r4, r5




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001a1a:	9104      	str	r1, [sp, #16]
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
 8001a1c:	4459      	add	r1, fp
 8001a1e:	b2cf      	uxtb	r7, r1
  yu = y;
  yu += r;
 8001a20:	b2d9      	uxtb	r1, r3
 8001a22:	4653      	mov	r3, sl
 8001a24:	4684      	mov	ip, r0
 8001a26:	9305      	str	r3, [sp, #20]
 8001a28:	1e5e      	subs	r6, r3, #1
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001a2a:	2302      	movs	r3, #2
  yu += r;
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
 8001a2c:	1c20      	adds	r0, r4, #0
 8001a2e:	4466      	add	r6, ip
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8001a30:	9102      	str	r1, [sp, #8]
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
 8001a32:	1b36      	subs	r6, r6, r4
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	1e54      	subs	r4, r2, #1
 8001a38:	9b02      	ldr	r3, [sp, #8]
 8001a3a:	192c      	adds	r4, r5, r4




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001a3c:	9203      	str	r2, [sp, #12]
  xr -= 1;
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
 8001a3e:	1a24      	subs	r4, r4, r0

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001a40:	1c1a      	adds	r2, r3, #0
 8001a42:	4640      	mov	r0, r8
 8001a44:	1c39      	adds	r1, r7, #0
 8001a46:	4699      	mov	r9, r3
 8001a48:	465b      	mov	r3, fp
 8001a4a:	f000 fa7d 	bl	8001f48 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001a4e:	2301      	movs	r3, #1
  yu += r;
 
  xr = x;
  xr += w;
  xr -= r;
  xr -= 1;
 8001a50:	b2f6      	uxtb	r6, r6
  yl += h;
  yl -= r; 
  yl -= 1;

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4640      	mov	r0, r8
 8001a56:	1c31      	adds	r1, r6, #0
 8001a58:	464a      	mov	r2, r9
 8001a5a:	465b      	mov	r3, fp
 8001a5c:	f000 fa74 	bl	8001f48 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001a60:	2304      	movs	r3, #4
  xr -= 1;
  
  yl = y;
  yl += h;
  yl -= r; 
  yl -= 1;
 8001a62:	b2e4      	uxtb	r4, r4

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4640      	mov	r0, r8
 8001a68:	1c39      	adds	r1, r7, #0
 8001a6a:	1c22      	adds	r2, r4, #0
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	f000 fa6b 	bl	8001f48 <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001a72:	2308      	movs	r3, #8
 8001a74:	1c22      	adds	r2, r4, #0
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4640      	mov	r0, r8
 8001a7a:	465b      	mov	r3, fp
 8001a7c:	1c31      	adds	r1, r6, #0
 8001a7e:	f000 fa63 	bl	8001f48 <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
 8001a82:	465a      	mov	r2, fp
 8001a84:	4653      	mov	r3, sl
 8001a86:	1a9b      	subs	r3, r3, r2
    ww -= r;
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
    xl++;
    yu++;
    
    if ( ww >= 3 )
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d930      	bls.n	8001af2 <u8g2_DrawRBox+0xfa>
    {
      ww -= 2;
 8001a90:	3b02      	subs	r3, #2
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8001a92:	1c56      	adds	r6, r2, #1
    xl++;
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
 8001a94:	b2db      	uxtb	r3, r3
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8001a96:	b2f6      	uxtb	r6, r6
    xl++;
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
 8001a98:	4699      	mov	r9, r3
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001a9a:	2e00      	cmp	r6, #0
 8001a9c:	d029      	beq.n	8001af2 <u8g2_DrawRBox+0xfa>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001a9e:	464a      	mov	r2, r9
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
 8001aa0:	3701      	adds	r7, #1
 8001aa2:	b2fb      	uxtb	r3, r7
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001aa4:	46a2      	mov	sl, r4
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
 8001aa6:	1c37      	adds	r7, r6, #0
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001aa8:	46b1      	mov	r9, r6
 8001aaa:	1c1c      	adds	r4, r3, #0
 8001aac:	1c16      	adds	r6, r2, #0
 8001aae:	2300      	movs	r3, #0
    y++;    
    h--;
 8001ab0:	3f01      	subs	r7, #1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	1c2a      	adds	r2, r5, #0
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	1c21      	adds	r1, r4, #0
 8001aba:	1c33      	adds	r3, r6, #0
    y++;    
 8001abc:	3501      	adds	r5, #1
    h--;
 8001abe:	b2ff      	uxtb	r7, r7
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ac0:	f001 fdbc 	bl	800363c <u8g2_DrawHVLine>
    y++;    
 8001ac4:	b2ed      	uxtb	r5, r5
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001ac6:	2f00      	cmp	r7, #0
 8001ac8:	d1f1      	bne.n	8001aae <u8g2_DrawRBox+0xb6>
 8001aca:	1c22      	adds	r2, r4, #0
 8001acc:	1c33      	adds	r3, r6, #0
 8001ace:	4654      	mov	r4, sl
 8001ad0:	464e      	mov	r6, r9
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	1c17      	adds	r7, r2, #0
    y++;    
    h--;
 8001ad8:	3e01      	subs	r6, #1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ada:	1c22      	adds	r2, r4, #0
 8001adc:	9500      	str	r5, [sp, #0]
 8001ade:	4640      	mov	r0, r8
 8001ae0:	1c39      	adds	r1, r7, #0
 8001ae2:	464b      	mov	r3, r9
    y++;    
 8001ae4:	3401      	adds	r4, #1
    h--;
 8001ae6:	b2f6      	uxtb	r6, r6
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ae8:	f001 fda8 	bl	800363c <u8g2_DrawHVLine>
    y++;    
 8001aec:	b2e4      	uxtb	r4, r4
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001aee:	2e00      	cmp	r6, #0
 8001af0:	d1f2      	bne.n	8001ad8 <u8g2_DrawRBox+0xe0>
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
    }
    
    hh = h;
    hh -= r;
 8001af2:	465a      	mov	r2, fp
 8001af4:	9b03      	ldr	r3, [sp, #12]
 8001af6:	1a9c      	subs	r4, r3, r2
    hh -= r;
 8001af8:	1aa4      	subs	r4, r4, r2
 8001afa:	b2e4      	uxtb	r4, r4
    //h--;
    if ( hh >= 3 )
 8001afc:	2c02      	cmp	r4, #2
 8001afe:	d917      	bls.n	8001b30 <u8g2_DrawRBox+0x138>
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b00:	9b04      	ldr	r3, [sp, #16]
 8001b02:	4647      	mov	r7, r8
 8001b04:	4698      	mov	r8, r3
 8001b06:	9b05      	ldr	r3, [sp, #20]
 8001b08:	2600      	movs	r6, #0
 8001b0a:	4699      	mov	r9, r3

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    yu++;
 8001b0c:	9d02      	ldr	r5, [sp, #8]
    hh -= r;
    hh -= r;
    //h--;
    if ( hh >= 3 )
    {
      hh -= 2;
 8001b0e:	3c02      	subs	r4, #2

    ww = w;
    ww -= r;
    ww -= r;
    xl++;
    yu++;
 8001b10:	3501      	adds	r5, #1
 8001b12:	b2ed      	uxtb	r5, r5
    hh -= r;
    hh -= r;
    //h--;
    if ( hh >= 3 )
    {
      hh -= 2;
 8001b14:	b2e4      	uxtb	r4, r4
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
 8001b16:	3c01      	subs	r4, #1
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b18:	1c2a      	adds	r2, r5, #0
 8001b1a:	9600      	str	r6, [sp, #0]
 8001b1c:	1c38      	adds	r0, r7, #0
 8001b1e:	4641      	mov	r1, r8
 8001b20:	464b      	mov	r3, r9
    y++;    
 8001b22:	3501      	adds	r5, #1
    h--;
 8001b24:	b2e4      	uxtb	r4, r4
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b26:	f001 fd89 	bl	800363c <u8g2_DrawHVLine>
    y++;    
 8001b2a:	b2ed      	uxtb	r5, r5
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001b2c:	2c00      	cmp	r4, #0
 8001b2e:	d1f2      	bne.n	8001b16 <u8g2_DrawRBox+0x11e>
    {
      hh -= 2;
      u8g2_DrawBox(u8g2, x, yu, w, hh);
    }
  }
}
 8001b30:	b007      	add	sp, #28
 8001b32:	bc3c      	pop	{r2, r3, r4, r5}
 8001b34:	4690      	mov	r8, r2
 8001b36:	4699      	mov	r9, r3
 8001b38:	46a2      	mov	sl, r4
 8001b3a:	46ab      	mov	fp, r5
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)

08001b40 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	465f      	mov	r7, fp
 8001b44:	4656      	mov	r6, sl
 8001b46:	464d      	mov	r5, r9
 8001b48:	4644      	mov	r4, r8
 8001b4a:	4693      	mov	fp, r2
 8001b4c:	b4f0      	push	{r4, r5, r6, r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	1c1d      	adds	r5, r3, #0
 8001b52:	ab10      	add	r3, sp, #64	; 0x40
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	468a      	mov	sl, r1
 8001b58:	1c1a      	adds	r2, r3, #0
 8001b5a:	ab11      	add	r3, sp, #68	; 0x44
 8001b5c:	781c      	ldrb	r4, [r3, #0]
 8001b5e:	9203      	str	r2, [sp, #12]
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
 8001b60:	190b      	adds	r3, r1, r4
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4698      	mov	r8, r3
  yu = y;
  yu += r;
 8001b66:	465b      	mov	r3, fp
 8001b68:	18e6      	adds	r6, r4, r3
 8001b6a:	1e6b      	subs	r3, r5, #1
 8001b6c:	4453      	add	r3, sl
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	9304      	str	r3, [sp, #16]
    u8g2_uint_t yl, xr;
      
    xr = x;
    xr += w;
    xr -= r;
    xr -= 1;
 8001b72:	1b1b      	subs	r3, r3, r4
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4699      	mov	r9, r3
 8001b78:	1c13      	adds	r3, r2, #0
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	445b      	add	r3, fp
 8001b7e:	b2d9      	uxtb	r1, r3
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
 8001b80:	1b0b      	subs	r3, r1, r4
 8001b82:	9105      	str	r1, [sp, #20]
 8001b84:	b2d9      	uxtb	r1, r3

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001b86:	2302      	movs	r3, #2
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
  xl += r;
  yu = y;
  yu += r;
 8001b88:	b2f6      	uxtb	r6, r6
    xr -= 1;
    
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;
 8001b8a:	9102      	str	r1, [sp, #8]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4641      	mov	r1, r8
 8001b90:	1c23      	adds	r3, r4, #0
 8001b92:	1c32      	adds	r2, r6, #0
  }
}


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8001b94:	1c07      	adds	r7, r0, #0
    yl = y;
    yl += h;
    yl -= r; 
    yl -= 1;

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8001b96:	f000 f995 	bl	8001ec4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	1c38      	adds	r0, r7, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	1c23      	adds	r3, r4, #0
 8001ba4:	1c32      	adds	r2, r6, #0
 8001ba6:	f000 f98d 	bl	8001ec4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8001baa:	2304      	movs	r3, #4
 8001bac:	1c38      	adds	r0, r7, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	1c23      	adds	r3, r4, #0
 8001bb4:	9a02      	ldr	r2, [sp, #8]
 8001bb6:	f000 f985 	bl	8001ec4 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8001bba:	2308      	movs	r3, #8
 8001bbc:	1c38      	adds	r0, r7, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	1c23      	adds	r3, r4, #0
 8001bc4:	9a02      	ldr	r2, [sp, #8]
 8001bc6:	f000 f97d 	bl	8001ec4 <u8g2_DrawCircle>

    ww = w;
    ww -= r;
    ww -= r;
    hh = h;
    hh -= r;
 8001bca:	9b03      	ldr	r3, [sp, #12]

  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
 8001bcc:	1b2d      	subs	r5, r5, r4
    ww -= r;
 8001bce:	1b2d      	subs	r5, r5, r4
    hh = h;
    hh -= r;
 8001bd0:	1b1b      	subs	r3, r3, r4
    hh -= r;
 8001bd2:	1b1c      	subs	r4, r3, r4
  {
    u8g2_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
 8001bd4:	b2ed      	uxtb	r5, r5
    hh = h;
    hh -= r;
    hh -= r;
 8001bd6:	b2e4      	uxtb	r4, r4
    
    xl++;
    yu++;
    
    if ( ww >= 3 )
 8001bd8:	2d02      	cmp	r5, #2
 8001bda:	d818      	bhi.n	8001c0e <u8g2_DrawRFrame+0xce>
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
 8001bdc:	2c02      	cmp	r4, #2
 8001bde:	d90f      	bls.n	8001c00 <u8g2_DrawRFrame+0xc0>
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
 8001be0:	3601      	adds	r6, #1
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
 8001be2:	3c02      	subs	r4, #2
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
    yu++;
 8001be4:	b2f6      	uxtb	r6, r6
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
    }
    
    if ( hh >= 3 )
    {
      hh -= 2;
 8001be6:	b2e4      	uxtb	r4, r4
      w--;
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8001be8:	1c38      	adds	r0, r7, #0
 8001bea:	4651      	mov	r1, sl
 8001bec:	1c32      	adds	r2, r6, #0
 8001bee:	1c23      	adds	r3, r4, #0
 8001bf0:	f001 fd3a 	bl	8003668 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8001bf4:	1c38      	adds	r0, r7, #0
 8001bf6:	9904      	ldr	r1, [sp, #16]
 8001bf8:	1c32      	adds	r2, r6, #0
 8001bfa:	1c23      	adds	r3, r4, #0
 8001bfc:	f001 fd34 	bl	8003668 <u8g2_DrawVLine>
    }
  }
}
 8001c00:	b007      	add	sp, #28
 8001c02:	bc3c      	pop	{r2, r3, r4, r5}
 8001c04:	4690      	mov	r8, r2
 8001c06:	4699      	mov	r9, r3
 8001c08:	46a2      	mov	sl, r4
 8001c0a:	46ab      	mov	fp, r5
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ww -= r;
    hh = h;
    hh -= r;
    hh -= r;
    
    xl++;
 8001c0e:	4643      	mov	r3, r8
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4698      	mov	r8, r3
    yu++;
    
    if ( ww >= 3 )
    {
      ww -= 2;
 8001c16:	3d02      	subs	r5, #2
 8001c18:	b2ed      	uxtb	r5, r5
      h--;
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8001c1a:	1c38      	adds	r0, r7, #0
 8001c1c:	1c19      	adds	r1, r3, #0
 8001c1e:	465a      	mov	r2, fp
 8001c20:	1c2b      	adds	r3, r5, #0
 8001c22:	f001 fd17 	bl	8003654 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8001c26:	1c38      	adds	r0, r7, #0
 8001c28:	4641      	mov	r1, r8
 8001c2a:	9a05      	ldr	r2, [sp, #20]
 8001c2c:	1c2b      	adds	r3, r5, #0
 8001c2e:	f001 fd11 	bl	8003654 <u8g2_DrawHLine>
 8001c32:	e7d3      	b.n	8001bdc <u8g2_DrawRFrame+0x9c>

08001c34 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	464f      	mov	r7, r9
 8001c38:	4646      	mov	r6, r8
 8001c3a:	b4c0      	push	{r6, r7}
 8001c3c:	1c1d      	adds	r5, r3, #0
 8001c3e:	ab08      	add	r3, sp, #32
 8001c40:	781c      	ldrb	r4, [r3, #0]
 8001c42:	ab09      	add	r3, sp, #36	; 0x24
 8001c44:	781e      	ldrb	r6, [r3, #0]
 8001c46:	1c07      	adds	r7, r0, #0
 8001c48:	4688      	mov	r8, r1
 8001c4a:	4691      	mov	r9, r2
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001c4c:	07f3      	lsls	r3, r6, #31
 8001c4e:	d441      	bmi.n	8001cd4 <u8g2_draw_circle_section+0xa0>
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001c50:	07b3      	lsls	r3, r6, #30
 8001c52:	d42c      	bmi.n	8001cae <u8g2_draw_circle_section+0x7a>
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001c54:	0733      	lsls	r3, r6, #28
 8001c56:	d417      	bmi.n	8001c88 <u8g2_draw_circle_section+0x54>
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001c58:	0773      	lsls	r3, r6, #29
 8001c5a:	d511      	bpl.n	8001c80 <u8g2_draw_circle_section+0x4c>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8001c5c:	4643      	mov	r3, r8
 8001c5e:	1ae9      	subs	r1, r5, r3
 8001c60:	464b      	mov	r3, r9
 8001c62:	18e2      	adds	r2, r4, r3
 8001c64:	b2c9      	uxtb	r1, r1
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	1c38      	adds	r0, r7, #0
 8001c6a:	f001 fd07 	bl	800367c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8001c6e:	464b      	mov	r3, r9
 8001c70:	1c22      	adds	r2, r4, #0
 8001c72:	1ae9      	subs	r1, r5, r3
 8001c74:	4442      	add	r2, r8
 8001c76:	b2c9      	uxtb	r1, r1
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	1c38      	adds	r0, r7, #0
 8001c7c:	f001 fcfe 	bl	800367c <u8g2_DrawPixel>
    }
}
 8001c80:	bc0c      	pop	{r2, r3}
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001c88:	4643      	mov	r3, r8
 8001c8a:	18e9      	adds	r1, r5, r3
 8001c8c:	464b      	mov	r3, r9
 8001c8e:	18e2      	adds	r2, r4, r3
 8001c90:	1c38      	adds	r0, r7, #0
 8001c92:	b2c9      	uxtb	r1, r1
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f001 fcf1 	bl	800367c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8001c9a:	464b      	mov	r3, r9
 8001c9c:	18e9      	adds	r1, r5, r3
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	191a      	adds	r2, r3, r4
 8001ca2:	b2c9      	uxtb	r1, r1
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	1c38      	adds	r0, r7, #0
 8001ca8:	f001 fce8 	bl	800367c <u8g2_DrawPixel>
 8001cac:	e7d4      	b.n	8001c58 <u8g2_draw_circle_section+0x24>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001cae:	4643      	mov	r3, r8
 8001cb0:	1ae9      	subs	r1, r5, r3
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	1ae2      	subs	r2, r4, r3
 8001cb6:	1c38      	adds	r0, r7, #0
 8001cb8:	b2c9      	uxtb	r1, r1
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f001 fcde 	bl	800367c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001cc0:	464b      	mov	r3, r9
 8001cc2:	1ae9      	subs	r1, r5, r3
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	1ae2      	subs	r2, r4, r3
 8001cc8:	b2c9      	uxtb	r1, r1
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	1c38      	adds	r0, r7, #0
 8001cce:	f001 fcd5 	bl	800367c <u8g2_DrawPixel>
 8001cd2:	e7bf      	b.n	8001c54 <u8g2_draw_circle_section+0x20>
static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001cd4:	1869      	adds	r1, r5, r1
 8001cd6:	1aa2      	subs	r2, r4, r2
 8001cd8:	b2c9      	uxtb	r1, r1
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f001 fcce 	bl	800367c <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	18e9      	adds	r1, r5, r3
 8001ce4:	4643      	mov	r3, r8
 8001ce6:	1ae2      	subs	r2, r4, r3
 8001ce8:	b2c9      	uxtb	r1, r1
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	1c38      	adds	r0, r7, #0
 8001cee:	f001 fcc5 	bl	800367c <u8g2_DrawPixel>
 8001cf2:	e7ad      	b.n	8001c50 <u8g2_draw_circle_section+0x1c>

08001cf4 <u8g2_draw_ellipse_section>:
  Source: 
    Foley, Computer Graphics, p 90
*/
static void u8g2_draw_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;
static void u8g2_draw_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	464f      	mov	r7, r9
 8001cf8:	4646      	mov	r6, r8
 8001cfa:	b4c0      	push	{r6, r7}
 8001cfc:	1c1e      	adds	r6, r3, #0
 8001cfe:	ab08      	add	r3, sp, #32
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	1c07      	adds	r7, r0, #0
 8001d04:	4698      	mov	r8, r3
 8001d06:	ab09      	add	r3, sp, #36	; 0x24
 8001d08:	781c      	ldrb	r4, [r3, #0]
 8001d0a:	4689      	mov	r9, r1
 8001d0c:	1c15      	adds	r5, r2, #0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001d0e:	07e3      	lsls	r3, r4, #31
 8001d10:	d426      	bmi.n	8001d60 <u8g2_draw_ellipse_section+0x6c>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001d12:	07a3      	lsls	r3, r4, #30
 8001d14:	d41a      	bmi.n	8001d4c <u8g2_draw_ellipse_section+0x58>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001d16:	0723      	lsls	r3, r4, #28
 8001d18:	d40e      	bmi.n	8001d38 <u8g2_draw_ellipse_section+0x44>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001d1a:	0763      	lsls	r3, r4, #29
 8001d1c:	d508      	bpl.n	8001d30 <u8g2_draw_ellipse_section+0x3c>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8001d1e:	464b      	mov	r3, r9
 8001d20:	1c2a      	adds	r2, r5, #0
 8001d22:	1af1      	subs	r1, r6, r3
 8001d24:	4442      	add	r2, r8
 8001d26:	b2c9      	uxtb	r1, r1
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	1c38      	adds	r0, r7, #0
 8001d2c:	f001 fca6 	bl	800367c <u8g2_DrawPixel>
    }
}
 8001d30:	bc0c      	pop	{r2, r3}
 8001d32:	4690      	mov	r8, r2
 8001d34:	4699      	mov	r9, r3
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001d38:	464b      	mov	r3, r9
 8001d3a:	18f1      	adds	r1, r6, r3
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	195a      	adds	r2, r3, r5
 8001d40:	b2c9      	uxtb	r1, r1
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	1c38      	adds	r0, r7, #0
 8001d46:	f001 fc99 	bl	800367c <u8g2_DrawPixel>
 8001d4a:	e7e6      	b.n	8001d1a <u8g2_draw_ellipse_section+0x26>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	1af1      	subs	r1, r6, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	1b5a      	subs	r2, r3, r5
 8001d54:	b2c9      	uxtb	r1, r1
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	1c38      	adds	r0, r7, #0
 8001d5a:	f001 fc8f 	bl	800367c <u8g2_DrawPixel>
 8001d5e:	e7da      	b.n	8001d16 <u8g2_draw_ellipse_section+0x22>
static void u8g2_draw_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001d60:	4643      	mov	r3, r8
 8001d62:	1871      	adds	r1, r6, r1
 8001d64:	1a9a      	subs	r2, r3, r2
 8001d66:	b2c9      	uxtb	r1, r1
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f001 fc87 	bl	800367c <u8g2_DrawPixel>
 8001d6e:	e7d0      	b.n	8001d12 <u8g2_draw_ellipse_section+0x1e>

08001d70 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d72:	464f      	mov	r7, r9
 8001d74:	4646      	mov	r6, r8
 8001d76:	b4c0      	push	{r6, r7}
 8001d78:	1c1d      	adds	r5, r3, #0
 8001d7a:	ab08      	add	r3, sp, #32
 8001d7c:	781e      	ldrb	r6, [r3, #0]
 8001d7e:	ab09      	add	r3, sp, #36	; 0x24
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	1c07      	adds	r7, r0, #0
 8001d84:	1c0c      	adds	r4, r1, #0
 8001d86:	4691      	mov	r9, r2
 8001d88:	4698      	mov	r8, r3
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001d8a:	07db      	lsls	r3, r3, #31
 8001d8c:	d446      	bmi.n	8001e1c <u8g2_draw_disc_section+0xac>
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001d8e:	4643      	mov	r3, r8
 8001d90:	079b      	lsls	r3, r3, #30
 8001d92:	d42e      	bmi.n	8001df2 <u8g2_draw_disc_section+0x82>
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001d94:	4643      	mov	r3, r8
 8001d96:	071b      	lsls	r3, r3, #28
 8001d98:	d418      	bmi.n	8001dcc <u8g2_draw_disc_section+0x5c>
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	075b      	lsls	r3, r3, #29
 8001d9e:	d511      	bpl.n	8001dc4 <u8g2_draw_disc_section+0x54>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8001da0:	464b      	mov	r3, r9
 8001da2:	1b29      	subs	r1, r5, r4
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2c9      	uxtb	r1, r1
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	1c38      	adds	r0, r7, #0
 8001dac:	1c32      	adds	r2, r6, #0
 8001dae:	f001 fc5b 	bl	8003668 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8001db2:	464b      	mov	r3, r9
 8001db4:	3401      	adds	r4, #1
 8001db6:	1ae9      	subs	r1, r5, r3
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	b2e3      	uxtb	r3, r4
 8001dbc:	1c38      	adds	r0, r7, #0
 8001dbe:	1c32      	adds	r2, r6, #0
 8001dc0:	f001 fc52 	bl	8003668 <u8g2_DrawVLine>
    }
}
 8001dc4:	bc0c      	pop	{r2, r3}
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	4699      	mov	r9, r3
 8001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8001dcc:	464b      	mov	r3, r9
 8001dce:	1929      	adds	r1, r5, r4
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	1c38      	adds	r0, r7, #0
 8001dd4:	1c32      	adds	r2, r6, #0
 8001dd6:	b2c9      	uxtb	r1, r1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f001 fc45 	bl	8003668 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8001dde:	464b      	mov	r3, r9
 8001de0:	18e9      	adds	r1, r5, r3
 8001de2:	1c63      	adds	r3, r4, #1
 8001de4:	b2c9      	uxtb	r1, r1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	1c38      	adds	r0, r7, #0
 8001dea:	1c32      	adds	r2, r6, #0
 8001dec:	f001 fc3c 	bl	8003668 <u8g2_DrawVLine>
 8001df0:	e7d3      	b.n	8001d9a <u8g2_draw_disc_section+0x2a>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8001df2:	464b      	mov	r3, r9
 8001df4:	1b29      	subs	r1, r5, r4
 8001df6:	1af2      	subs	r2, r6, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	1c38      	adds	r0, r7, #0
 8001dfc:	b2c9      	uxtb	r1, r1
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f001 fc31 	bl	8003668 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8001e06:	464b      	mov	r3, r9
 8001e08:	1b32      	subs	r2, r6, r4
 8001e0a:	1ae9      	subs	r1, r5, r3
 8001e0c:	1c63      	adds	r3, r4, #1
 8001e0e:	b2c9      	uxtb	r1, r1
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	1c38      	adds	r0, r7, #0
 8001e16:	f001 fc27 	bl	8003668 <u8g2_DrawVLine>
 8001e1a:	e7bb      	b.n	8001d94 <u8g2_draw_disc_section+0x24>
static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8001e1c:	1c13      	adds	r3, r2, #0
 8001e1e:	1869      	adds	r1, r5, r1
 8001e20:	1ab2      	subs	r2, r6, r2
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f001 fc1d 	bl	8003668 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8001e2e:	464b      	mov	r3, r9
 8001e30:	1b32      	subs	r2, r6, r4
 8001e32:	18e9      	adds	r1, r5, r3
 8001e34:	1c63      	adds	r3, r4, #1
 8001e36:	b2c9      	uxtb	r1, r1
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	1c38      	adds	r0, r7, #0
 8001e3e:	f001 fc13 	bl	8003668 <u8g2_DrawVLine>
 8001e42:	e7a4      	b.n	8001d8e <u8g2_draw_disc_section+0x1e>

08001e44 <u8g2_draw_filled_ellipse_section>:
/*==============================================*/
/* Filled Ellipse */

static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	464f      	mov	r7, r9
 8001e48:	4646      	mov	r6, r8
 8001e4a:	b4c0      	push	{r6, r7}
 8001e4c:	1c1e      	adds	r6, r3, #0
 8001e4e:	ab08      	add	r3, sp, #32
 8001e50:	781f      	ldrb	r7, [r3, #0]
 8001e52:	ab09      	add	r3, sp, #36	; 0x24
 8001e54:	781c      	ldrb	r4, [r3, #0]
 8001e56:	4680      	mov	r8, r0
 8001e58:	4689      	mov	r9, r1
 8001e5a:	1c15      	adds	r5, r2, #0
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001e5c:	07e3      	lsls	r3, r4, #31
 8001e5e:	d427      	bmi.n	8001eb0 <u8g2_draw_filled_ellipse_section+0x6c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001e60:	07a3      	lsls	r3, r4, #30
 8001e62:	d41a      	bmi.n	8001e9a <u8g2_draw_filled_ellipse_section+0x56>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001e64:	0723      	lsls	r3, r4, #28
 8001e66:	d40e      	bmi.n	8001e86 <u8g2_draw_filled_ellipse_section+0x42>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001e68:	0763      	lsls	r3, r4, #29
 8001e6a:	d508      	bpl.n	8001e7e <u8g2_draw_filled_ellipse_section+0x3a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	3501      	adds	r5, #1
 8001e70:	1af1      	subs	r1, r6, r3
 8001e72:	b2c9      	uxtb	r1, r1
 8001e74:	b2eb      	uxtb	r3, r5
 8001e76:	4640      	mov	r0, r8
 8001e78:	1c3a      	adds	r2, r7, #0
 8001e7a:	f001 fbf5 	bl	8003668 <u8g2_DrawVLine>
    }
}
 8001e7e:	bc0c      	pop	{r2, r3}
 8001e80:	4690      	mov	r8, r2
 8001e82:	4699      	mov	r9, r3
 8001e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8001e86:	464b      	mov	r3, r9
 8001e88:	18f1      	adds	r1, r6, r3
 8001e8a:	1c6b      	adds	r3, r5, #1
 8001e8c:	b2c9      	uxtb	r1, r1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4640      	mov	r0, r8
 8001e92:	1c3a      	adds	r2, r7, #0
 8001e94:	f001 fbe8 	bl	8003668 <u8g2_DrawVLine>
 8001e98:	e7e6      	b.n	8001e68 <u8g2_draw_filled_ellipse_section+0x24>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	1b7a      	subs	r2, r7, r5
 8001e9e:	1af1      	subs	r1, r6, r3
 8001ea0:	1c6b      	adds	r3, r5, #1
 8001ea2:	b2c9      	uxtb	r1, r1
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4640      	mov	r0, r8
 8001eaa:	f001 fbdd 	bl	8003668 <u8g2_DrawVLine>
 8001eae:	e7d9      	b.n	8001e64 <u8g2_draw_filled_ellipse_section+0x20>
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8001eb0:	1871      	adds	r1, r6, r1
 8001eb2:	1aba      	subs	r2, r7, r2
 8001eb4:	1c6b      	adds	r3, r5, #1
 8001eb6:	b2c9      	uxtb	r1, r1
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f001 fbd4 	bl	8003668 <u8g2_DrawVLine>
 8001ec0:	e7ce      	b.n	8001e60 <u8g2_draw_filled_ellipse_section+0x1c>
 8001ec2:	46c0      	nop			; (mov r8, r8)

08001ec4 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	465f      	mov	r7, fp
 8001ec8:	4656      	mov	r6, sl
 8001eca:	464d      	mov	r5, r9
 8001ecc:	4644      	mov	r4, r8
 8001ece:	b4f0      	push	{r4, r5, r6, r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	1c1d      	adds	r5, r3, #0
 8001ed4:	ab0c      	add	r3, sp, #48	; 0x30
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	468b      	mov	fp, r1
 8001eda:	4699      	mov	r9, r3
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
 8001edc:	2301      	movs	r3, #1
 8001ede:	1b5b      	subs	r3, r3, r5
 8001ee0:	b2df      	uxtb	r7, r3
    ddF_y -= rad;
    ddF_y *= 2;
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001ee2:	464b      	mov	r3, r9

    f = 1;
    f -= rad;
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
 8001ee4:	426e      	negs	r6, r5
    ddF_y *= 2;
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	9301      	str	r3, [sp, #4]
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001eea:	4692      	mov	sl, r2
    f = 1;
    f -= rad;
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
 8001eec:	0076      	lsls	r6, r6, #1
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	1c2a      	adds	r2, r5, #0
 8001ef2:	465b      	mov	r3, fp
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001ef4:	4680      	mov	r8, r0
    f = 1;
    f -= rad;
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
 8001ef6:	b2f6      	uxtb	r6, r6
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001ef8:	f7ff fe9c 	bl	8001c34 <u8g2_draw_circle_section>
    
    while ( x < y )
 8001efc:	2400      	movs	r4, #0
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	d01b      	beq.n	8001f3a <u8g2_DrawCircle+0x76>
    {
      if (f >= 0) 
 8001f02:	b27b      	sxtb	r3, r7
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db06      	blt.n	8001f16 <u8g2_DrawCircle+0x52>
      {
        y--;
        ddF_y += 2;
 8001f08:	3602      	adds	r6, #2
 8001f0a:	b2f3      	uxtb	r3, r6
    
    while ( x < y )
    {
      if (f >= 0) 
      {
        y--;
 8001f0c:	3d01      	subs	r5, #1
        ddF_y += 2;
 8001f0e:	b2de      	uxtb	r6, r3
        f += ddF_y;
 8001f10:	19db      	adds	r3, r3, r7
    
    while ( x < y )
    {
      if (f >= 0) 
      {
        y--;
 8001f12:	b2ed      	uxtb	r5, r5
        ddF_y += 2;
        f += ddF_y;
 8001f14:	b2df      	uxtb	r7, r3
      }
      x++;
 8001f16:	3401      	adds	r4, #1
 8001f18:	b2e4      	uxtb	r4, r4
 8001f1a:	0063      	lsls	r3, r4, #1
 8001f1c:	3301      	adds	r3, #1
      ddF_x += 2;
      f += ddF_x;
 8001f1e:	19db      	adds	r3, r3, r7
 8001f20:	b2df      	uxtb	r7, r3

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8001f22:	4653      	mov	r3, sl
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	464b      	mov	r3, r9
 8001f28:	4640      	mov	r0, r8
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	1c21      	adds	r1, r4, #0
 8001f2e:	1c2a      	adds	r2, r5, #0
 8001f30:	465b      	mov	r3, fp
 8001f32:	f7ff fe7f 	bl	8001c34 <u8g2_draw_circle_section>
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
 8001f36:	42ac      	cmp	r4, r5
 8001f38:	d3e3      	bcc.n	8001f02 <u8g2_DrawCircle+0x3e>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bc3c      	pop	{r2, r3, r4, r5}
 8001f3e:	4690      	mov	r8, r2
 8001f40:	4699      	mov	r9, r3
 8001f42:	46a2      	mov	sl, r4
 8001f44:	46ab      	mov	fp, r5
 8001f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f48 <u8g2_DrawDisc>:
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4a:	465f      	mov	r7, fp
 8001f4c:	4656      	mov	r6, sl
 8001f4e:	464d      	mov	r5, r9
 8001f50:	4644      	mov	r4, r8
 8001f52:	b4f0      	push	{r4, r5, r6, r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	1c1d      	adds	r5, r3, #0
 8001f58:	ab0c      	add	r3, sp, #48	; 0x30
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	468b      	mov	fp, r1
 8001f5e:	4699      	mov	r9, r3
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
  f -= rad;
 8001f60:	2301      	movs	r3, #1
 8001f62:	1b5b      	subs	r3, r3, r5
 8001f64:	b2df      	uxtb	r7, r3
  ddF_y -= rad;
  ddF_y *= 2;
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8001f66:	464b      	mov	r3, r9

  f = 1;
  f -= rad;
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
 8001f68:	426e      	negs	r6, r5
  ddF_y *= 2;
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	9301      	str	r3, [sp, #4]
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001f6e:	4692      	mov	sl, r2
  f = 1;
  f -= rad;
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
 8001f70:	0076      	lsls	r6, r6, #1
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8001f72:	2100      	movs	r1, #0
 8001f74:	1c2a      	adds	r2, r5, #0
 8001f76:	465b      	mov	r3, fp
    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
  }
}

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001f78:	4680      	mov	r8, r0
  f = 1;
  f -= rad;
  ddF_x = 1;
  ddF_y = 0;
  ddF_y -= rad;
  ddF_y *= 2;
 8001f7a:	b2f6      	uxtb	r6, r6
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8001f7c:	f7ff fef8 	bl	8001d70 <u8g2_draw_disc_section>
  
  while ( x < y )
 8001f80:	2400      	movs	r4, #0
 8001f82:	2d00      	cmp	r5, #0
 8001f84:	d01b      	beq.n	8001fbe <u8g2_DrawDisc+0x76>
  {
    if (f >= 0) 
 8001f86:	b27b      	sxtb	r3, r7
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db06      	blt.n	8001f9a <u8g2_DrawDisc+0x52>
    {
      y--;
      ddF_y += 2;
 8001f8c:	3602      	adds	r6, #2
 8001f8e:	b2f3      	uxtb	r3, r6
  
  while ( x < y )
  {
    if (f >= 0) 
    {
      y--;
 8001f90:	3d01      	subs	r5, #1
      ddF_y += 2;
 8001f92:	b2de      	uxtb	r6, r3
      f += ddF_y;
 8001f94:	19db      	adds	r3, r3, r7
  
  while ( x < y )
  {
    if (f >= 0) 
    {
      y--;
 8001f96:	b2ed      	uxtb	r5, r5
      ddF_y += 2;
      f += ddF_y;
 8001f98:	b2df      	uxtb	r7, r3
    }
    x++;
 8001f9a:	3401      	adds	r4, #1
 8001f9c:	b2e4      	uxtb	r4, r4
 8001f9e:	0063      	lsls	r3, r4, #1
 8001fa0:	3301      	adds	r3, #1
    ddF_x += 2;
    f += ddF_x;
 8001fa2:	19db      	adds	r3, r3, r7
 8001fa4:	b2df      	uxtb	r7, r3

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 8001fa6:	4653      	mov	r3, sl
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	464b      	mov	r3, r9
 8001fac:	4640      	mov	r0, r8
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	1c21      	adds	r1, r4, #0
 8001fb2:	1c2a      	adds	r2, r5, #0
 8001fb4:	465b      	mov	r3, fp
 8001fb6:	f7ff fedb 	bl	8001d70 <u8g2_draw_disc_section>
  x = 0;
  y = rad;

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
  
  while ( x < y )
 8001fba:	42ac      	cmp	r4, r5
 8001fbc:	d3e3      	bcc.n	8001f86 <u8g2_DrawDisc+0x3e>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
}
 8001fbe:	b003      	add	sp, #12
 8001fc0:	bc3c      	pop	{r2, r3, r4, r5}
 8001fc2:	4690      	mov	r8, r2
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	46a2      	mov	sl, r4
 8001fc8:	46ab      	mov	fp, r5
 8001fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fcc <u8g2_DrawEllipse>:
  }
  
}

void u8g2_DrawEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4656      	mov	r6, sl
 8001fd0:	464d      	mov	r5, r9
 8001fd2:	465f      	mov	r7, fp
 8001fd4:	4644      	mov	r4, r8
 8001fd6:	4699      	mov	r9, r3
 8001fd8:	b4f0      	push	{r4, r5, r6, r7}
 8001fda:	b08f      	sub	sp, #60	; 0x3c
 8001fdc:	ab18      	add	r3, sp, #96	; 0x60
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	9104      	str	r1, [sp, #16]
 8001fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8001fe4:	1c19      	adds	r1, r3, #0
 8001fe6:	ab19      	add	r3, sp, #100	; 0x64
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	9205      	str	r2, [sp, #20]
 8001fec:	9306      	str	r3, [sp, #24]
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
  rxrx2 *= rx;
 8001fee:	466a      	mov	r2, sp
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	8393      	strh	r3, [r2, #28]
 8001ff4:	8b93      	ldrh	r3, [r2, #28]
  }
  
}

void u8g2_DrawEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 8001ff6:	9003      	str	r0, [sp, #12]
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
  rxrx2 *= rx;
 8001ff8:	1c1a      	adds	r2, r3, #0
 8001ffa:	435a      	muls	r2, r3
 8001ffc:	1c10      	adds	r0, r2, #0
 8001ffe:	920a      	str	r2, [sp, #40]	; 0x28
  rxrx2 *= 2;
 8002000:	0052      	lsls	r2, r2, #1
 8002002:	b292      	uxth	r2, r2
 8002004:	4692      	mov	sl, r2
  
  ryry2 = ry;
  ryry2 *= ry;
 8002006:	b28a      	uxth	r2, r1
 8002008:	1c11      	adds	r1, r2, #0
  
  x = rx;
  y = 0;
  
  xchg = 1;
  xchg -= rx;
 800200a:	2601      	movs	r6, #1
  rxrx2 = rx;
  rxrx2 *= rx;
  rxrx2 *= 2;
  
  ryry2 = ry;
  ryry2 *= ry;
 800200c:	4351      	muls	r1, r2
 800200e:	920c      	str	r2, [sp, #48]	; 0x30
  ryry2 *= 2;
 8002010:	004a      	lsls	r2, r1, #1
 8002012:	b292      	uxth	r2, r2
  
  x = rx;
  y = 0;
  
  xchg = 1;
  xchg -= rx;
 8002014:	1af6      	subs	r6, r6, r3
  xchg -= rx;
 8002016:	1af6      	subs	r6, r6, r3
  ychg *= rx;
  
  err = 0;
  
  stopx = ryry2;
  stopx *= rx;
 8002018:	4353      	muls	r3, r2
  
  xchg = 1;
  xchg -= rx;
  xchg -= rx;
  xchg *= ry;
  xchg *= ry;
 800201a:	434e      	muls	r6, r1
  ychg *= rx;
  
  err = 0;
  
  stopx = ryry2;
  stopx *= rx;
 800201c:	b29b      	uxth	r3, r3
 800201e:	4698      	mov	r8, r3
  stopy = 0;
  
  while( stopx >= stopy )
 8002020:	b21b      	sxth	r3, r3
  rxrx2 = rx;
  rxrx2 *= rx;
  rxrx2 *= 2;
  
  ryry2 = ry;
  ryry2 *= ry;
 8002022:	910b      	str	r1, [sp, #44]	; 0x2c
  ryry2 *= 2;
 8002024:	9208      	str	r2, [sp, #32]
  
  xchg = 1;
  xchg -= rx;
  xchg -= rx;
  xchg *= ry;
  xchg *= ry;
 8002026:	b2b6      	uxth	r6, r6
  
  ychg = rx;
  ychg *= rx;
 8002028:	b285      	uxth	r5, r0
  
  stopx = ryry2;
  stopx *= rx;
  stopy = 0;
  
  while( stopx >= stopy )
 800202a:	469b      	mov	fp, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	db3b      	blt.n	80020a8 <u8g2_DrawEllipse+0xdc>
 8002030:	4653      	mov	r3, sl
 8002032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002034:	2400      	movs	r4, #0
 8002036:	1a9b      	subs	r3, r3, r2
 8002038:	9309      	str	r3, [sp, #36]	; 0x24
 800203a:	464b      	mov	r3, r9
 800203c:	2700      	movs	r7, #0
 800203e:	46a1      	mov	r9, r4
 8002040:	1c1c      	adds	r4, r3, #0
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
 8002042:	9b05      	ldr	r3, [sp, #20]
 8002044:	9803      	ldr	r0, [sp, #12]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	9b06      	ldr	r3, [sp, #24]
 800204a:	1c21      	adds	r1, r4, #0
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	1c3a      	adds	r2, r7, #0
 8002050:	9b04      	ldr	r3, [sp, #16]
 8002052:	f7ff fe4f 	bl	8001cf4 <u8g2_draw_ellipse_section>
 8002056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002058:	b2ad      	uxth	r5, r5
 800205a:	18eb      	adds	r3, r5, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	9307      	str	r3, [sp, #28]
    y++;
    stopy += rxrx2;
    err += ychg;
 8002060:	464b      	mov	r3, r9
 8002062:	18eb      	adds	r3, r5, r3
 8002064:	b29b      	uxth	r3, r3
 8002066:	b299      	uxth	r1, r3
 8002068:	4689      	mov	r9, r1
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 800206a:	b209      	sxth	r1, r1
 800206c:	0049      	lsls	r1, r1, #1
 800206e:	b230      	sxth	r0, r6
  stopy = 0;
  
  while( stopx >= stopy )
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
    y++;
 8002070:	3701      	adds	r7, #1
 8002072:	4455      	add	r5, sl
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 8002074:	1809      	adds	r1, r1, r0
  stopy = 0;
  
  while( stopx >= stopy )
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
    y++;
 8002076:	b2ff      	uxtb	r7, r7
 8002078:	b2ad      	uxth	r5, r5
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 800207a:	2900      	cmp	r1, #0
 800207c:	dd0f      	ble.n	800209e <u8g2_DrawEllipse+0xd2>
    {
      x--;
      stopx -= ryry2;
 800207e:	4642      	mov	r2, r8
 8002080:	9808      	ldr	r0, [sp, #32]
      err += xchg;
 8002082:	b2b6      	uxth	r6, r6
 8002084:	199b      	adds	r3, r3, r6
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
 8002086:	1a11      	subs	r1, r2, r0
 8002088:	b28a      	uxth	r2, r1
      err += xchg;
 800208a:	b29b      	uxth	r3, r3
      xchg += ryry2;      
 800208c:	4684      	mov	ip, r0
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
      err += xchg;
 800208e:	4699      	mov	r9, r3
 8002090:	b213      	sxth	r3, r2
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
 8002092:	4690      	mov	r8, r2
 8002094:	469b      	mov	fp, r3
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
 8002096:	3c01      	subs	r4, #1
      stopx -= ryry2;
      err += xchg;
      xchg += ryry2;      
 8002098:	4466      	add	r6, ip
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
 800209a:	b2e4      	uxtb	r4, r4
      stopx -= ryry2;
      err += xchg;
      xchg += ryry2;      
 800209c:	b2b6      	uxth	r6, r6
  
  stopx = ryry2;
  stopx *= rx;
  stopy = 0;
  
  while( stopx >= stopy )
 800209e:	466b      	mov	r3, sp
 80020a0:	8b9b      	ldrh	r3, [r3, #28]
 80020a2:	b21b      	sxth	r3, r3
 80020a4:	455b      	cmp	r3, fp
 80020a6:	ddcc      	ble.n	8002042 <u8g2_DrawEllipse+0x76>

  x = 0;
  y = ry;
  
  xchg = ry;
  xchg *= ry;
 80020a8:	466b      	mov	r3, sp
  
  ychg = 1;
  ychg -= ry;
 80020aa:	2601      	movs	r6, #1

  x = 0;
  y = ry;
  
  xchg = ry;
  xchg *= ry;
 80020ac:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
  
  ychg = 1;
  ychg -= ry;
 80020ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  ychg -= ry;
  ychg *= rx;
  ychg *= rx;
 80020b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  
  xchg = ry;
  xchg *= ry;
  
  ychg = 1;
  ychg -= ry;
 80020b2:	1af6      	subs	r6, r6, r3
  ychg -= ry;
 80020b4:	1af6      	subs	r6, r6, r3
  ychg *= rx;
  ychg *= rx;
 80020b6:	4356      	muls	r6, r2
  err = 0;
  
  stopx = 0;

  stopy = rxrx2;
  stopy *= ry;
 80020b8:	4652      	mov	r2, sl
 80020ba:	4353      	muls	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4698      	mov	r8, r3
  

  while( stopx <= stopy )
 80020c0:	b21b      	sxth	r3, r3
  
  ychg = 1;
  ychg -= ry;
  ychg -= ry;
  ychg *= rx;
  ychg *= rx;
 80020c2:	b2b6      	uxth	r6, r6

  stopy = rxrx2;
  stopy *= ry;
  

  while( stopx <= stopy )
 80020c4:	4699      	mov	r9, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	db39      	blt.n	800213e <u8g2_DrawEllipse+0x172>
 80020ca:	2400      	movs	r4, #0
 80020cc:	2700      	movs	r7, #0
 80020ce:	9b08      	ldr	r3, [sp, #32]
 80020d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80020d2:	46a3      	mov	fp, r4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80020d8:	9307      	str	r3, [sp, #28]
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
 80020da:	9b05      	ldr	r3, [sp, #20]
 80020dc:	1c39      	adds	r1, r7, #0
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	9b06      	ldr	r3, [sp, #24]
 80020e2:	9803      	ldr	r0, [sp, #12]
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	1c22      	adds	r2, r4, #0
 80020e8:	9b04      	ldr	r3, [sp, #16]
 80020ea:	f7ff fe03 	bl	8001cf4 <u8g2_draw_ellipse_section>
 80020ee:	9b07      	ldr	r3, [sp, #28]
 80020f0:	b2ad      	uxth	r5, r5
 80020f2:	18eb      	adds	r3, r5, r3
 80020f4:	b29a      	uxth	r2, r3
    x++;
    stopx += ryry2;
    err += xchg;
 80020f6:	465b      	mov	r3, fp
 80020f8:	18eb      	adds	r3, r5, r3
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b299      	uxth	r1, r3
 80020fe:	468b      	mov	fp, r1
 8002100:	9908      	ldr	r1, [sp, #32]
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002102:	b230      	sxth	r0, r6
 8002104:	468c      	mov	ip, r1
 8002106:	4659      	mov	r1, fp
 8002108:	b209      	sxth	r1, r1
 800210a:	0049      	lsls	r1, r1, #1
  

  while( stopx <= stopy )
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
    x++;
 800210c:	3701      	adds	r7, #1
 800210e:	4465      	add	r5, ip
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002110:	1809      	adds	r1, r1, r0
  

  while( stopx <= stopy )
  {
    u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
    x++;
 8002112:	b2ff      	uxtb	r7, r7
 8002114:	b2ad      	uxth	r5, r5
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002116:	2900      	cmp	r1, #0
 8002118:	dd0e      	ble.n	8002138 <u8g2_DrawEllipse+0x16c>
    {
      y--;
      stopy -= rxrx2;
 800211a:	4641      	mov	r1, r8
 800211c:	4650      	mov	r0, sl
      err += ychg;
 800211e:	b2b6      	uxth	r6, r6
 8002120:	199b      	adds	r3, r3, r6
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
      stopy -= rxrx2;
 8002122:	1a09      	subs	r1, r1, r0
 8002124:	b289      	uxth	r1, r1
      err += ychg;
 8002126:	b29b      	uxth	r3, r3
 8002128:	469b      	mov	fp, r3
 800212a:	b20b      	sxth	r3, r1
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
      stopy -= rxrx2;
 800212c:	4688      	mov	r8, r1
 800212e:	4699      	mov	r9, r3
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
 8002130:	3c01      	subs	r4, #1
      stopy -= rxrx2;
      err += ychg;
      ychg += rxrx2;
 8002132:	4456      	add	r6, sl
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
 8002134:	b2e4      	uxtb	r4, r4
      stopy -= rxrx2;
      err += ychg;
      ychg += rxrx2;
 8002136:	b2b6      	uxth	r6, r6

  stopy = rxrx2;
  stopy *= ry;
  

  while( stopx <= stopy )
 8002138:	b213      	sxth	r3, r2
 800213a:	4599      	cmp	r9, r3
 800213c:	dacd      	bge.n	80020da <u8g2_DrawEllipse+0x10e>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_draw_ellipse(u8g2, x0, y0, rx, ry, option);
}
 800213e:	b00f      	add	sp, #60	; 0x3c
 8002140:	bc3c      	pop	{r2, r3, r4, r5}
 8002142:	4690      	mov	r8, r2
 8002144:	4699      	mov	r9, r3
 8002146:	46a2      	mov	sl, r4
 8002148:	46ab      	mov	fp, r5
 800214a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800214c <u8g2_DrawFilledEllipse>:
  }
  
}

void u8g2_DrawFilledEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	4656      	mov	r6, sl
 8002150:	464d      	mov	r5, r9
 8002152:	465f      	mov	r7, fp
 8002154:	4644      	mov	r4, r8
 8002156:	4699      	mov	r9, r3
 8002158:	b4f0      	push	{r4, r5, r6, r7}
 800215a:	b08f      	sub	sp, #60	; 0x3c
 800215c:	ab18      	add	r3, sp, #96	; 0x60
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	9104      	str	r1, [sp, #16]
 8002162:	930d      	str	r3, [sp, #52]	; 0x34
 8002164:	1c19      	adds	r1, r3, #0
 8002166:	ab19      	add	r3, sp, #100	; 0x64
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	9205      	str	r2, [sp, #20]
 800216c:	9306      	str	r3, [sp, #24]
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
  rxrx2 *= rx;
 800216e:	466a      	mov	r2, sp
 8002170:	464b      	mov	r3, r9
 8002172:	8393      	strh	r3, [r2, #28]
 8002174:	8b93      	ldrh	r3, [r2, #28]
  }
  
}

void u8g2_DrawFilledEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t option)
{
 8002176:	9003      	str	r0, [sp, #12]
  u8g2_long_t rxrx2;
  u8g2_long_t ryry2;
  u8g2_long_t stopx, stopy;
  
  rxrx2 = rx;
  rxrx2 *= rx;
 8002178:	1c1a      	adds	r2, r3, #0
 800217a:	435a      	muls	r2, r3
 800217c:	1c10      	adds	r0, r2, #0
 800217e:	920a      	str	r2, [sp, #40]	; 0x28
  rxrx2 *= 2;
 8002180:	0052      	lsls	r2, r2, #1
 8002182:	b292      	uxth	r2, r2
 8002184:	4692      	mov	sl, r2
  
  ryry2 = ry;
  ryry2 *= ry;
 8002186:	b28a      	uxth	r2, r1
 8002188:	1c11      	adds	r1, r2, #0
  
  x = rx;
  y = 0;
  
  xchg = 1;
  xchg -= rx;
 800218a:	2601      	movs	r6, #1
  rxrx2 = rx;
  rxrx2 *= rx;
  rxrx2 *= 2;
  
  ryry2 = ry;
  ryry2 *= ry;
 800218c:	4351      	muls	r1, r2
 800218e:	920c      	str	r2, [sp, #48]	; 0x30
  ryry2 *= 2;
 8002190:	004a      	lsls	r2, r1, #1
 8002192:	b292      	uxth	r2, r2
  
  x = rx;
  y = 0;
  
  xchg = 1;
  xchg -= rx;
 8002194:	1af6      	subs	r6, r6, r3
  xchg -= rx;
 8002196:	1af6      	subs	r6, r6, r3
  ychg *= rx;
  
  err = 0;
  
  stopx = ryry2;
  stopx *= rx;
 8002198:	4353      	muls	r3, r2
  
  xchg = 1;
  xchg -= rx;
  xchg -= rx;
  xchg *= ry;
  xchg *= ry;
 800219a:	434e      	muls	r6, r1
  ychg *= rx;
  
  err = 0;
  
  stopx = ryry2;
  stopx *= rx;
 800219c:	b29b      	uxth	r3, r3
 800219e:	4698      	mov	r8, r3
  stopy = 0;
  
  while( stopx >= stopy )
 80021a0:	b21b      	sxth	r3, r3
  rxrx2 = rx;
  rxrx2 *= rx;
  rxrx2 *= 2;
  
  ryry2 = ry;
  ryry2 *= ry;
 80021a2:	910b      	str	r1, [sp, #44]	; 0x2c
  ryry2 *= 2;
 80021a4:	9208      	str	r2, [sp, #32]
  
  xchg = 1;
  xchg -= rx;
  xchg -= rx;
  xchg *= ry;
  xchg *= ry;
 80021a6:	b2b6      	uxth	r6, r6
  
  ychg = rx;
  ychg *= rx;
 80021a8:	b285      	uxth	r5, r0
  
  stopx = ryry2;
  stopx *= rx;
  stopy = 0;
  
  while( stopx >= stopy )
 80021aa:	469b      	mov	fp, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db3b      	blt.n	8002228 <u8g2_DrawFilledEllipse+0xdc>
 80021b0:	4653      	mov	r3, sl
 80021b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021b4:	2400      	movs	r4, #0
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	9309      	str	r3, [sp, #36]	; 0x24
 80021ba:	464b      	mov	r3, r9
 80021bc:	2700      	movs	r7, #0
 80021be:	46a1      	mov	r9, r4
 80021c0:	1c1c      	adds	r4, r3, #0
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 80021c2:	9b05      	ldr	r3, [sp, #20]
 80021c4:	9803      	ldr	r0, [sp, #12]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	9b06      	ldr	r3, [sp, #24]
 80021ca:	1c21      	adds	r1, r4, #0
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	1c3a      	adds	r2, r7, #0
 80021d0:	9b04      	ldr	r3, [sp, #16]
 80021d2:	f7ff fe37 	bl	8001e44 <u8g2_draw_filled_ellipse_section>
 80021d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d8:	b2ad      	uxth	r5, r5
 80021da:	18eb      	adds	r3, r5, r3
 80021dc:	b29b      	uxth	r3, r3
 80021de:	9307      	str	r3, [sp, #28]
    y++;
    stopy += rxrx2;
    err += ychg;
 80021e0:	464b      	mov	r3, r9
 80021e2:	18eb      	adds	r3, r5, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b299      	uxth	r1, r3
 80021e8:	4689      	mov	r9, r1
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 80021ea:	b209      	sxth	r1, r1
 80021ec:	0049      	lsls	r1, r1, #1
 80021ee:	b230      	sxth	r0, r6
  stopy = 0;
  
  while( stopx >= stopy )
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
    y++;
 80021f0:	3701      	adds	r7, #1
 80021f2:	4455      	add	r5, sl
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 80021f4:	1809      	adds	r1, r1, r0
  stopy = 0;
  
  while( stopx >= stopy )
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
    y++;
 80021f6:	b2ff      	uxtb	r7, r7
 80021f8:	b2ad      	uxth	r5, r5
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
 80021fa:	2900      	cmp	r1, #0
 80021fc:	dd0f      	ble.n	800221e <u8g2_DrawFilledEllipse+0xd2>
    {
      x--;
      stopx -= ryry2;
 80021fe:	4642      	mov	r2, r8
 8002200:	9808      	ldr	r0, [sp, #32]
      err += xchg;
 8002202:	b2b6      	uxth	r6, r6
 8002204:	199b      	adds	r3, r3, r6
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
 8002206:	1a11      	subs	r1, r2, r0
 8002208:	b28a      	uxth	r2, r1
      err += xchg;
 800220a:	b29b      	uxth	r3, r3
      xchg += ryry2;      
 800220c:	4684      	mov	ip, r0
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
      err += xchg;
 800220e:	4699      	mov	r9, r3
 8002210:	b213      	sxth	r3, r2
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
      stopx -= ryry2;
 8002212:	4690      	mov	r8, r2
 8002214:	469b      	mov	fp, r3
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
 8002216:	3c01      	subs	r4, #1
      stopx -= ryry2;
      err += xchg;
      xchg += ryry2;      
 8002218:	4466      	add	r6, ip
    stopy += rxrx2;
    err += ychg;
    ychg += rxrx2;
    if ( 2*err+xchg > 0 )
    {
      x--;
 800221a:	b2e4      	uxtb	r4, r4
      stopx -= ryry2;
      err += xchg;
      xchg += ryry2;      
 800221c:	b2b6      	uxth	r6, r6
  
  stopx = ryry2;
  stopx *= rx;
  stopy = 0;
  
  while( stopx >= stopy )
 800221e:	466b      	mov	r3, sp
 8002220:	8b9b      	ldrh	r3, [r3, #28]
 8002222:	b21b      	sxth	r3, r3
 8002224:	455b      	cmp	r3, fp
 8002226:	ddcc      	ble.n	80021c2 <u8g2_DrawFilledEllipse+0x76>

  x = 0;
  y = ry;
  
  xchg = ry;
  xchg *= ry;
 8002228:	466b      	mov	r3, sp
  
  ychg = 1;
  ychg -= ry;
 800222a:	2601      	movs	r6, #1

  x = 0;
  y = ry;
  
  xchg = ry;
  xchg *= ry;
 800222c:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
  
  ychg = 1;
  ychg -= ry;
 800222e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  ychg -= ry;
  ychg *= rx;
  ychg *= rx;
 8002230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  
  xchg = ry;
  xchg *= ry;
  
  ychg = 1;
  ychg -= ry;
 8002232:	1af6      	subs	r6, r6, r3
  ychg -= ry;
 8002234:	1af6      	subs	r6, r6, r3
  ychg *= rx;
  ychg *= rx;
 8002236:	4356      	muls	r6, r2
  err = 0;
  
  stopx = 0;

  stopy = rxrx2;
  stopy *= ry;
 8002238:	4652      	mov	r2, sl
 800223a:	4353      	muls	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	4698      	mov	r8, r3
  

  while( stopx <= stopy )
 8002240:	b21b      	sxth	r3, r3
  
  ychg = 1;
  ychg -= ry;
  ychg -= ry;
  ychg *= rx;
  ychg *= rx;
 8002242:	b2b6      	uxth	r6, r6

  stopy = rxrx2;
  stopy *= ry;
  

  while( stopx <= stopy )
 8002244:	4699      	mov	r9, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	db39      	blt.n	80022be <u8g2_DrawFilledEllipse+0x172>
 800224a:	2400      	movs	r4, #0
 800224c:	2700      	movs	r7, #0
 800224e:	9b08      	ldr	r3, [sp, #32]
 8002250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002252:	46a3      	mov	fp, r4
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002258:	9307      	str	r3, [sp, #28]
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 800225a:	9b05      	ldr	r3, [sp, #20]
 800225c:	1c39      	adds	r1, r7, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	9b06      	ldr	r3, [sp, #24]
 8002262:	9803      	ldr	r0, [sp, #12]
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	1c22      	adds	r2, r4, #0
 8002268:	9b04      	ldr	r3, [sp, #16]
 800226a:	f7ff fdeb 	bl	8001e44 <u8g2_draw_filled_ellipse_section>
 800226e:	9b07      	ldr	r3, [sp, #28]
 8002270:	b2ad      	uxth	r5, r5
 8002272:	18eb      	adds	r3, r5, r3
 8002274:	b29a      	uxth	r2, r3
    x++;
    stopx += ryry2;
    err += xchg;
 8002276:	465b      	mov	r3, fp
 8002278:	18eb      	adds	r3, r5, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	b299      	uxth	r1, r3
 800227e:	468b      	mov	fp, r1
 8002280:	9908      	ldr	r1, [sp, #32]
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002282:	b230      	sxth	r0, r6
 8002284:	468c      	mov	ip, r1
 8002286:	4659      	mov	r1, fp
 8002288:	b209      	sxth	r1, r1
 800228a:	0049      	lsls	r1, r1, #1
  

  while( stopx <= stopy )
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
    x++;
 800228c:	3701      	adds	r7, #1
 800228e:	4465      	add	r5, ip
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002290:	1809      	adds	r1, r1, r0
  

  while( stopx <= stopy )
  {
    u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
    x++;
 8002292:	b2ff      	uxtb	r7, r7
 8002294:	b2ad      	uxth	r5, r5
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
 8002296:	2900      	cmp	r1, #0
 8002298:	dd0e      	ble.n	80022b8 <u8g2_DrawFilledEllipse+0x16c>
    {
      y--;
      stopy -= rxrx2;
 800229a:	4641      	mov	r1, r8
 800229c:	4650      	mov	r0, sl
      err += ychg;
 800229e:	b2b6      	uxth	r6, r6
 80022a0:	199b      	adds	r3, r3, r6
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
      stopy -= rxrx2;
 80022a2:	1a09      	subs	r1, r1, r0
 80022a4:	b289      	uxth	r1, r1
      err += ychg;
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	469b      	mov	fp, r3
 80022aa:	b20b      	sxth	r3, r1
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
      stopy -= rxrx2;
 80022ac:	4688      	mov	r8, r1
 80022ae:	4699      	mov	r9, r3
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
 80022b0:	3c01      	subs	r4, #1
      stopy -= rxrx2;
      err += ychg;
      ychg += rxrx2;
 80022b2:	4456      	add	r6, sl
    stopx += ryry2;
    err += xchg;
    xchg += ryry2;
    if ( 2*err+ychg > 0 )
    {
      y--;
 80022b4:	b2e4      	uxtb	r4, r4
      stopy -= rxrx2;
      err += ychg;
      ychg += rxrx2;
 80022b6:	b2b6      	uxth	r6, r6

  stopy = rxrx2;
  stopy *= ry;
  

  while( stopx <= stopy )
 80022b8:	b213      	sxth	r3, r2
 80022ba:	4599      	cmp	r9, r3
 80022bc:	dacd      	bge.n	800225a <u8g2_DrawFilledEllipse+0x10e>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_draw_filled_ellipse(u8g2, x0, y0, rx, ry, option);
}
 80022be:	b00f      	add	sp, #60	; 0x3c
 80022c0:	bc3c      	pop	{r2, r3, r4, r5}
 80022c2:	4690      	mov	r8, r2
 80022c4:	4699      	mov	r9, r3
 80022c6:	46a2      	mov	sl, r4
 80022c8:	46ab      	mov	fp, r5
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022cc <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80022cc:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80022ce:	2300      	movs	r3, #0
 80022d0:	6944      	ldr	r4, [r0, #20]
 80022d2:	47a0      	blx	r4
}
 80022d4:	bd10      	pop	{r4, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)

080022d8 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	1c04      	adds	r4, r0, #0
 80022dc:	1c0e      	adds	r6, r1, #0
 80022de:	1c15      	adds	r5, r2, #0
    u8x8_byte_StartTransfer(u8x8);    
 80022e0:	f000 fcf6 	bl	8002cd0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80022e4:	1c20      	adds	r0, r4, #0
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	f000 fce8 	bl	8002cbc <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80022ec:	1c32      	adds	r2, r6, #0
 80022ee:	1c2b      	adds	r3, r5, #0
 80022f0:	2117      	movs	r1, #23
 80022f2:	6925      	ldr	r5, [r4, #16]
 80022f4:	1c20      	adds	r0, r4, #0
 80022f6:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
 80022f8:	1c20      	adds	r0, r4, #0
 80022fa:	f000 fcf1 	bl	8002ce0 <u8x8_byte_EndTransfer>
}
 80022fe:	bd70      	pop	{r4, r5, r6, pc}

08002300 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	1c0a      	adds	r2, r1, #0
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002304:	68c4      	ldr	r4, [r0, #12]
 8002306:	2115      	movs	r1, #21
 8002308:	2300      	movs	r3, #0
 800230a:	47a0      	blx	r4
}
 800230c:	bd10      	pop	{r4, pc}
 800230e:	46c0      	nop			; (mov r8, r8)

08002310 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002310:	b510      	push	{r4, lr}
 8002312:	1c0a      	adds	r2, r1, #0
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002314:	68c4      	ldr	r4, [r0, #12]
 8002316:	2116      	movs	r1, #22
 8002318:	2300      	movs	r3, #0
 800231a:	47a0      	blx	r4
}
 800231c:	bd10      	pop	{r4, pc}
 800231e:	46c0      	nop			; (mov r8, r8)

08002320 <u8x8_cad_SendMultipleArg>:

uint8_t u8x8_cad_SendMultipleArg(u8x8_t *u8x8, uint8_t cnt, uint8_t arg)
{
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002322:	1c05      	adds	r5, r0, #0
 8002324:	1c0c      	adds	r4, r1, #0
 8002326:	1c16      	adds	r6, r2, #0
  while( cnt > 0 )
 8002328:	2900      	cmp	r1, #0
 800232a:	d009      	beq.n	8002340 <u8x8_cad_SendMultipleArg+0x20>
  {
    u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    cnt--;
 800232c:	3c01      	subs	r4, #1

uint8_t u8x8_cad_SendMultipleArg(u8x8_t *u8x8, uint8_t cnt, uint8_t arg)
{
  while( cnt > 0 )
  {
    u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800232e:	1c28      	adds	r0, r5, #0
 8002330:	2116      	movs	r1, #22
 8002332:	1c32      	adds	r2, r6, #0
 8002334:	2300      	movs	r3, #0
 8002336:	68ef      	ldr	r7, [r5, #12]
    cnt--;
 8002338:	b2e4      	uxtb	r4, r4

uint8_t u8x8_cad_SendMultipleArg(u8x8_t *u8x8, uint8_t cnt, uint8_t arg)
{
  while( cnt > 0 )
  {
    u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800233a:	47b8      	blx	r7
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
}

uint8_t u8x8_cad_SendMultipleArg(u8x8_t *u8x8, uint8_t cnt, uint8_t arg)
{
  while( cnt > 0 )
 800233c:	2c00      	cmp	r4, #0
 800233e:	d1f5      	bne.n	800232c <u8x8_cad_SendMultipleArg+0xc>
  {
    u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    cnt--;
  }
  return 1;
}
 8002340:	2001      	movs	r0, #1
 8002342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002344 <u8x8_cad_SendData>:

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	1c0d      	adds	r5, r1, #0
 8002348:	1c13      	adds	r3, r2, #0
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800234a:	68c4      	ldr	r4, [r0, #12]
 800234c:	1c2a      	adds	r2, r5, #0
 800234e:	2117      	movs	r1, #23
 8002350:	47a0      	blx	r4
}
 8002352:	bd38      	pop	{r3, r4, r5, pc}

08002354 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002354:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002356:	2118      	movs	r1, #24
 8002358:	68c4      	ldr	r4, [r0, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	2300      	movs	r3, #0
 800235e:	47a0      	blx	r4
}
 8002360:	bd10      	pop	{r4, pc}
 8002362:	46c0      	nop			; (mov r8, r8)

08002364 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002364:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002366:	2119      	movs	r1, #25
 8002368:	68c4      	ldr	r4, [r0, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	2300      	movs	r3, #0
 800236e:	47a0      	blx	r4
}
 8002370:	bd10      	pop	{r4, pc}
 8002372:	46c0      	nop			; (mov r8, r8)

08002374 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002376:	b083      	sub	sp, #12
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
 8002378:	466b      	mov	r3, sp
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800237a:	1c05      	adds	r5, r0, #0
 800237c:	1c0c      	adds	r4, r1, #0
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
 800237e:	1dde      	adds	r6, r3, #7
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002380:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 8002382:	2917      	cmp	r1, #23
 8002384:	d00f      	beq.n	80023a6 <u8x8_cad_SendSequence+0x32>
 8002386:	2917      	cmp	r1, #23
 8002388:	d916      	bls.n	80023b8 <u8x8_cad_SendSequence+0x44>
 800238a:	2919      	cmp	r1, #25
 800238c:	d920      	bls.n	80023d0 <u8x8_cad_SendSequence+0x5c>
 800238e:	29fe      	cmp	r1, #254	; 0xfe
 8002390:	d11c      	bne.n	80023cc <u8x8_cad_SendSequence+0x58>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
 8002392:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002394:	2129      	movs	r1, #41	; 0x29
 8002396:	1c28      	adds	r0, r5, #0
	  data++;
 8002398:	3402      	adds	r4, #2
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
 800239a:	7032      	strb	r2, [r6, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800239c:	f7ff ff96 	bl	80022cc <u8x8_gpio_call>
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80023a0:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 80023a2:	2917      	cmp	r1, #23
 80023a4:	d1ef      	bne.n	8002386 <u8x8_cad_SendSequence+0x12>
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
 80023a6:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80023a8:	1c28      	adds	r0, r5, #0
 80023aa:	2101      	movs	r1, #1
 80023ac:	1c32      	adds	r2, r6, #0
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
 80023ae:	7033      	strb	r3, [r6, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
 80023b0:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
 80023b2:	f7ff ffc7 	bl	8002344 <u8x8_cad_SendData>
	  data++;
	  break;
 80023b6:	e7e3      	b.n	8002380 <u8x8_cad_SendSequence+0xc>

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
 80023b8:	2915      	cmp	r1, #21
 80023ba:	d307      	bcc.n	80023cc <u8x8_cad_SendSequence+0x58>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
 80023bc:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80023be:	1c28      	adds	r0, r5, #0
    data++;
    switch( cmd )
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
 80023c0:	7032      	strb	r2, [r6, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80023c2:	2300      	movs	r3, #0
 80023c4:	68ef      	ldr	r7, [r5, #12]
 80023c6:	47b8      	blx	r7
	  data++;
 80023c8:	3402      	adds	r4, #2
	  break;
 80023ca:	e7d9      	b.n	8002380 <u8x8_cad_SendSequence+0xc>
	  break;
      default:
	return;
    }
  }
}
 80023cc:	b003      	add	sp, #12
 80023ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80023d0:	1c28      	adds	r0, r5, #0
 80023d2:	2200      	movs	r2, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	68ef      	ldr	r7, [r5, #12]
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    data++;
 80023d8:	3401      	adds	r4, #1
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80023da:	47b8      	blx	r7
	  break;
 80023dc:	e7d0      	b.n	8002380 <u8x8_cad_SendSequence+0xc>
 80023de:	46c0      	nop			; (mov r8, r8)

080023e0 <u8x8_cad_empty>:
  }
}


uint8_t u8x8_cad_empty(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80023e0:	b538      	push	{r3, r4, r5, lr}
  switch(msg)
 80023e2:	1c0c      	adds	r4, r1, #0
 80023e4:	3c14      	subs	r4, #20
 80023e6:	b2e4      	uxtb	r4, r4
 80023e8:	2c05      	cmp	r4, #5
 80023ea:	d80b      	bhi.n	8002404 <u8x8_cad_empty+0x24>
 80023ec:	4d06      	ldr	r5, [pc, #24]	; (8002408 <u8x8_cad_empty+0x28>)
 80023ee:	00a4      	lsls	r4, r4, #2
 80023f0:	592c      	ldr	r4, [r5, r4]
 80023f2:	46a7      	mov	pc, r4
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80023f4:	1c11      	adds	r1, r2, #0
 80023f6:	f000 fc61 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80023fa:	2001      	movs	r0, #1
}
 80023fc:	bd38      	pop	{r3, r4, r5, pc}
      break;
    case U8X8_MSG_CAD_SEND_DATA:
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80023fe:	6904      	ldr	r4, [r0, #16]
 8002400:	47a0      	blx	r4
 8002402:	e7fb      	b.n	80023fc <u8x8_cad_empty+0x1c>
    default:
      return 0;
 8002404:	2000      	movs	r0, #0
 8002406:	e7f9      	b.n	80023fc <u8x8_cad_empty+0x1c>
 8002408:	080050e4 	.word	0x080050e4

0800240c <u8x8_cad_110>:
  convert to bytes by using 
    dc = 1 for commands and args and
    dc = 0 for data
*/
uint8_t u8x8_cad_110(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(msg)
 800240e:	1c0c      	adds	r4, r1, #0
  convert to bytes by using 
    dc = 1 for commands and args and
    dc = 0 for data
*/
uint8_t u8x8_cad_110(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002410:	4647      	mov	r7, r8
  switch(msg)
 8002412:	3c14      	subs	r4, #20
 8002414:	b2e4      	uxtb	r4, r4
  convert to bytes by using 
    dc = 1 for commands and args and
    dc = 0 for data
*/
uint8_t u8x8_cad_110(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002416:	b480      	push	{r7}
  switch(msg)
 8002418:	2c05      	cmp	r4, #5
 800241a:	d81c      	bhi.n	8002456 <u8x8_cad_110+0x4a>
 800241c:	1c1f      	adds	r7, r3, #0
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <u8x8_cad_110+0x50>)
 8002420:	00a4      	lsls	r4, r4, #2
 8002422:	591b      	ldr	r3, [r3, r4]
 8002424:	4690      	mov	r8, r2
 8002426:	1c0e      	adds	r6, r1, #0
 8002428:	1c05      	adds	r5, r0, #0
 800242a:	469f      	mov	pc, r3
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 800242c:	2101      	movs	r1, #1
 800242e:	f000 fc35 	bl	8002c9c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002432:	1c28      	adds	r0, r5, #0
 8002434:	4641      	mov	r1, r8
 8002436:	f000 fc41 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 800243a:	2001      	movs	r0, #1
}
 800243c:	bc04      	pop	{r2}
 800243e:	4690      	mov	r8, r2
 8002440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 0);
 8002442:	2100      	movs	r1, #0
 8002444:	f000 fc2a 	bl	8002c9c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002448:	692c      	ldr	r4, [r5, #16]
 800244a:	1c28      	adds	r0, r5, #0
 800244c:	1c31      	adds	r1, r6, #0
 800244e:	4642      	mov	r2, r8
 8002450:	1c3b      	adds	r3, r7, #0
 8002452:	47a0      	blx	r4
 8002454:	e7f2      	b.n	800243c <u8x8_cad_110+0x30>
    default:
      return 0;
 8002456:	2000      	movs	r0, #0
 8002458:	e7f0      	b.n	800243c <u8x8_cad_110+0x30>
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	080050fc 	.word	0x080050fc

08002460 <u8x8_cad_100>:
    dc = 1 for commands and args and
    dc = 0 for data
    t6963
*/
uint8_t u8x8_cad_100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(msg)
 8002462:	1c0c      	adds	r4, r1, #0
    dc = 1 for commands and args and
    dc = 0 for data
    t6963
*/
uint8_t u8x8_cad_100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002464:	4647      	mov	r7, r8
  switch(msg)
 8002466:	3c14      	subs	r4, #20
 8002468:	b2e4      	uxtb	r4, r4
    dc = 1 for commands and args and
    dc = 0 for data
    t6963
*/
uint8_t u8x8_cad_100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800246a:	b480      	push	{r7}
  switch(msg)
 800246c:	2c05      	cmp	r4, #5
 800246e:	d81e      	bhi.n	80024ae <u8x8_cad_100+0x4e>
 8002470:	1c1f      	adds	r7, r3, #0
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <u8x8_cad_100+0x54>)
 8002474:	00a4      	lsls	r4, r4, #2
 8002476:	591b      	ldr	r3, [r3, r4]
 8002478:	4690      	mov	r8, r2
 800247a:	1c0e      	adds	r6, r1, #0
 800247c:	1c05      	adds	r5, r0, #0
 800247e:	469f      	mov	pc, r3
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 0);
 8002480:	2100      	movs	r1, #0
 8002482:	f000 fc0b 	bl	8002c9c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002486:	692c      	ldr	r4, [r5, #16]
 8002488:	1c28      	adds	r0, r5, #0
 800248a:	1c31      	adds	r1, r6, #0
 800248c:	4642      	mov	r2, r8
 800248e:	1c3b      	adds	r3, r7, #0
 8002490:	47a0      	blx	r4
    default:
      return 0;
  }
  return 1;
}
 8002492:	bc04      	pop	{r2}
 8002494:	4690      	mov	r8, r2
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002498:	2100      	movs	r1, #0
 800249a:	f000 fbff 	bl	8002c9c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800249e:	1c28      	adds	r0, r5, #0
 80024a0:	4641      	mov	r1, r8
 80024a2:	f000 fc0b 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80024a6:	2001      	movs	r0, #1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80024a8:	e7f3      	b.n	8002492 <u8x8_cad_100+0x32>
uint8_t u8x8_cad_100(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 1);
 80024aa:	2101      	movs	r1, #1
 80024ac:	e7f5      	b.n	800249a <u8x8_cad_100+0x3a>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
 80024ae:	2000      	movs	r0, #0
 80024b0:	e7ef      	b.n	8002492 <u8x8_cad_100+0x32>
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	08005114 	.word	0x08005114

080024b8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(msg)
 80024ba:	1c0c      	adds	r4, r1, #0
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80024bc:	4647      	mov	r7, r8
  switch(msg)
 80024be:	3c14      	subs	r4, #20
 80024c0:	b2e4      	uxtb	r4, r4
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80024c2:	b480      	push	{r7}
  switch(msg)
 80024c4:	2c05      	cmp	r4, #5
 80024c6:	d81c      	bhi.n	8002502 <u8x8_cad_001+0x4a>
 80024c8:	1c1f      	adds	r7, r3, #0
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <u8x8_cad_001+0x50>)
 80024cc:	00a4      	lsls	r4, r4, #2
 80024ce:	591b      	ldr	r3, [r3, r4]
 80024d0:	4690      	mov	r8, r2
 80024d2:	1c0e      	adds	r6, r1, #0
 80024d4:	1c05      	adds	r5, r0, #0
 80024d6:	469f      	mov	pc, r3
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80024d8:	2100      	movs	r1, #0
 80024da:	f000 fbdf 	bl	8002c9c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80024de:	1c28      	adds	r0, r5, #0
 80024e0:	4641      	mov	r1, r8
 80024e2:	f000 fbeb 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80024e6:	2001      	movs	r0, #1
}
 80024e8:	bc04      	pop	{r2}
 80024ea:	4690      	mov	r8, r2
 80024ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	f000 fbd4 	bl	8002c9c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80024f4:	692c      	ldr	r4, [r5, #16]
 80024f6:	1c28      	adds	r0, r5, #0
 80024f8:	1c31      	adds	r1, r6, #0
 80024fa:	4642      	mov	r2, r8
 80024fc:	1c3b      	adds	r3, r7, #0
 80024fe:	47a0      	blx	r4
 8002500:	e7f2      	b.n	80024e8 <u8x8_cad_001+0x30>
    default:
      return 0;
 8002502:	2000      	movs	r0, #0
 8002504:	e7f0      	b.n	80024e8 <u8x8_cad_001+0x30>
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	0800512c 	.word	0x0800512c

0800250c <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800250c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(msg)
 800250e:	1c0c      	adds	r4, r1, #0
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002510:	4647      	mov	r7, r8
  switch(msg)
 8002512:	3c14      	subs	r4, #20
 8002514:	b2e4      	uxtb	r4, r4
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002516:	b480      	push	{r7}
  switch(msg)
 8002518:	2c05      	cmp	r4, #5
 800251a:	d81e      	bhi.n	800255a <u8x8_cad_011+0x4e>
 800251c:	1c1f      	adds	r7, r3, #0
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <u8x8_cad_011+0x54>)
 8002520:	00a4      	lsls	r4, r4, #2
 8002522:	591b      	ldr	r3, [r3, r4]
 8002524:	4690      	mov	r8, r2
 8002526:	1c0e      	adds	r6, r1, #0
 8002528:	1c05      	adds	r5, r0, #0
 800252a:	469f      	mov	pc, r3
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800252c:	2101      	movs	r1, #1
 800252e:	f000 fbb5 	bl	8002c9c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002532:	692c      	ldr	r4, [r5, #16]
 8002534:	1c28      	adds	r0, r5, #0
 8002536:	1c31      	adds	r1, r6, #0
 8002538:	4642      	mov	r2, r8
 800253a:	1c3b      	adds	r3, r7, #0
 800253c:	47a0      	blx	r4
    default:
      return 0;
  }
  return 1;
}
 800253e:	bc04      	pop	{r2}
 8002540:	4690      	mov	r8, r2
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8002544:	2101      	movs	r1, #1
 8002546:	f000 fba9 	bl	8002c9c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800254a:	1c28      	adds	r0, r5, #0
 800254c:	4641      	mov	r1, r8
 800254e:	f000 fbb5 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 8002552:	2001      	movs	r0, #1
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002554:	e7f3      	b.n	800253e <u8x8_cad_011+0x32>
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002556:	2100      	movs	r1, #0
 8002558:	e7f5      	b.n	8002546 <u8x8_cad_011+0x3a>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
 800255a:	2000      	movs	r0, #0
 800255c:	e7ef      	b.n	800253e <u8x8_cad_011+0x32>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	08005144 	.word	0x08005144

08002564 <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	4657      	mov	r7, sl
 8002568:	464e      	mov	r6, r9
 800256a:	4645      	mov	r5, r8
 800256c:	b4e0      	push	{r5, r6, r7}
 800256e:	1c1f      	adds	r7, r3, #0
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 8002570:	1c0b      	adds	r3, r1, #0
 8002572:	3b14      	subs	r3, #20
 8002574:	b2db      	uxtb	r3, r3
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002576:	4680      	mov	r8, r0
 8002578:	4691      	mov	r9, r2
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 800257a:	2b05      	cmp	r3, #5
 800257c:	d900      	bls.n	8002580 <u8x8_cad_st7920_spi+0x1c>
 800257e:	e086      	b.n	800268e <u8x8_cad_st7920_spi+0x12a>
 8002580:	4a44      	ldr	r2, [pc, #272]	; (8002694 <u8x8_cad_st7920_spi+0x130>)
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	58d3      	ldr	r3, [r2, r3]
 8002586:	469f      	mov	pc, r3
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
      u8x8_byte_SendByte(u8x8, arg_int << 4);
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002588:	21f8      	movs	r1, #248	; 0xf8
 800258a:	f000 fb97 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 800258e:	230f      	movs	r3, #15
 8002590:	4649      	mov	r1, r9
 8002592:	4640      	mov	r0, r8
 8002594:	4399      	bics	r1, r3
 8002596:	f000 fb91 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 800259a:	464b      	mov	r3, r9
 800259c:	0119      	lsls	r1, r3, #4
 800259e:	b2c9      	uxtb	r1, r1
 80025a0:	4640      	mov	r0, r8
 80025a2:	f000 fb8b 	bl	8002cbc <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80025a6:	2001      	movs	r0, #1
}
 80025a8:	bc1c      	pop	{r2, r3, r4}
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	46a2      	mov	sl, r4
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t *ptr;
  
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 80025b2:	21f8      	movs	r1, #248	; 0xf8
 80025b4:	f000 fb82 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 80025b8:	2201      	movs	r2, #1
 80025ba:	4640      	mov	r0, r8
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	f7ff fe85 	bl	80022cc <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 80025c2:	230f      	movs	r3, #15
 80025c4:	4649      	mov	r1, r9
 80025c6:	4640      	mov	r0, r8
 80025c8:	4399      	bics	r1, r3
 80025ca:	f000 fb77 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 80025ce:	4640      	mov	r0, r8
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	2201      	movs	r2, #1
 80025d4:	f7ff fe7a 	bl	80022cc <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 80025d8:	464b      	mov	r3, r9
 80025da:	0119      	lsls	r1, r3, #4
 80025dc:	b2c9      	uxtb	r1, r1
 80025de:	4640      	mov	r0, r8
 80025e0:	f000 fb6c 	bl	8002cbc <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
	u8x8_byte_SendByte(u8x8, b << 4);
	data++;
	arg_int--;
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 80025e4:	4640      	mov	r0, r8
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	2201      	movs	r2, #1
 80025ea:	f7ff fe6f 	bl	80022cc <u8x8_gpio_call>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
 80025ee:	2001      	movs	r0, #1
	u8x8_byte_SendByte(u8x8, b << 4);
	data++;
	arg_int--;
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
      break;
 80025f0:	e7da      	b.n	80025a8 <u8x8_cad_st7920_spi+0x44>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80025f2:	6904      	ldr	r4, [r0, #16]
 80025f4:	464a      	mov	r2, r9
 80025f6:	1c3b      	adds	r3, r7, #0
 80025f8:	47a0      	blx	r4
 80025fa:	e7d5      	b.n	80025a8 <u8x8_cad_st7920_spi+0x44>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
      u8x8_byte_SendByte(u8x8, arg_int << 4);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 80025fc:	21fa      	movs	r1, #250	; 0xfa
 80025fe:	f000 fb5d 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002602:	4640      	mov	r0, r8
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	2201      	movs	r2, #1
 8002608:	f7ff fe60 	bl	80022cc <u8x8_gpio_call>
      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 800260c:	464b      	mov	r3, r9
 800260e:	2b07      	cmp	r3, #7
 8002610:	d925      	bls.n	800265e <u8x8_cad_st7920_spi+0xfa>
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <u8x8_cad_st7920_spi+0x134>)
 8002614:	464e      	mov	r6, r9
 8002616:	1c3c      	adds	r4, r7, #0
 8002618:	469a      	mov	sl, r3
	i = 8;
	ptr = buf;
	do
	{
	  b = *data++;
	  *ptr++= b & 0x0f0;
 800261a:	250f      	movs	r5, #15
 800261c:	4652      	mov	r2, sl
 800261e:	1c21      	adds	r1, r4, #0
 8002620:	3408      	adds	r4, #8
      {
	i = 8;
	ptr = buf;
	do
	{
	  b = *data++;
 8002622:	780b      	ldrb	r3, [r1, #0]
 8002624:	3101      	adds	r1, #1
	  *ptr++= b & 0x0f0;
 8002626:	1c18      	adds	r0, r3, #0
	  b <<= 4;
 8002628:	011b      	lsls	r3, r3, #4
	i = 8;
	ptr = buf;
	do
	{
	  b = *data++;
	  *ptr++= b & 0x0f0;
 800262a:	43a8      	bics	r0, r5
 800262c:	7010      	strb	r0, [r2, #0]
	  b <<= 4;
	  *ptr++= b;
 800262e:	7053      	strb	r3, [r2, #1]
 8002630:	3202      	adds	r2, #2
	  i--;
	} while( i > 0 );
 8002632:	428c      	cmp	r4, r1
 8002634:	d1f5      	bne.n	8002622 <u8x8_cad_st7920_spi+0xbe>
	arg_int -= 8;
 8002636:	3e08      	subs	r6, #8
 8002638:	b2f6      	uxtb	r6, r6
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 800263a:	4640      	mov	r0, r8
 800263c:	2110      	movs	r1, #16
 800263e:	4652      	mov	r2, sl
 8002640:	f000 fb34 	bl	8002cac <u8x8_byte_SendBytes>
      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 8002644:	2e07      	cmp	r6, #7
 8002646:	d8e9      	bhi.n	800261c <u8x8_cad_st7920_spi+0xb8>
 8002648:	464b      	mov	r3, r9
 800264a:	3b08      	subs	r3, #8
 800264c:	b2db      	uxtb	r3, r3
 800264e:	08db      	lsrs	r3, r3, #3
 8002650:	3301      	adds	r3, #1
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	464a      	mov	r2, r9
 8002656:	18ff      	adds	r7, r7, r3
 8002658:	2307      	movs	r3, #7
 800265a:	401a      	ands	r2, r3
 800265c:	4691      	mov	r9, r2
	arg_int -= 8;
	u8x8_byte_SendBytes(u8x8, 16, buf); 
      }
      
    
      while( arg_int > 0 )
 800265e:	464b      	mov	r3, r9
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0bf      	beq.n	80025e4 <u8x8_cad_st7920_spi+0x80>
 8002664:	464d      	mov	r5, r9
      {
	b = *data;
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002666:	260f      	movs	r6, #15
 8002668:	3d01      	subs	r5, #1
 800266a:	b2ed      	uxtb	r5, r5
 800266c:	3501      	adds	r5, #1
 800266e:	197d      	adds	r5, r7, r5
      }
      
    
      while( arg_int > 0 )
      {
	b = *data;
 8002670:	783c      	ldrb	r4, [r7, #0]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002672:	4640      	mov	r0, r8
 8002674:	1c21      	adds	r1, r4, #0
	u8x8_byte_SendByte(u8x8, b << 4);
 8002676:	0124      	lsls	r4, r4, #4
      
    
      while( arg_int > 0 )
      {
	b = *data;
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002678:	43b1      	bics	r1, r6
 800267a:	f000 fb1f 	bl	8002cbc <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
	data++;
 800267e:	3701      	adds	r7, #1
    
      while( arg_int > 0 )
      {
	b = *data;
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
	u8x8_byte_SendByte(u8x8, b << 4);
 8002680:	b2e1      	uxtb	r1, r4
 8002682:	4640      	mov	r0, r8
 8002684:	f000 fb1a 	bl	8002cbc <u8x8_byte_SendByte>
	arg_int -= 8;
	u8x8_byte_SendBytes(u8x8, 16, buf); 
      }
      
    
      while( arg_int > 0 )
 8002688:	42af      	cmp	r7, r5
 800268a:	d1f1      	bne.n	8002670 <u8x8_cad_st7920_spi+0x10c>
 800268c:	e7aa      	b.n	80025e4 <u8x8_cad_st7920_spi+0x80>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
 800268e:	2000      	movs	r0, #0
 8002690:	e78a      	b.n	80025a8 <u8x8_cad_st7920_spi+0x44>
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	0800515c 	.word	0x0800515c
 8002698:	2000001c 	.word	0x2000001c

0800269c <u8x8_cad_ssd13xx_i2c>:
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t *p;
  switch(msg)
 800269c:	3914      	subs	r1, #20
 800269e:	b2c9      	uxtb	r1, r1
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	1c06      	adds	r6, r0, #0
 80026a4:	1c14      	adds	r4, r2, #0
 80026a6:	1c1d      	adds	r5, r3, #0
  uint8_t *p;
  switch(msg)
 80026a8:	2905      	cmp	r1, #5
 80026aa:	d830      	bhi.n	800270e <u8x8_cad_ssd13xx_i2c+0x72>
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <u8x8_cad_ssd13xx_i2c+0x78>)
 80026ae:	0089      	lsls	r1, r1, #2
 80026b0:	585b      	ldr	r3, [r3, r1]
 80026b2:	469f      	mov	pc, r3
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80026b4:	1c2a      	adds	r2, r5, #0
 80026b6:	2118      	movs	r1, #24
 80026b8:	f7ff fe0e 	bl	80022d8 <u8x8_i2c_data_transfer>
	arg_int-=24;
 80026bc:	3c18      	subs	r4, #24
 80026be:	b2e4      	uxtb	r4, r4
	p+=24;
 80026c0:	3518      	adds	r5, #24
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80026c2:	1c30      	adds	r0, r6, #0
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
 80026c4:	2c18      	cmp	r4, #24
 80026c6:	d8f5      	bhi.n	80026b4 <u8x8_cad_ssd13xx_i2c+0x18>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80026c8:	1c21      	adds	r1, r4, #0
 80026ca:	1c2a      	adds	r2, r5, #0
 80026cc:	f7ff fe04 	bl	80022d8 <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
 80026d0:	2001      	movs	r0, #1
}
 80026d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 80026d4:	f000 fafc 	bl	8002cd0 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 80026d8:	2100      	movs	r1, #0
 80026da:	1c30      	adds	r0, r6, #0
 80026dc:	f000 faee 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80026e0:	1c21      	adds	r1, r4, #0
 80026e2:	1c30      	adds	r0, r6, #0
 80026e4:	f000 faea 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 80026e8:	1c30      	adds	r0, r6, #0
 80026ea:	f000 faf9 	bl	8002ce0 <u8x8_byte_EndTransfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
 80026ee:	2001      	movs	r0, #1
      u8x8_byte_StartTransfer(u8x8);
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
      u8x8_byte_SendByte(u8x8, arg_int);
      u8x8_byte_EndTransfer(u8x8);      
      break;
 80026f0:	e7ef      	b.n	80026d2 <u8x8_cad_ssd13xx_i2c+0x36>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80026f2:	2320      	movs	r3, #32
 80026f4:	5cc2      	ldrb	r2, [r0, r3]
 80026f6:	2aff      	cmp	r2, #255	; 0xff
 80026f8:	d006      	beq.n	8002708 <u8x8_cad_ssd13xx_i2c+0x6c>
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80026fa:	6937      	ldr	r7, [r6, #16]
 80026fc:	1c30      	adds	r0, r6, #0
 80026fe:	2114      	movs	r1, #20
 8002700:	1c22      	adds	r2, r4, #0
 8002702:	1c2b      	adds	r3, r5, #0
 8002704:	47b8      	blx	r7
 8002706:	e7e4      	b.n	80026d2 <u8x8_cad_ssd13xx_i2c+0x36>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
 8002708:	3a87      	subs	r2, #135	; 0x87
 800270a:	54c2      	strb	r2, [r0, r3]
 800270c:	e7f5      	b.n	80026fa <u8x8_cad_ssd13xx_i2c+0x5e>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 800270e:	2000      	movs	r0, #0
 8002710:	e7df      	b.n	80026d2 <u8x8_cad_ssd13xx_i2c+0x36>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	08005174 	.word	0x08005174

08002718 <u8x8_cad_st75256_i2c>:
/* the st75256 i2c driver is a copy of the ssd13xx driver, but with arg=1 */
/* modified from cad001 (ssd13xx) to cad011 */
uint8_t u8x8_cad_st75256_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t *p;
  switch(msg)
 8002718:	3914      	subs	r1, #20
 800271a:	b2c9      	uxtb	r1, r1
}

/* the st75256 i2c driver is a copy of the ssd13xx driver, but with arg=1 */
/* modified from cad001 (ssd13xx) to cad011 */
uint8_t u8x8_cad_st75256_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	1c06      	adds	r6, r0, #0
 8002720:	1c14      	adds	r4, r2, #0
 8002722:	1c1d      	adds	r5, r3, #0
  uint8_t *p;
  switch(msg)
 8002724:	2905      	cmp	r1, #5
 8002726:	d834      	bhi.n	8002792 <u8x8_cad_st75256_i2c+0x7a>
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <u8x8_cad_st75256_i2c+0x80>)
 800272a:	0089      	lsls	r1, r1, #2
 800272c:	585b      	ldr	r3, [r3, r1]
 800272e:	469f      	mov	pc, r3
    case U8X8_MSG_CAD_SEND_DATA:
      /* see ssd13xx driver */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002730:	1c2a      	adds	r2, r5, #0
 8002732:	2118      	movs	r1, #24
 8002734:	f7ff fdd0 	bl	80022d8 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002738:	3c18      	subs	r4, #24
 800273a:	b2e4      	uxtb	r4, r4
	p+=24;
 800273c:	3518      	adds	r5, #24
    case U8X8_MSG_CAD_SEND_DATA:
      /* see ssd13xx driver */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800273e:	1c30      	adds	r0, r6, #0
      u8x8_byte_EndTransfer(u8x8);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      /* see ssd13xx driver */
      p = arg_ptr;
       while( arg_int > 24 )
 8002740:	2c18      	cmp	r4, #24
 8002742:	d8f5      	bhi.n	8002730 <u8x8_cad_st75256_i2c+0x18>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002744:	1c21      	adds	r1, r4, #0
 8002746:	1c2a      	adds	r2, r5, #0
 8002748:	f7ff fdc6 	bl	80022d8 <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
 800274c:	2001      	movs	r0, #1
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
 800274e:	e00d      	b.n	800276c <u8x8_cad_st75256_i2c+0x54>
{
  uint8_t *p;
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_StartTransfer(u8x8);
 8002750:	f000 fabe 	bl	8002cd0 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);
 8002754:	1c30      	adds	r0, r6, #0
 8002756:	2100      	movs	r1, #0
      u8x8_byte_SendByte(u8x8, arg_int);
      u8x8_byte_EndTransfer(u8x8);      
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_StartTransfer(u8x8);
      u8x8_byte_SendByte(u8x8, 0x040);
 8002758:	f000 fab0 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800275c:	1c30      	adds	r0, r6, #0
 800275e:	1c21      	adds	r1, r4, #0
 8002760:	f000 faac 	bl	8002cbc <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);
 8002764:	1c30      	adds	r0, r6, #0
 8002766:	f000 fabb 	bl	8002ce0 <u8x8_byte_EndTransfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
 800276a:	2001      	movs	r0, #1
}
 800276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800276e:	2320      	movs	r3, #32
 8002770:	5cc2      	ldrb	r2, [r0, r3]
 8002772:	2aff      	cmp	r2, #255	; 0xff
 8002774:	d101      	bne.n	800277a <u8x8_cad_st75256_i2c+0x62>
	u8x8->i2c_address = 0x078;	/* ST75256, often this is 0x07e */
 8002776:	3a87      	subs	r2, #135	; 0x87
 8002778:	54c2      	strb	r2, [r0, r3]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800277a:	6937      	ldr	r7, [r6, #16]
 800277c:	1c30      	adds	r0, r6, #0
 800277e:	2114      	movs	r1, #20
 8002780:	1c22      	adds	r2, r4, #0
 8002782:	1c2b      	adds	r3, r5, #0
 8002784:	47b8      	blx	r7
 8002786:	e7f1      	b.n	800276c <u8x8_cad_st75256_i2c+0x54>
      u8x8_byte_SendByte(u8x8, 0x000);
      u8x8_byte_SendByte(u8x8, arg_int);
      u8x8_byte_EndTransfer(u8x8);      
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_StartTransfer(u8x8);
 8002788:	f000 faa2 	bl	8002cd0 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x040);
 800278c:	1c30      	adds	r0, r6, #0
 800278e:	2140      	movs	r1, #64	; 0x40
 8002790:	e7e2      	b.n	8002758 <u8x8_cad_st75256_i2c+0x40>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002792:	2000      	movs	r0, #0
 8002794:	e7ea      	b.n	800276c <u8x8_cad_st75256_i2c+0x54>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	0800518c 	.word	0x0800518c

0800279c <u8x8_cad_ld7032_i2c>:
/* cad i2c procedure for the ld7032 controller */
uint8_t u8x8_cad_ld7032_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800279c:	3914      	subs	r1, #20
 800279e:	b2c9      	uxtb	r1, r1
  return 1;
}

/* cad i2c procedure for the ld7032 controller */
uint8_t u8x8_cad_ld7032_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	1c04      	adds	r4, r0, #0
 80027a4:	1c15      	adds	r5, r2, #0
 80027a6:	1c1e      	adds	r6, r3, #0
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80027a8:	2905      	cmp	r1, #5
 80027aa:	d852      	bhi.n	8002852 <u8x8_cad_ld7032_i2c+0xb6>
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <u8x8_cad_ld7032_i2c+0xbc>)
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	585b      	ldr	r3, [r3, r1]
 80027b2:	469f      	mov	pc, r3
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
 80027b4:	2117      	movs	r1, #23
 80027b6:	1c33      	adds	r3, r6, #0
 80027b8:	2218      	movs	r2, #24
 80027ba:	1c20      	adds	r0, r4, #0
 80027bc:	6927      	ldr	r7, [r4, #16]
 80027be:	47b8      	blx	r7
	arg_int-=24;
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
 80027c0:	1c20      	adds	r0, r4, #0
 80027c2:	f000 fa8d 	bl	8002ce0 <u8x8_byte_EndTransfer>
	u8x8_byte_StartTransfer(u8x8);
 80027c6:	1c20      	adds	r0, r4, #0
 80027c8:	f000 fa82 	bl	8002cd0 <u8x8_byte_StartTransfer>
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
	arg_int-=24;
 80027cc:	3d18      	subs	r5, #24
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
	u8x8_byte_SendByte(u8x8, 0x08);	/* data write for LD7032 */
 80027ce:	1c20      	adds	r0, r4, #0
 80027d0:	2108      	movs	r1, #8
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
	arg_int-=24;
 80027d2:	b2ed      	uxtb	r5, r5
	p+=24;
 80027d4:	3618      	adds	r6, #24
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
	u8x8_byte_SendByte(u8x8, 0x08);	/* data write for LD7032 */
 80027d6:	f000 fa71 	bl	8002cbc <u8x8_byte_SendByte>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
 80027da:	2d18      	cmp	r5, #24
 80027dc:	d8ea      	bhi.n	80027b4 <u8x8_cad_ld7032_i2c+0x18>
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
	u8x8_byte_SendByte(u8x8, 0x08);	/* data write for LD7032 */
      }
      u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, p);
 80027de:	1c2a      	adds	r2, r5, #0
 80027e0:	6927      	ldr	r7, [r4, #16]
 80027e2:	1c20      	adds	r0, r4, #0
 80027e4:	2117      	movs	r1, #23
 80027e6:	1c33      	adds	r3, r6, #0
 80027e8:	47b8      	blx	r7
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
  }
  return 1;
 80027ea:	2501      	movs	r5, #1
}
 80027ec:	1c28      	adds	r0, r5, #0
 80027ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <u8x8_cad_ld7032_i2c+0xc0>)
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
  }
  return 1;
 80027f2:	2501      	movs	r5, #1
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80027f4:	7c1b      	ldrb	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f8      	beq.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
	u8x8_byte_EndTransfer(u8x8); 
 80027fa:	f000 fa71 	bl	8002ce0 <u8x8_byte_EndTransfer>
 80027fe:	e7f5      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
      }
      u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002800:	2320      	movs	r3, #32
 8002802:	5cc2      	ldrb	r2, [r0, r3]
 8002804:	2aff      	cmp	r2, #255	; 0xff
 8002806:	d101      	bne.n	800280c <u8x8_cad_ld7032_i2c+0x70>
	u8x8->i2c_address = 0x060;
 8002808:	3a9f      	subs	r2, #159	; 0x9f
 800280a:	54c2      	strb	r2, [r0, r3]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800280c:	1c2a      	adds	r2, r5, #0
 800280e:	6927      	ldr	r7, [r4, #16]
 8002810:	1c20      	adds	r0, r4, #0
 8002812:	2114      	movs	r1, #20
 8002814:	1c33      	adds	r3, r6, #0
 8002816:	47b8      	blx	r7
 8002818:	1c05      	adds	r5, r0, #0
 800281a:	e7e7      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
      if ( in_transfer != 0 )
 800281c:	4e0f      	ldr	r6, [pc, #60]	; (800285c <u8x8_cad_ld7032_i2c+0xc0>)
 800281e:	7c33      	ldrb	r3, [r6, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <u8x8_cad_ld7032_i2c+0x8c>
	u8x8_byte_EndTransfer(u8x8); 
 8002824:	f000 fa5c 	bl	8002ce0 <u8x8_byte_EndTransfer>
      u8x8_byte_StartTransfer(u8x8);
 8002828:	1c20      	adds	r0, r4, #0
 800282a:	f000 fa51 	bl	8002cd0 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, arg_int);
 800282e:	1c29      	adds	r1, r5, #0
 8002830:	1c20      	adds	r0, r4, #0
 8002832:	f000 fa43 	bl	8002cbc <u8x8_byte_SendByte>
      in_transfer = 1;
 8002836:	2301      	movs	r3, #1
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
  }
  return 1;
 8002838:	2501      	movs	r5, #1
    case U8X8_MSG_CAD_SEND_CMD:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      u8x8_byte_StartTransfer(u8x8);
      u8x8_byte_SendByte(u8x8, arg_int);
      in_transfer = 1;
 800283a:	7433      	strb	r3, [r6, #16]
      break;
 800283c:	e7d6      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800283e:	1c11      	adds	r1, r2, #0
 8002840:	f000 fa3c 	bl	8002cbc <u8x8_byte_SendByte>
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
  }
  return 1;
 8002844:	2501      	movs	r5, #1
      u8x8_byte_SendByte(u8x8, arg_int);
      in_transfer = 1;
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002846:	e7d1      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x060;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002848:	2200      	movs	r2, #0
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <u8x8_cad_ld7032_i2c+0xc0>)
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
  }
  return 1;
 800284c:	2501      	movs	r5, #1
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x060;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800284e:	741a      	strb	r2, [r3, #16]
      break;
 8002850:	e7cc      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      break;
    default:
      return 0;
 8002852:	2500      	movs	r5, #0
 8002854:	e7ca      	b.n	80027ec <u8x8_cad_ld7032_i2c+0x50>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	080051a4 	.word	0x080051a4
 800285c:	2000001c 	.word	0x2000001c

08002860 <u8x8_cad_uc16xx_i2c>:
uint8_t u8x8_cad_uc16xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;	
  static uint8_t is_data = 0;
  uint8_t *p;
  switch(msg)
 8002860:	3914      	subs	r1, #20
 8002862:	b2c9      	uxtb	r1, r1

/* cad procedure for the UC16xx family in I2C mode */
/* u8x8_byte_SetDC is not used */
/* DC bit is encoded into the adr byte */
uint8_t u8x8_cad_uc16xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	1c05      	adds	r5, r0, #0
 8002868:	1c14      	adds	r4, r2, #0
 800286a:	1c1e      	adds	r6, r3, #0
  static uint8_t in_transfer = 0;	
  static uint8_t is_data = 0;
  uint8_t *p;
  switch(msg)
 800286c:	2905      	cmp	r1, #5
 800286e:	d861      	bhi.n	8002934 <u8x8_cad_uc16xx_i2c+0xd4>
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <u8x8_cad_uc16xx_i2c+0xd8>)
 8002872:	0089      	lsls	r1, r1, #2
 8002874:	585b      	ldr	r3, [r3, r1]
 8002876:	469f      	mov	pc, r3
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x070;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;    
 8002878:	2200      	movs	r2, #0
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
 800287a:	2001      	movs	r0, #1
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x070;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;    
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <u8x8_cad_uc16xx_i2c+0xdc>)
 800287e:	745a      	strb	r2, [r3, #17]
      break;
    default:
      return 0;
  }
  return 1;
}
 8002880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;    
      /* actual start is delayed, because we do not whether this is data or cmd transfer */
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002882:	4f2e      	ldr	r7, [pc, #184]	; (800293c <u8x8_cad_uc16xx_i2c+0xdc>)
 8002884:	7c7b      	ldrb	r3, [r7, #17]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d149      	bne.n	800291e <u8x8_cad_uc16xx_i2c+0xbe>
	u8x8_byte_EndTransfer(u8x8);
      in_transfer = 0;
 800288a:	2300      	movs	r3, #0
      break;
    default:
      return 0;
  }
  return 1;
 800288c:	2001      	movs	r0, #1
      /* actual start is delayed, because we do not whether this is data or cmd transfer */
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8);
      in_transfer = 0;
 800288e:	747b      	strb	r3, [r7, #17]
      break;
 8002890:	e7f6      	b.n	8002880 <u8x8_cad_uc16xx_i2c+0x20>
      u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, p);
      
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002892:	2320      	movs	r3, #32
 8002894:	5cc2      	ldrb	r2, [r0, r3]
 8002896:	2aff      	cmp	r2, #255	; 0xff
 8002898:	d101      	bne.n	800289e <u8x8_cad_uc16xx_i2c+0x3e>
	u8x8->i2c_address = 0x070;
 800289a:	3a8f      	subs	r2, #143	; 0x8f
 800289c:	54c2      	strb	r2, [r0, r3]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800289e:	692f      	ldr	r7, [r5, #16]
 80028a0:	1c28      	adds	r0, r5, #0
 80028a2:	2114      	movs	r1, #20
 80028a4:	1c22      	adds	r2, r4, #0
 80028a6:	1c33      	adds	r3, r6, #0
 80028a8:	47b8      	blx	r7
 80028aa:	e7e9      	b.n	8002880 <u8x8_cad_uc16xx_i2c+0x20>
  uint8_t *p;
  switch(msg)
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      if ( in_transfer != 0 )
 80028ac:	4f23      	ldr	r7, [pc, #140]	; (800293c <u8x8_cad_uc16xx_i2c+0xdc>)
 80028ae:	7c7b      	ldrb	r3, [r7, #17]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d037      	beq.n	8002924 <u8x8_cad_uc16xx_i2c+0xc4>
      {
	/* clear the lowest two bits of the adr */
	u8x8_SetI2CAddress( u8x8, u8x8_GetI2CAddress(u8x8)&0x0fc );
	u8x8_byte_StartTransfer(u8x8);
      }
      u8x8_byte_SendByte(u8x8, arg_int);
 80028b4:	1c28      	adds	r0, r5, #0
 80028b6:	1c21      	adds	r1, r4, #0
 80028b8:	f000 fa00 	bl	8002cbc <u8x8_byte_SendByte>
      in_transfer = 1;
 80028bc:	2301      	movs	r3, #1
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
 80028be:	2001      	movs	r0, #1
	/* clear the lowest two bits of the adr */
	u8x8_SetI2CAddress( u8x8, u8x8_GetI2CAddress(u8x8)&0x0fc );
	u8x8_byte_StartTransfer(u8x8);
      }
      u8x8_byte_SendByte(u8x8, arg_int);
      in_transfer = 1;
 80028c0:	747b      	strb	r3, [r7, #17]
      break;
 80028c2:	e7dd      	b.n	8002880 <u8x8_cad_uc16xx_i2c+0x20>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80028c4:	4f1d      	ldr	r7, [pc, #116]	; (800293c <u8x8_cad_uc16xx_i2c+0xdc>)
 80028c6:	7c7b      	ldrb	r3, [r7, #17]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <u8x8_cad_uc16xx_i2c+0x70>
      {
	if ( is_data == 0 )
	{
	  /* transfer mode is active, but data transfer */
	  u8x8_byte_EndTransfer(u8x8); 
 80028cc:	f000 fa08 	bl	8002ce0 <u8x8_byte_EndTransfer>
	}
      }
      else
      {
	/* clear the lowest two bits of the adr */
	u8x8_SetI2CAddress( u8x8, (u8x8_GetI2CAddress(u8x8)&0x0fc)|2 );
 80028d0:	2120      	movs	r1, #32
 80028d2:	2203      	movs	r2, #3
 80028d4:	5c6b      	ldrb	r3, [r5, r1]
	u8x8_byte_StartTransfer(u8x8);
 80028d6:	1c28      	adds	r0, r5, #0
	}
      }
      else
      {
	/* clear the lowest two bits of the adr */
	u8x8_SetI2CAddress( u8x8, (u8x8_GetI2CAddress(u8x8)&0x0fc)|2 );
 80028d8:	4393      	bics	r3, r2
 80028da:	2202      	movs	r2, #2
 80028dc:	4313      	orrs	r3, r2
 80028de:	546b      	strb	r3, [r5, r1]
	u8x8_byte_StartTransfer(u8x8);
 80028e0:	f000 f9f6 	bl	8002cd0 <u8x8_byte_StartTransfer>
      }
      in_transfer = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	747b      	strb	r3, [r7, #17]
      
      p = arg_ptr;
      while( arg_int > 24 )
 80028e8:	2c18      	cmp	r4, #24
 80028ea:	d910      	bls.n	800290e <u8x8_cad_uc16xx_i2c+0xae>
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
 80028ec:	1c33      	adds	r3, r6, #0
 80028ee:	2117      	movs	r1, #23
 80028f0:	2218      	movs	r2, #24
 80028f2:	1c28      	adds	r0, r5, #0
 80028f4:	692f      	ldr	r7, [r5, #16]
 80028f6:	47b8      	blx	r7
	arg_int-=24;
 80028f8:	3c18      	subs	r4, #24
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
 80028fa:	1c28      	adds	r0, r5, #0
      
      p = arg_ptr;
      while( arg_int > 24 )
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
	arg_int-=24;
 80028fc:	b2e4      	uxtb	r4, r4
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
 80028fe:	f000 f9ef 	bl	8002ce0 <u8x8_byte_EndTransfer>
	u8x8_byte_StartTransfer(u8x8);
 8002902:	1c28      	adds	r0, r5, #0
      p = arg_ptr;
      while( arg_int > 24 )
      {
	u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, 24, p);
	arg_int-=24;
	p+=24;
 8002904:	3618      	adds	r6, #24
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
 8002906:	f000 f9e3 	bl	8002cd0 <u8x8_byte_StartTransfer>
	u8x8_byte_StartTransfer(u8x8);
      }
      in_transfer = 1;
      
      p = arg_ptr;
      while( arg_int > 24 )
 800290a:	2c18      	cmp	r4, #24
 800290c:	d8ee      	bhi.n	80028ec <u8x8_cad_uc16xx_i2c+0x8c>
	arg_int-=24;
	p+=24;
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
      }
      u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, p);
 800290e:	692f      	ldr	r7, [r5, #16]
 8002910:	1c28      	adds	r0, r5, #0
 8002912:	2117      	movs	r1, #23
 8002914:	1c22      	adds	r2, r4, #0
 8002916:	1c33      	adds	r3, r6, #0
 8002918:	47b8      	blx	r7
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
 800291a:	2001      	movs	r0, #1
	u8x8_byte_EndTransfer(u8x8); 
	u8x8_byte_StartTransfer(u8x8);
      }
      u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, p);
      
      break;
 800291c:	e7b0      	b.n	8002880 <u8x8_cad_uc16xx_i2c+0x20>
      in_transfer = 0;    
      /* actual start is delayed, because we do not whether this is data or cmd transfer */
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8);
 800291e:	f000 f9df 	bl	8002ce0 <u8x8_byte_EndTransfer>
 8002922:	e7b2      	b.n	800288a <u8x8_cad_uc16xx_i2c+0x2a>
	}
      }
      else
      {
	/* clear the lowest two bits of the adr */
	u8x8_SetI2CAddress( u8x8, u8x8_GetI2CAddress(u8x8)&0x0fc );
 8002924:	2220      	movs	r2, #32
 8002926:	2103      	movs	r1, #3
 8002928:	5c83      	ldrb	r3, [r0, r2]
 800292a:	438b      	bics	r3, r1
 800292c:	5483      	strb	r3, [r0, r2]
	u8x8_byte_StartTransfer(u8x8);
 800292e:	f000 f9cf 	bl	8002cd0 <u8x8_byte_StartTransfer>
 8002932:	e7bf      	b.n	80028b4 <u8x8_cad_uc16xx_i2c+0x54>
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8);
      in_transfer = 0;
      break;
    default:
      return 0;
 8002934:	2000      	movs	r0, #0
 8002936:	e7a3      	b.n	8002880 <u8x8_cad_uc16xx_i2c+0x20>
 8002938:	080051bc 	.word	0x080051bc
 800293c:	2000001c 	.word	0x2000001c

08002940 <u8g2_m_16_8_1>:
//  return buf;
//}
uint8_t *u8g2_m_16_8_1(uint8_t *page_cnt)
{
  static uint8_t buf[128];
  *page_cnt = 1;
 8002940:	2301      	movs	r3, #1
 8002942:	7003      	strb	r3, [r0, #0]
  return buf;
}
 8002944:	4800      	ldr	r0, [pc, #0]	; (8002948 <u8g2_m_16_8_1+0x8>)
 8002946:	4770      	bx	lr
 8002948:	20000030 	.word	0x20000030

0800294c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	4647      	mov	r7, r8
 8002950:	1c05      	adds	r5, r0, #0
 8002952:	b480      	push	{r7}
 8002954:	1c14      	adds	r4, r2, #0
 8002956:	1c0f      	adds	r7, r1, #0
 8002958:	1c1e      	adds	r6, r3, #0
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800295a:	290d      	cmp	r1, #13
 800295c:	d04e      	beq.n	80029fc <u8x8_d_ssd1306_sh1106_generic+0xb0>
 800295e:	d942      	bls.n	80029e6 <u8x8_d_ssd1306_sh1106_generic+0x9a>
 8002960:	290e      	cmp	r1, #14
 8002962:	d031      	beq.n	80029c8 <u8x8_d_ssd1306_sh1106_generic+0x7c>
 8002964:	290f      	cmp	r1, #15
 8002966:	d147      	bne.n	80029f8 <u8x8_d_ssd1306_sh1106_generic+0xac>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002968:	f7ff fcf4 	bl	8002354 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800296c:	7971      	ldrb	r1, [r6, #5]
      x *= 8;
      x += u8x8->x_offset;
 800296e:	7fab      	ldrb	r3, [r5, #30]
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
      x *= 8;
 8002970:	00c9      	lsls	r1, r1, #3
      x += u8x8->x_offset;
 8002972:	18c9      	adds	r1, r1, r3
 8002974:	b2cb      	uxtb	r3, r1
 8002976:	4698      	mov	r8, r3
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002978:	2140      	movs	r1, #64	; 0x40
 800297a:	1c28      	adds	r0, r5, #0
 800297c:	f7ff fcc0 	bl	8002300 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002980:	4643      	mov	r3, r8
 8002982:	0919      	lsrs	r1, r3, #4
 8002984:	2310      	movs	r3, #16
 8002986:	1c28      	adds	r0, r5, #0
 8002988:	4319      	orrs	r1, r3
 800298a:	f7ff fcb9 	bl	8002300 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800298e:	4641      	mov	r1, r8
 8002990:	1c28      	adds	r0, r5, #0
 8002992:	4039      	ands	r1, r7
 8002994:	f7ff fcbc 	bl	8002310 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002998:	23b0      	movs	r3, #176	; 0xb0
 800299a:	79b1      	ldrb	r1, [r6, #6]
 800299c:	1c28      	adds	r0, r5, #0
 800299e:	4319      	orrs	r1, r3
 80029a0:	f7ff fcb6 	bl	8002310 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80029a4:	7931      	ldrb	r1, [r6, #4]
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80029a6:	3c01      	subs	r4, #1
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80029a8:	00c9      	lsls	r1, r1, #3
 80029aa:	b2c9      	uxtb	r1, r1
 80029ac:	1c28      	adds	r0, r5, #0
 80029ae:	6832      	ldr	r2, [r6, #0]
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80029b0:	b2e4      	uxtb	r4, r4
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80029b2:	f7ff fcc7 	bl	8002344 <u8x8_cad_SendData>
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
      } while( arg_int > 0 );
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	d1f4      	bne.n	80029a4 <u8x8_d_ssd1306_sh1106_generic+0x58>
      
      u8x8_cad_EndTransfer(u8x8);
 80029ba:	1c28      	adds	r0, r5, #0
 80029bc:	f7ff fcd2 	bl	8002364 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
 80029c0:	2001      	movs	r0, #1
}
 80029c2:	bc04      	pop	{r2}
 80029c4:	4690      	mov	r8, r2
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80029c8:	f7ff fcc4 	bl	8002354 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80029cc:	2181      	movs	r1, #129	; 0x81
 80029ce:	1c28      	adds	r0, r5, #0
 80029d0:	f7ff fc96 	bl	8002300 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80029d4:	1c21      	adds	r1, r4, #0
 80029d6:	1c28      	adds	r0, r5, #0
 80029d8:	f7ff fc9a 	bl	8002310 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80029dc:	1c28      	adds	r0, r5, #0
 80029de:	f7ff fcc1 	bl	8002364 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 80029e2:	2001      	movs	r0, #1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
 80029e4:	e7ed      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80029e6:	290b      	cmp	r1, #11
 80029e8:	d106      	bne.n	80029f8 <u8x8_d_ssd1306_sh1106_generic+0xac>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80029ea:	4910      	ldr	r1, [pc, #64]	; (8002a2c <u8x8_d_ssd1306_sh1106_generic+0xe0>)
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80029ec:	2a00      	cmp	r2, #0
 80029ee:	d118      	bne.n	8002a22 <u8x8_d_ssd1306_sh1106_generic+0xd6>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80029f0:	f7ff fcc0 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 80029f4:	2001      	movs	r0, #1
 80029f6:	e7e4      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
 80029f8:	2000      	movs	r0, #0
 80029fa:	e7e2      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80029fc:	490b      	ldr	r1, [pc, #44]	; (8002a2c <u8x8_d_ssd1306_sh1106_generic+0xe0>)
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	d107      	bne.n	8002a12 <u8x8_d_ssd1306_sh1106_generic+0xc6>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002a02:	3110      	adds	r1, #16
 8002a04:	f7ff fcb6 	bl	8002374 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002a08:	682b      	ldr	r3, [r5, #0]
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002a0a:	2001      	movs	r0, #1
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002a0c:	7c9b      	ldrb	r3, [r3, #18]
 8002a0e:	77ab      	strb	r3, [r5, #30]
 8002a10:	e7d7      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002a12:	3118      	adds	r1, #24
 8002a14:	f7ff fcae 	bl	8002374 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002a18:	682b      	ldr	r3, [r5, #0]
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002a1a:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002a1c:	7cdb      	ldrb	r3, [r3, #19]
 8002a1e:	77ab      	strb	r3, [r5, #30]
 8002a20:	e7cf      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002a22:	3108      	adds	r1, #8
 8002a24:	f7ff fca6 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002a28:	2001      	movs	r0, #1
 8002a2a:	e7ca      	b.n	80029c2 <u8x8_d_ssd1306_sh1106_generic+0x76>
 8002a2c:	080051d4 	.word	0x080051d4

08002a30 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	1c05      	adds	r5, r0, #0
 8002a34:	1c0c      	adds	r4, r1, #0
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002a36:	f7ff ff89 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d114      	bne.n	8002a68 <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
  
  switch(msg)
 8002a3e:	2c09      	cmp	r4, #9
 8002a40:	d00b      	beq.n	8002a5a <u8x8_d_ssd1306_128x64_noname+0x2a>
 8002a42:	2c0a      	cmp	r4, #10
 8002a44:	d108      	bne.n	8002a58 <u8x8_d_ssd1306_128x64_noname+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002a46:	1c28      	adds	r0, r5, #0
 8002a48:	f7fe fce0 	bl	800140c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8002a4e:	1c28      	adds	r0, r5, #0
 8002a50:	3120      	adds	r1, #32
 8002a52:	f7ff fc8f 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002a56:	2001      	movs	r0, #1
}
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002a5a:	4904      	ldr	r1, [pc, #16]	; (8002a6c <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8002a5c:	1c28      	adds	r0, r5, #0
 8002a5e:	3158      	adds	r1, #88	; 0x58
 8002a60:	f7fe fcd0 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002a64:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
 8002a66:	e7f7      	b.n	8002a58 <u8x8_d_ssd1306_128x64_noname+0x28>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002a68:	2001      	movs	r0, #1
 8002a6a:	e7f5      	b.n	8002a58 <u8x8_d_ssd1306_128x64_noname+0x28>
 8002a6c:	080051d4 	.word	0x080051d4

08002a70 <u8x8_d_ssd1306_128x64_vcomh0>:
  }
  return 1;
}

uint8_t u8x8_d_ssd1306_128x64_vcomh0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	1c05      	adds	r5, r0, #0
 8002a74:	1c0c      	adds	r4, r1, #0
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002a76:	f7ff ff69 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d114      	bne.n	8002aa8 <u8x8_d_ssd1306_128x64_vcomh0+0x38>
    return 1;
  
  switch(msg)
 8002a7e:	2c09      	cmp	r4, #9
 8002a80:	d00b      	beq.n	8002a9a <u8x8_d_ssd1306_128x64_vcomh0+0x2a>
 8002a82:	2c0a      	cmp	r4, #10
 8002a84:	d108      	bne.n	8002a98 <u8x8_d_ssd1306_128x64_vcomh0+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002a86:	1c28      	adds	r0, r5, #0
 8002a88:	f7fe fcc0 	bl	800140c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <u8x8_d_ssd1306_128x64_vcomh0+0x3c>)
 8002a8e:	1c28      	adds	r0, r5, #0
 8002a90:	3170      	adds	r1, #112	; 0x70
 8002a92:	f7ff fc6f 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002a96:	2001      	movs	r0, #1
}
 8002a98:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <u8x8_d_ssd1306_128x64_vcomh0+0x3c>)
 8002a9c:	1c28      	adds	r0, r5, #0
 8002a9e:	3158      	adds	r1, #88	; 0x58
 8002aa0:	f7fe fcb0 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002aa4:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
 8002aa6:	e7f7      	b.n	8002a98 <u8x8_d_ssd1306_128x64_vcomh0+0x28>

uint8_t u8x8_d_ssd1306_128x64_vcomh0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	e7f5      	b.n	8002a98 <u8x8_d_ssd1306_128x64_vcomh0+0x28>
 8002aac:	080051d4 	.word	0x080051d4

08002ab0 <u8x8_d_ssd1306_128x64_alt0>:
  }
  return 1;
}

uint8_t u8x8_d_ssd1306_128x64_alt0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ab0:	b538      	push	{r3, r4, r5, lr}
 8002ab2:	1c05      	adds	r5, r0, #0
 8002ab4:	1c0c      	adds	r4, r1, #0
  
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002ab6:	f7ff ff49 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d114      	bne.n	8002ae8 <u8x8_d_ssd1306_128x64_alt0+0x38>
    return 1;
  
  switch(msg)
 8002abe:	2c09      	cmp	r4, #9
 8002ac0:	d00b      	beq.n	8002ada <u8x8_d_ssd1306_128x64_alt0+0x2a>
 8002ac2:	2c0a      	cmp	r4, #10
 8002ac4:	d108      	bne.n	8002ad8 <u8x8_d_ssd1306_128x64_alt0+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002ac6:	1c28      	adds	r0, r5, #0
 8002ac8:	f7fe fca0 	bl	800140c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <u8x8_d_ssd1306_128x64_alt0+0x3c>)
 8002ace:	1c28      	adds	r0, r5, #0
 8002ad0:	3128      	adds	r1, #40	; 0x28
 8002ad2:	f7ff fc4f 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002ad6:	2001      	movs	r0, #1
}
 8002ad8:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002ada:	4905      	ldr	r1, [pc, #20]	; (8002af0 <u8x8_d_ssd1306_128x64_alt0+0x40>)
 8002adc:	1c28      	adds	r0, r5, #0
 8002ade:	3158      	adds	r1, #88	; 0x58
 8002ae0:	f7fe fc90 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002ae4:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
 8002ae6:	e7f7      	b.n	8002ad8 <u8x8_d_ssd1306_128x64_alt0+0x28>

uint8_t u8x8_d_ssd1306_128x64_alt0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e7f5      	b.n	8002ad8 <u8x8_d_ssd1306_128x64_alt0+0x28>
 8002aec:	08005254 	.word	0x08005254
 8002af0:	080051d4 	.word	0x080051d4

08002af4 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	1c05      	adds	r5, r0, #0
 8002af8:	1c0c      	adds	r4, r1, #0
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002afa:	f7ff ff27 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d114      	bne.n	8002b2c <u8x8_d_sh1106_128x64_noname+0x38>
    return 1;
  
  switch(msg)
 8002b02:	2c09      	cmp	r4, #9
 8002b04:	d00b      	beq.n	8002b1e <u8x8_d_sh1106_128x64_noname+0x2a>
 8002b06:	2c0a      	cmp	r4, #10
 8002b08:	d108      	bne.n	8002b1c <u8x8_d_sh1106_128x64_noname+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002b0a:	1c28      	adds	r0, r5, #0
 8002b0c:	f7fe fc7e 	bl	800140c <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <u8x8_d_sh1106_128x64_noname+0x3c>)
 8002b12:	1c28      	adds	r0, r5, #0
 8002b14:	3120      	adds	r1, #32
 8002b16:	f7ff fc2d 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002b1a:	2001      	movs	r0, #1
    
}
 8002b1c:	bd38      	pop	{r3, r4, r5, pc}
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 8002b1e:	4905      	ldr	r1, [pc, #20]	; (8002b34 <u8x8_d_sh1106_128x64_noname+0x40>)
 8002b20:	1c28      	adds	r0, r5, #0
 8002b22:	3160      	adds	r1, #96	; 0x60
 8002b24:	f7fe fc6e 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002b28:	2001      	movs	r0, #1
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
 8002b2a:	e7f7      	b.n	8002b1c <u8x8_d_sh1106_128x64_noname+0x28>
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	e7f5      	b.n	8002b1c <u8x8_d_sh1106_128x64_noname+0x28>
 8002b30:	080051d4 	.word	0x080051d4
 8002b34:	08005254 	.word	0x08005254

08002b38 <u8x8_d_sh1106_128x64_vcomh0>:
  return 1;
    
}

uint8_t u8x8_d_sh1106_128x64_vcomh0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b38:	b538      	push	{r3, r4, r5, lr}
 8002b3a:	1c05      	adds	r5, r0, #0
 8002b3c:	1c0c      	adds	r4, r1, #0
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002b3e:	f7ff ff05 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d114      	bne.n	8002b70 <u8x8_d_sh1106_128x64_vcomh0+0x38>
    return 1;
  
  switch(msg)
 8002b46:	2c09      	cmp	r4, #9
 8002b48:	d00b      	beq.n	8002b62 <u8x8_d_sh1106_128x64_vcomh0+0x2a>
 8002b4a:	2c0a      	cmp	r4, #10
 8002b4c:	d108      	bne.n	8002b60 <u8x8_d_sh1106_128x64_vcomh0+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002b4e:	1c28      	adds	r0, r5, #0
 8002b50:	f7fe fc5c 	bl	800140c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <u8x8_d_sh1106_128x64_vcomh0+0x3c>)
 8002b56:	1c28      	adds	r0, r5, #0
 8002b58:	3170      	adds	r1, #112	; 0x70
 8002b5a:	f7ff fc0b 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002b5e:	2001      	movs	r0, #1
    
}
 8002b60:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 8002b62:	4905      	ldr	r1, [pc, #20]	; (8002b78 <u8x8_d_sh1106_128x64_vcomh0+0x40>)
 8002b64:	1c28      	adds	r0, r5, #0
 8002b66:	3160      	adds	r1, #96	; 0x60
 8002b68:	f7fe fc4c 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002b6c:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
 8002b6e:	e7f7      	b.n	8002b60 <u8x8_d_sh1106_128x64_vcomh0+0x28>
}

uint8_t u8x8_d_sh1106_128x64_vcomh0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002b70:	2001      	movs	r0, #1
 8002b72:	e7f5      	b.n	8002b60 <u8x8_d_sh1106_128x64_vcomh0+0x28>
 8002b74:	080051d4 	.word	0x080051d4
 8002b78:	08005254 	.word	0x08005254

08002b7c <u8x8_d_sh1106_128x64_winstar>:
  return 1;
    
}

uint8_t u8x8_d_sh1106_128x64_winstar(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	1c05      	adds	r5, r0, #0
 8002b80:	1c0c      	adds	r4, r1, #0
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002b82:	f7ff fee3 	bl	800294c <u8x8_d_ssd1306_sh1106_generic>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d114      	bne.n	8002bb4 <u8x8_d_sh1106_128x64_winstar+0x38>
    return 1;
  
  switch(msg)
 8002b8a:	2c09      	cmp	r4, #9
 8002b8c:	d00b      	beq.n	8002ba6 <u8x8_d_sh1106_128x64_winstar+0x2a>
 8002b8e:	2c0a      	cmp	r4, #10
 8002b90:	d108      	bne.n	8002ba4 <u8x8_d_sh1106_128x64_winstar+0x28>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002b92:	1c28      	adds	r0, r5, #0
 8002b94:	f7fe fc3a 	bl	800140c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_128x64_winstar_init_seq);    
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <u8x8_d_sh1106_128x64_winstar+0x3c>)
 8002b9a:	1c28      	adds	r0, r5, #0
 8002b9c:	3178      	adds	r1, #120	; 0x78
 8002b9e:	f7ff fbe9 	bl	8002374 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002ba2:	2001      	movs	r0, #1
    
}
 8002ba4:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_128x64_winstar_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
 8002ba6:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <u8x8_d_sh1106_128x64_winstar+0x3c>)
 8002ba8:	1c28      	adds	r0, r5, #0
 8002baa:	3160      	adds	r1, #96	; 0x60
 8002bac:	f7fe fc2a 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
 8002bb0:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_sh1106_128x64_winstar_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
 8002bb2:	e7f7      	b.n	8002ba4 <u8x8_d_sh1106_128x64_winstar+0x28>
}

uint8_t u8x8_d_sh1106_128x64_winstar(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	e7f5      	b.n	8002ba4 <u8x8_d_sh1106_128x64_winstar+0x28>
 8002bb8:	08005254 	.word	0x08005254

08002bbc <i2c_delay>:
  ignores ACK response (which is anyway not provided by some displays)
  also does not allow reading from the device
*/
static void i2c_delay(u8x8_t *u8x8) U8X8_NOINLINE;
static void i2c_delay(u8x8_t *u8x8)
{
 8002bbc:	b508      	push	{r3, lr}
  //u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_10MICRO, u8x8->display_info->i2c_bus_clock_100kHz);
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	212d      	movs	r1, #45	; 0x2d
 8002bc2:	7b5a      	ldrb	r2, [r3, #13]
 8002bc4:	f7ff fb82 	bl	80022cc <u8x8_gpio_call>
}
 8002bc8:	bd08      	pop	{r3, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)

08002bcc <i2c_read_scl_and_delay>:
}

/* actually, the scl line is not observed, so this procedure does not return a value */

static void i2c_read_scl_and_delay(u8x8_t *u8x8)
{
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	1c04      	adds	r4, r0, #0
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CClock(u8x8, 1);
 8002bd0:	214c      	movs	r1, #76	; 0x4c
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f7ff fb7a 	bl	80022cc <u8x8_gpio_call>

  i2c_delay(u8x8);
 8002bd8:	1c20      	adds	r0, r4, #0
 8002bda:	f7ff ffef 	bl	8002bbc <i2c_delay>
}
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <i2c_write_bit>:
  i2c_delay(u8x8);
  u8x8->i2c_started = 0;
}

static void i2c_write_bit(u8x8_t *u8x8, uint8_t val)
{
 8002be0:	b510      	push	{r4, lr}
 8002be2:	1c04      	adds	r4, r0, #0
  if (val)
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d10f      	bne.n	8002c08 <i2c_write_bit+0x28>
}

static void i2c_clear_sda(u8x8_t *u8x8)
{
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
 8002be8:	214d      	movs	r1, #77	; 0x4d
 8002bea:	2200      	movs	r2, #0
 8002bec:	f7ff fb6e 	bl	80022cc <u8x8_gpio_call>
  if (val)
    i2c_read_sda(u8x8);
  else
    i2c_clear_sda(u8x8);
 
  i2c_delay(u8x8);
 8002bf0:	1c20      	adds	r0, r4, #0
 8002bf2:	f7ff ffe3 	bl	8002bbc <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8002bf6:	1c20      	adds	r0, r4, #0
 8002bf8:	f7ff ffe8 	bl	8002bcc <i2c_read_scl_and_delay>
  i2c_delay(u8x8);
}

static void i2c_clear_scl(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 0);
 8002bfc:	1c20      	adds	r0, r4, #0
 8002bfe:	214c      	movs	r1, #76	; 0x4c
 8002c00:	2200      	movs	r2, #0
 8002c02:	f7ff fb63 	bl	80022cc <u8x8_gpio_call>
    i2c_clear_sda(u8x8);
 
  i2c_delay(u8x8);
  i2c_read_scl_and_delay(u8x8);
  i2c_clear_scl(u8x8);
}
 8002c06:	bd10      	pop	{r4, pc}
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8002c08:	214d      	movs	r1, #77	; 0x4d
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f7ff fb5e 	bl	80022cc <u8x8_gpio_call>
 8002c10:	e7ee      	b.n	8002bf0 <i2c_write_bit+0x10>
 8002c12:	46c0      	nop			; (mov r8, r8)

08002c14 <i2c_write_byte>:
  i2c_clear_scl(u8x8);
  //return val;
}

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
 8002c14:	b538      	push	{r3, r4, r5, lr}
  i2c_write_bit(u8x8, b & 128);
 8002c16:	237f      	movs	r3, #127	; 0x7f
  i2c_clear_scl(u8x8);
  //return val;
}

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
 8002c18:	1c0d      	adds	r5, r1, #0
  i2c_write_bit(u8x8, b & 128);
 8002c1a:	4399      	bics	r1, r3
  i2c_clear_scl(u8x8);
  //return val;
}

static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
{
 8002c1c:	1c04      	adds	r4, r0, #0
  i2c_write_bit(u8x8, b & 128);
 8002c1e:	f7ff ffdf 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 64);
 8002c22:	2140      	movs	r1, #64	; 0x40
 8002c24:	1c20      	adds	r0, r4, #0
 8002c26:	4029      	ands	r1, r5
 8002c28:	f7ff ffda 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 32);
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	1c20      	adds	r0, r4, #0
 8002c30:	4029      	ands	r1, r5
 8002c32:	f7ff ffd5 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 16);
 8002c36:	2110      	movs	r1, #16
 8002c38:	1c20      	adds	r0, r4, #0
 8002c3a:	4029      	ands	r1, r5
 8002c3c:	f7ff ffd0 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 8);
 8002c40:	2108      	movs	r1, #8
 8002c42:	1c20      	adds	r0, r4, #0
 8002c44:	4029      	ands	r1, r5
 8002c46:	f7ff ffcb 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 4);
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	1c20      	adds	r0, r4, #0
 8002c4e:	4029      	ands	r1, r5
 8002c50:	f7ff ffc6 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 2);
 8002c54:	2102      	movs	r1, #2
 8002c56:	1c20      	adds	r0, r4, #0
 8002c58:	4029      	ands	r1, r5
 8002c5a:	f7ff ffc1 	bl	8002be0 <i2c_write_bit>
  i2c_write_bit(u8x8, b & 1);
 8002c5e:	2101      	movs	r1, #1
 8002c60:	1c20      	adds	r0, r4, #0
 8002c62:	4029      	ands	r1, r5
 8002c64:	f7ff ffbc 	bl	8002be0 <i2c_write_bit>
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8002c68:	214d      	movs	r1, #77	; 0x4d
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	1c20      	adds	r0, r4, #0
 8002c6e:	f7ff fb2d 	bl	80022cc <u8x8_gpio_call>
static void i2c_read_bit(u8x8_t *u8x8)
{
  //uint8_t val;
  /* do not drive SDA */
  i2c_read_sda(u8x8);
  i2c_delay(u8x8);
 8002c72:	1c20      	adds	r0, r4, #0
 8002c74:	f7ff ffa2 	bl	8002bbc <i2c_delay>
  i2c_read_scl_and_delay(u8x8);
 8002c78:	1c20      	adds	r0, r4, #0
 8002c7a:	f7ff ffa7 	bl	8002bcc <i2c_read_scl_and_delay>
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8002c7e:	1c20      	adds	r0, r4, #0
 8002c80:	214d      	movs	r1, #77	; 0x4d
 8002c82:	2201      	movs	r2, #1
 8002c84:	f7ff fb22 	bl	80022cc <u8x8_gpio_call>
  /* do not drive SDA */
  i2c_read_sda(u8x8);
  i2c_delay(u8x8);
  i2c_read_scl_and_delay(u8x8);
  i2c_read_sda(u8x8);
  i2c_delay(u8x8);
 8002c88:	1c20      	adds	r0, r4, #0
 8002c8a:	f7ff ff97 	bl	8002bbc <i2c_delay>
  i2c_delay(u8x8);
}

static void i2c_clear_scl(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 0);
 8002c8e:	1c20      	adds	r0, r4, #0
 8002c90:	214c      	movs	r1, #76	; 0x4c
 8002c92:	2200      	movs	r2, #0
 8002c94:	f7ff fb1a 	bl	80022cc <u8x8_gpio_call>
    
  /* read ack from client */
  /* 0: ack was given by client */
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
}
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)

08002c9c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	1c0a      	adds	r2, r1, #0
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002ca0:	6904      	ldr	r4, [r0, #16]
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	47a0      	blx	r4
}
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)

08002cac <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	1c0d      	adds	r5, r1, #0
 8002cb0:	1c13      	adds	r3, r2, #0
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002cb2:	6904      	ldr	r4, [r0, #16]
 8002cb4:	1c2a      	adds	r2, r5, #0
 8002cb6:	2117      	movs	r1, #23
 8002cb8:	47a0      	blx	r4
}
 8002cba:	bd38      	pop	{r3, r4, r5, pc}

08002cbc <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002cbc:	b500      	push	{lr}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	466b      	mov	r3, sp
 8002cc2:	1dda      	adds	r2, r3, #7
 8002cc4:	7011      	strb	r1, [r2, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	f7ff fff0 	bl	8002cac <u8x8_byte_SendBytes>
}
 8002ccc:	b003      	add	sp, #12
 8002cce:	bd00      	pop	{pc}

08002cd0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002cd0:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002cd2:	2118      	movs	r1, #24
 8002cd4:	6904      	ldr	r4, [r0, #16]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2300      	movs	r3, #0
 8002cda:	47a0      	blx	r4
}
 8002cdc:	bd10      	pop	{r4, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)

08002ce0 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002ce0:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002ce2:	2119      	movs	r1, #25
 8002ce4:	6904      	ldr	r4, [r0, #16]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2300      	movs	r3, #0
 8002cea:	47a0      	blx	r4
}
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)

08002cf0 <u8x8_byte_empty>:
    case U8X8_MSG_BYTE_START_TRANSFER:
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;	/* do nothing */
  }
  return 1;	/* always succeed */
}
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	4770      	bx	lr

08002cf4 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	464e      	mov	r6, r9
 8002cf8:	4657      	mov	r7, sl
 8002cfa:	4645      	mov	r5, r8
 8002cfc:	b4e0      	push	{r5, r6, r7}
 8002cfe:	1c04      	adds	r4, r0, #0
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
  uint8_t not_takeover_edge = 1 - takeover_edge;
 
  switch(msg)
 8002d00:	3914      	subs	r1, #20

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002d02:	6800      	ldr	r0, [r0, #0]
  uint8_t not_takeover_edge = 1 - takeover_edge;
 
  switch(msg)
 8002d04:	b2c9      	uxtb	r1, r1
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d06:	4699      	mov	r9, r3
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002d08:	7b03      	ldrb	r3, [r0, #12]
  uint8_t not_takeover_edge = 1 - takeover_edge;
 
  switch(msg)
 8002d0a:	290c      	cmp	r1, #12
 8002d0c:	d900      	bls.n	8002d10 <u8x8_byte_4wire_sw_spi+0x1c>
 8002d0e:	e073      	b.n	8002df8 <u8x8_byte_4wire_sw_spi+0x104>
 8002d10:	4d3c      	ldr	r5, [pc, #240]	; (8002e04 <u8x8_byte_4wire_sw_spi+0x110>)
 8002d12:	0089      	lsls	r1, r1, #2
 8002d14:	5869      	ldr	r1, [r5, r1]
 8002d16:	468f      	mov	pc, r1
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8002d18:	1c20      	adds	r0, r4, #0
 8002d1a:	214a      	movs	r1, #74	; 0x4a
 8002d1c:	f7ff fad6 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002d20:	2001      	movs	r0, #1
}
 8002d22:	bc1c      	pop	{r2, r3, r4}
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	46a2      	mov	sl, r4
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002d2c:	7842      	ldrb	r2, [r0, #1]
 8002d2e:	2149      	movs	r1, #73	; 0x49
 8002d30:	1c20      	adds	r0, r4, #0
 8002d32:	f7ff facb 	bl	80022cc <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 8002d36:	2201      	movs	r2, #1
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	1c20      	adds	r0, r4, #0
 8002d3c:	7b1b      	ldrb	r3, [r3, #12]
 8002d3e:	2140      	movs	r1, #64	; 0x40
 8002d40:	401a      	ands	r2, r3
 8002d42:	f7ff fac3 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002d46:	2001      	movs	r0, #1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
 8002d48:	e7eb      	b.n	8002d22 <u8x8_byte_4wire_sw_spi+0x2e>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002d4a:	2a00      	cmp	r2, #0
 8002d4c:	d044      	beq.n	8002dd8 <u8x8_byte_4wire_sw_spi+0xe4>

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002d4e:	2701      	movs	r7, #1
 8002d50:	401f      	ands	r7, r3
  uint8_t not_takeover_edge = 1 - takeover_edge;
 8002d52:	2301      	movs	r3, #1
 8002d54:	3a01      	subs	r2, #1
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	3201      	adds	r2, #1
 8002d5a:	444a      	add	r2, r9
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8002d5c:	407b      	eors	r3, r7
 8002d5e:	4692      	mov	sl, r2
 8002d60:	4698      	mov	r8, r3
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8002d62:	464b      	mov	r3, r9
 8002d64:	781e      	ldrb	r6, [r3, #0]
	data++;
 8002d66:	2301      	movs	r3, #1
 8002d68:	469c      	mov	ip, r3
 8002d6a:	2508      	movs	r5, #8
 8002d6c:	44e1      	add	r9, ip
 8002d6e:	e01e      	b.n	8002dae <u8x8_byte_4wire_sw_spi+0xba>
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	f7ff faab 	bl	80022cc <u8x8_gpio_call>
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8002d76:	1c20      	adds	r0, r4, #0
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	4642      	mov	r2, r8
 8002d7c:	f7ff faa6 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	1c20      	adds	r0, r4, #0
 8002d84:	799a      	ldrb	r2, [r3, #6]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	f7ff faa0 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 8002d8c:	1c20      	adds	r0, r4, #0
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	1c3a      	adds	r2, r7, #0
 8002d92:	f7ff fa9b 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	3d01      	subs	r5, #1
	{
	  if ( b & 128 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
 8002d9a:	0076      	lsls	r6, r6, #1
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8002d9c:	79da      	ldrb	r2, [r3, #7]
 8002d9e:	1c20      	adds	r0, r4, #0
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	b2ed      	uxtb	r5, r5
	{
	  if ( b & 128 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
 8002da4:	b2f6      	uxtb	r6, r6
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8002da6:	f7ff fa91 	bl	80022cc <u8x8_gpio_call>
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
 8002daa:	2d00      	cmp	r5, #0
 8002dac:	d026      	beq.n	8002dfc <u8x8_byte_4wire_sw_spi+0x108>
	{
	  if ( b & 128 )
 8002dae:	b273      	sxtb	r3, r6
	    u8x8_gpio_SetSPIData(u8x8, 1);
 8002db0:	1c20      	adds	r0, r4, #0
 8002db2:	2141      	movs	r1, #65	; 0x41
	b = *data;
	data++;
	arg_int--;
	for( i = 0; i < 8; i++ )
	{
	  if ( b & 128 )
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dadb      	bge.n	8002d70 <u8x8_byte_4wire_sw_spi+0x7c>
	    u8x8_gpio_SetSPIData(u8x8, 1);
 8002db8:	2201      	movs	r2, #1
 8002dba:	f7ff fa87 	bl	80022cc <u8x8_gpio_call>
 8002dbe:	e7da      	b.n	8002d76 <u8x8_byte_4wire_sw_spi+0x82>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8002dc0:	7802      	ldrb	r2, [r0, #0]
 8002dc2:	2149      	movs	r1, #73	; 0x49
 8002dc4:	1c20      	adds	r0, r4, #0
 8002dc6:	f7ff fa81 	bl	80022cc <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	6965      	ldr	r5, [r4, #20]
 8002dce:	789a      	ldrb	r2, [r3, #2]
 8002dd0:	1c20      	adds	r0, r4, #0
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	47a8      	blx	r5
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002dd8:	2001      	movs	r0, #1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
 8002dda:	e7a2      	b.n	8002d22 <u8x8_byte_4wire_sw_spi+0x2e>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8002ddc:	78c2      	ldrb	r2, [r0, #3]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	2300      	movs	r3, #0
 8002de2:	1c20      	adds	r0, r4, #0
 8002de4:	6965      	ldr	r5, [r4, #20]
 8002de6:	47a8      	blx	r5
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	1c20      	adds	r0, r4, #0
 8002dec:	785a      	ldrb	r2, [r3, #1]
 8002dee:	2149      	movs	r1, #73	; 0x49
 8002df0:	f7ff fa6c 	bl	80022cc <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
 8002df4:	2001      	movs	r0, #1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
 8002df6:	e794      	b.n	8002d22 <u8x8_byte_4wire_sw_spi+0x2e>
    default:
      return 0;
 8002df8:	2000      	movs	r0, #0
 8002dfa:	e792      	b.n	8002d22 <u8x8_byte_4wire_sw_spi+0x2e>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002dfc:	45d1      	cmp	r9, sl
 8002dfe:	d1b0      	bne.n	8002d62 <u8x8_byte_4wire_sw_spi+0x6e>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002e00:	2001      	movs	r0, #1
 8002e02:	e78e      	b.n	8002d22 <u8x8_byte_4wire_sw_spi+0x2e>
 8002e04:	080052fc 	.word	0x080052fc

08002e08 <u8x8_byte_8bit_6800mode>:
}

/*=========================================*/

uint8_t u8x8_byte_8bit_6800mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	4646      	mov	r6, r8
 8002e0c:	464f      	mov	r7, r9
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8002e0e:	3914      	subs	r1, #20
 8002e10:	b2c9      	uxtb	r1, r1
}

/*=========================================*/

uint8_t u8x8_byte_8bit_6800mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e12:	b4c0      	push	{r6, r7}
 8002e14:	4698      	mov	r8, r3
 8002e16:	1c06      	adds	r6, r0, #0
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8002e18:	290c      	cmp	r1, #12
 8002e1a:	d866      	bhi.n	8002eea <u8x8_byte_8bit_6800mode+0xe2>
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <u8x8_byte_8bit_6800mode+0xe8>)
 8002e1e:	0089      	lsls	r1, r1, #2
 8002e20:	585b      	ldr	r3, [r3, r1]
 8002e22:	469f      	mov	pc, r3
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8002e24:	214a      	movs	r1, #74	; 0x4a
 8002e26:	f7ff fa51 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002e2a:	2001      	movs	r0, #1
}
 8002e2c:	bc0c      	pop	{r2, r3}
 8002e2e:	4690      	mov	r8, r2
 8002e30:	4699      	mov	r9, r3
 8002e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 8002e34:	6803      	ldr	r3, [r0, #0]
 8002e36:	2149      	movs	r1, #73	; 0x49
 8002e38:	785a      	ldrb	r2, [r3, #1]
 8002e3a:	f7ff fa47 	bl	80022cc <u8x8_gpio_call>
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8002e3e:	1c30      	adds	r0, r6, #0
 8002e40:	2148      	movs	r1, #72	; 0x48
 8002e42:	2200      	movs	r2, #0
 8002e44:	f7ff fa42 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002e48:	2001      	movs	r0, #1
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
 8002e4a:	e7ef      	b.n	8002e2c <u8x8_byte_8bit_6800mode+0x24>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d02e      	beq.n	8002eae <u8x8_byte_8bit_6800mode+0xa6>
 8002e50:	3a01      	subs	r2, #1
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	3201      	adds	r2, #1
 8002e56:	4442      	add	r2, r8
 8002e58:	4691      	mov	r9, r2
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002e5a:	2701      	movs	r7, #1
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	781d      	ldrb	r5, [r3, #0]
	data++;
 8002e60:	2301      	movs	r3, #1
 8002e62:	469c      	mov	ip, r3
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002e64:	2440      	movs	r4, #64	; 0x40
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
	data++;
 8002e66:	44e0      	add	r8, ip
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002e68:	1c3a      	adds	r2, r7, #0
 8002e6a:	1c21      	adds	r1, r4, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002e6c:	3401      	adds	r4, #1
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002e6e:	402a      	ands	r2, r5
 8002e70:	1c30      	adds	r0, r6, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002e72:	b2e4      	uxtb	r4, r4
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002e74:	f7ff fa2a 	bl	80022cc <u8x8_gpio_call>
	  b >>= 1;
 8002e78:	086d      	lsrs	r5, r5, #1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002e7a:	2c48      	cmp	r4, #72	; 0x48
 8002e7c:	d1f4      	bne.n	8002e68 <u8x8_byte_8bit_6800mode+0x60>
	{
	  u8x8_gpio_call(u8x8, i, b&1);
	  b >>= 1;
	}    
	
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 8002e7e:	6833      	ldr	r3, [r6, #0]
 8002e80:	1c30      	adds	r0, r6, #0
 8002e82:	7b9a      	ldrb	r2, [r3, #14]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	f7ff fa21 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 8002e8a:	1c30      	adds	r0, r6, #0
 8002e8c:	2148      	movs	r1, #72	; 0x48
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f7ff fa1c 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	1c30      	adds	r0, r6, #0
 8002e98:	7bda      	ldrb	r2, [r3, #15]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	f7ff fa16 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8002ea0:	1c30      	adds	r0, r6, #0
 8002ea2:	2148      	movs	r1, #72	; 0x48
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f7ff fa11 	bl	80022cc <u8x8_gpio_call>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002eaa:	45c8      	cmp	r8, r9
 8002eac:	d1d6      	bne.n	8002e5c <u8x8_byte_8bit_6800mode+0x54>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002eae:	2001      	movs	r0, #1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
 8002eb0:	e7bc      	b.n	8002e2c <u8x8_byte_8bit_6800mode+0x24>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8002eb2:	6803      	ldr	r3, [r0, #0]
 8002eb4:	2149      	movs	r1, #73	; 0x49
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	f7ff fa08 	bl	80022cc <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8002ebc:	6833      	ldr	r3, [r6, #0]
 8002ebe:	6974      	ldr	r4, [r6, #20]
 8002ec0:	789a      	ldrb	r2, [r3, #2]
 8002ec2:	1c30      	adds	r0, r6, #0
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002eca:	2001      	movs	r0, #1
 8002ecc:	e7ae      	b.n	8002e2c <u8x8_byte_8bit_6800mode+0x24>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	78da      	ldrb	r2, [r3, #3]
 8002ed4:	6974      	ldr	r4, [r6, #20]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002eda:	6833      	ldr	r3, [r6, #0]
 8002edc:	1c30      	adds	r0, r6, #0
 8002ede:	785a      	ldrb	r2, [r3, #1]
 8002ee0:	2149      	movs	r1, #73	; 0x49
 8002ee2:	f7ff f9f3 	bl	80022cc <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
 8002ee6:	2001      	movs	r0, #1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
 8002ee8:	e7a0      	b.n	8002e2c <u8x8_byte_8bit_6800mode+0x24>
    default:
      return 0;
 8002eea:	2000      	movs	r0, #0
 8002eec:	e79e      	b.n	8002e2c <u8x8_byte_8bit_6800mode+0x24>
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	08005330 	.word	0x08005330

08002ef4 <u8x8_byte_8bit_8080mode>:
  }
  return 1;
}

uint8_t u8x8_byte_8bit_8080mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	4646      	mov	r6, r8
 8002ef8:	464f      	mov	r7, r9
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8002efa:	3914      	subs	r1, #20
 8002efc:	b2c9      	uxtb	r1, r1
  }
  return 1;
}

uint8_t u8x8_byte_8bit_8080mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002efe:	b4c0      	push	{r6, r7}
 8002f00:	4698      	mov	r8, r3
 8002f02:	1c06      	adds	r6, r0, #0
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8002f04:	290c      	cmp	r1, #12
 8002f06:	d866      	bhi.n	8002fd6 <u8x8_byte_8bit_8080mode+0xe2>
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <u8x8_byte_8bit_8080mode+0xe8>)
 8002f0a:	0089      	lsls	r1, r1, #2
 8002f0c:	585b      	ldr	r3, [r3, r1]
 8002f0e:	469f      	mov	pc, r3
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8002f10:	214a      	movs	r1, #74	; 0x4a
 8002f12:	f7ff f9db 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002f16:	2001      	movs	r0, #1
}
 8002f18:	bc0c      	pop	{r2, r3}
 8002f1a:	4690      	mov	r8, r2
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 8002f20:	6803      	ldr	r3, [r0, #0]
 8002f22:	2149      	movs	r1, #73	; 0x49
 8002f24:	785a      	ldrb	r2, [r3, #1]
 8002f26:	f7ff f9d1 	bl	80022cc <u8x8_gpio_call>
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 8002f2a:	1c30      	adds	r0, r6, #0
 8002f2c:	2148      	movs	r1, #72	; 0x48
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f7ff f9cc 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002f34:	2001      	movs	r0, #1
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is high */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
      break;
 8002f36:	e7ef      	b.n	8002f18 <u8x8_byte_8bit_8080mode+0x24>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d02e      	beq.n	8002f9a <u8x8_byte_8bit_8080mode+0xa6>
 8002f3c:	3a01      	subs	r2, #1
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	3201      	adds	r2, #1
 8002f42:	4442      	add	r2, r8
 8002f44:	4691      	mov	r9, r2
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002f46:	2701      	movs	r7, #1
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8002f48:	4643      	mov	r3, r8
 8002f4a:	781d      	ldrb	r5, [r3, #0]
	data++;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	469c      	mov	ip, r3
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002f50:	2440      	movs	r4, #64	; 0x40
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
	data++;
 8002f52:	44e0      	add	r8, ip
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002f54:	1c3a      	adds	r2, r7, #0
 8002f56:	1c21      	adds	r1, r4, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002f58:	3401      	adds	r4, #1
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002f5a:	402a      	ands	r2, r5
 8002f5c:	1c30      	adds	r0, r6, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002f5e:	b2e4      	uxtb	r4, r4
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8002f60:	f7ff f9b4 	bl	80022cc <u8x8_gpio_call>
	  b >>= 1;
 8002f64:	086d      	lsrs	r5, r5, #1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 8002f66:	2c48      	cmp	r4, #72	; 0x48
 8002f68:	d1f4      	bne.n	8002f54 <u8x8_byte_8bit_8080mode+0x60>
	{
	  u8x8_gpio_call(u8x8, i, b&1);
	  b >>= 1;
	}    
	
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 8002f6a:	6833      	ldr	r3, [r6, #0]
 8002f6c:	1c30      	adds	r0, r6, #0
 8002f6e:	7b9a      	ldrb	r2, [r3, #14]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	f7ff f9ab 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8002f76:	1c30      	adds	r0, r6, #0
 8002f78:	2148      	movs	r1, #72	; 0x48
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f7ff f9a6 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 8002f80:	6833      	ldr	r3, [r6, #0]
 8002f82:	1c30      	adds	r0, r6, #0
 8002f84:	7bda      	ldrb	r2, [r3, #15]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	f7ff f9a0 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 8002f8c:	1c30      	adds	r0, r6, #0
 8002f8e:	2148      	movs	r1, #72	; 0x48
 8002f90:	2201      	movs	r2, #1
 8002f92:	f7ff f99b 	bl	80022cc <u8x8_gpio_call>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8002f96:	45c8      	cmp	r8, r9
 8002f98:	d1d6      	bne.n	8002f48 <u8x8_byte_8bit_8080mode+0x54>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002f9a:	2001      	movs	r0, #1
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
 8002f9c:	e7bc      	b.n	8002f18 <u8x8_byte_8bit_8080mode+0x24>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	2149      	movs	r1, #73	; 0x49
 8002fa2:	781a      	ldrb	r2, [r3, #0]
 8002fa4:	f7ff f992 	bl	80022cc <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8002fa8:	6833      	ldr	r3, [r6, #0]
 8002faa:	6974      	ldr	r4, [r6, #20]
 8002fac:	789a      	ldrb	r2, [r3, #2]
 8002fae:	1c30      	adds	r0, r6, #0
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	e7ae      	b.n	8002f18 <u8x8_byte_8bit_8080mode+0x24>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	78da      	ldrb	r2, [r3, #3]
 8002fc0:	6974      	ldr	r4, [r6, #20]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002fc6:	6833      	ldr	r3, [r6, #0]
 8002fc8:	1c30      	adds	r0, r6, #0
 8002fca:	785a      	ldrb	r2, [r3, #1]
 8002fcc:	2149      	movs	r1, #73	; 0x49
 8002fce:	f7ff f97d 	bl	80022cc <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
 8002fd2:	2001      	movs	r0, #1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
 8002fd4:	e7a0      	b.n	8002f18 <u8x8_byte_8bit_8080mode+0x24>
    default:
      return 0;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e79e      	b.n	8002f18 <u8x8_byte_8bit_8080mode+0x24>
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	08005364 	.word	0x08005364

08002fe0 <u8x8_byte_3wire_sw_spi>:
}

/*=========================================*/

uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	4656      	mov	r6, sl
 8002fe4:	4644      	mov	r4, r8
 8002fe6:	465f      	mov	r7, fp
 8002fe8:	464d      	mov	r5, r9
 8002fea:	b4f0      	push	{r4, r5, r6, r7}
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
  uint8_t not_takeover_edge = 1 - takeover_edge;
  uint16_t b;
  static uint8_t last_dc;
 
  switch(msg)
 8002fec:	3914      	subs	r1, #20
}

/*=========================================*/

uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fee:	1c04      	adds	r4, r0, #0
  uint8_t i;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002ff0:	6800      	ldr	r0, [r0, #0]
  uint8_t not_takeover_edge = 1 - takeover_edge;
  uint16_t b;
  static uint8_t last_dc;
 
  switch(msg)
 8002ff2:	b2c9      	uxtb	r1, r1
}

/*=========================================*/

uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ff4:	469a      	mov	sl, r3
  uint8_t i;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002ff6:	7b03      	ldrb	r3, [r0, #12]
  uint8_t not_takeover_edge = 1 - takeover_edge;
  uint16_t b;
  static uint8_t last_dc;
 
  switch(msg)
 8002ff8:	290c      	cmp	r1, #12
 8002ffa:	d900      	bls.n	8002ffe <u8x8_byte_3wire_sw_spi+0x1e>
 8002ffc:	e07c      	b.n	80030f8 <u8x8_byte_3wire_sw_spi+0x118>
 8002ffe:	4d41      	ldr	r5, [pc, #260]	; (8003104 <u8x8_byte_3wire_sw_spi+0x124>)
 8003000:	0089      	lsls	r1, r1, #2
 8003002:	5869      	ldr	r1, [r5, r1]
 8003004:	468f      	mov	pc, r1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8003006:	2001      	movs	r0, #1
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
    case U8X8_MSG_BYTE_SET_DC:
      last_dc = arg_int;
 8003008:	4b3f      	ldr	r3, [pc, #252]	; (8003108 <u8x8_byte_3wire_sw_spi+0x128>)
 800300a:	701a      	strb	r2, [r3, #0]
      break;
    default:
      return 0;
  }
  return 1;
}
 800300c:	bc3c      	pop	{r2, r3, r4, r5}
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	46a2      	mov	sl, r4
 8003014:	46ab      	mov	fp, r5
 8003016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8003018:	7842      	ldrb	r2, [r0, #1]
 800301a:	2149      	movs	r1, #73	; 0x49
 800301c:	1c20      	adds	r0, r4, #0
 800301e:	f7ff f955 	bl	80022cc <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 8003022:	2201      	movs	r2, #1
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	1c20      	adds	r0, r4, #0
 8003028:	7b1b      	ldrb	r3, [r3, #12]
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	401a      	ands	r2, r3
 800302e:	f7ff f94d 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8003032:	2001      	movs	r0, #1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
      break;
 8003034:	e7ea      	b.n	800300c <u8x8_byte_3wire_sw_spi+0x2c>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8003036:	2a00      	cmp	r2, #0
 8003038:	d04e      	beq.n	80030d8 <u8x8_byte_3wire_sw_spi+0xf8>

uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 800303a:	2101      	movs	r1, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	3201      	adds	r2, #1
 8003042:	4019      	ands	r1, r3
 8003044:	4452      	add	r2, sl
 8003046:	4693      	mov	fp, r2
  uint8_t not_takeover_edge = 1 - takeover_edge;
 8003048:	2301      	movs	r3, #1
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 800304a:	1c0a      	adds	r2, r1, #0
 800304c:	405a      	eors	r2, r3

uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t i;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 800304e:	4688      	mov	r8, r1
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8003050:	4691      	mov	r9, r2
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8003052:	4653      	mov	r3, sl
 8003054:	781d      	ldrb	r5, [r3, #0]
	if ( last_dc != 0 )
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <u8x8_byte_3wire_sw_spi+0x128>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <u8x8_byte_3wire_sw_spi+0x84>
	  b |= 256;
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	431d      	orrs	r5, r3
	data++;
 8003064:	2301      	movs	r3, #1
	arg_int--;
	for( i = 0; i < 9; i++ )
	{
	  if ( b & 256 )
 8003066:	2780      	movs	r7, #128	; 0x80
      while( arg_int > 0 )
      {
	b = *data;
	if ( last_dc != 0 )
	  b |= 256;
	data++;
 8003068:	469c      	mov	ip, r3
 800306a:	2609      	movs	r6, #9
 800306c:	44e2      	add	sl, ip
	arg_int--;
	for( i = 0; i < 9; i++ )
	{
	  if ( b & 256 )
 800306e:	007f      	lsls	r7, r7, #1
 8003070:	e01e      	b.n	80030b0 <u8x8_byte_3wire_sw_spi+0xd0>
	    u8x8_gpio_SetSPIData(u8x8, 1);
 8003072:	2201      	movs	r2, #1
 8003074:	f7ff f92a 	bl	80022cc <u8x8_gpio_call>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8003078:	1c20      	adds	r0, r4, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	464a      	mov	r2, r9
 800307e:	f7ff f925 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	1c20      	adds	r0, r4, #0
 8003086:	799a      	ldrb	r2, [r3, #6]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	f7ff f91f 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 800308e:	1c20      	adds	r0, r4, #0
 8003090:	2140      	movs	r1, #64	; 0x40
 8003092:	4642      	mov	r2, r8
 8003094:	f7ff f91a 	bl	80022cc <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	3e01      	subs	r6, #1
	{
	  if ( b & 256 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
 800309c:	006d      	lsls	r5, r5, #1
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 800309e:	79da      	ldrb	r2, [r3, #7]
 80030a0:	1c20      	adds	r0, r4, #0
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	b2f6      	uxtb	r6, r6
	{
	  if ( b & 256 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
	  b <<= 1;
 80030a6:	b2ad      	uxth	r5, r5
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 80030a8:	f7ff f910 	bl	80022cc <u8x8_gpio_call>
	b = *data;
	if ( last_dc != 0 )
	  b |= 256;
	data++;
	arg_int--;
	for( i = 0; i < 9; i++ )
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	d025      	beq.n	80030fc <u8x8_byte_3wire_sw_spi+0x11c>
	{
	  if ( b & 256 )
	    u8x8_gpio_SetSPIData(u8x8, 1);
 80030b0:	1c20      	adds	r0, r4, #0
 80030b2:	2141      	movs	r1, #65	; 0x41
	  b |= 256;
	data++;
	arg_int--;
	for( i = 0; i < 9; i++ )
	{
	  if ( b & 256 )
 80030b4:	423d      	tst	r5, r7
 80030b6:	d1dc      	bne.n	8003072 <u8x8_byte_3wire_sw_spi+0x92>
	    u8x8_gpio_SetSPIData(u8x8, 1);
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f7ff f907 	bl	80022cc <u8x8_gpio_call>
 80030be:	e7db      	b.n	8003078 <u8x8_byte_3wire_sw_spi+0x98>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      last_dc = arg_int;
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 80030c0:	7802      	ldrb	r2, [r0, #0]
 80030c2:	2149      	movs	r1, #73	; 0x49
 80030c4:	1c20      	adds	r0, r4, #0
 80030c6:	f7ff f901 	bl	80022cc <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	6965      	ldr	r5, [r4, #20]
 80030ce:	789a      	ldrb	r2, [r3, #2]
 80030d0:	1c20      	adds	r0, r4, #0
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	2300      	movs	r3, #0
 80030d6:	47a8      	blx	r5
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 80030d8:	2001      	movs	r0, #1
      last_dc = arg_int;
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
 80030da:	e797      	b.n	800300c <u8x8_byte_3wire_sw_spi+0x2c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 80030dc:	78c2      	ldrb	r2, [r0, #3]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	2300      	movs	r3, #0
 80030e2:	1c20      	adds	r0, r4, #0
 80030e4:	6965      	ldr	r5, [r4, #20]
 80030e6:	47a8      	blx	r5
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	1c20      	adds	r0, r4, #0
 80030ec:	785a      	ldrb	r2, [r3, #1]
 80030ee:	2149      	movs	r1, #73	; 0x49
 80030f0:	f7ff f8ec 	bl	80022cc <u8x8_gpio_call>
      break;
    default:
      return 0;
  }
  return 1;
 80030f4:	2001      	movs	r0, #1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
 80030f6:	e789      	b.n	800300c <u8x8_byte_3wire_sw_spi+0x2c>
    default:
      return 0;
 80030f8:	2000      	movs	r0, #0
 80030fa:	e787      	b.n	800300c <u8x8_byte_3wire_sw_spi+0x2c>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 80030fc:	45da      	cmp	sl, fp
 80030fe:	d1a8      	bne.n	8003052 <u8x8_byte_3wire_sw_spi+0x72>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      break;
    default:
      return 0;
  }
  return 1;
 8003100:	2001      	movs	r0, #1
 8003102:	e783      	b.n	800300c <u8x8_byte_3wire_sw_spi+0x2c>
 8003104:	08005398 	.word	0x08005398
 8003108:	200000b0 	.word	0x200000b0

0800310c <u8x8_byte_set_ks0108_cs>:
}

/*=========================================*/

void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
{
 800310c:	b570      	push	{r4, r5, r6, lr}
  u8x8_gpio_SetCS(u8x8, arg&1);
 800310e:	2601      	movs	r6, #1
 8003110:	1c32      	adds	r2, r6, #0
}

/*=========================================*/

void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
{
 8003112:	1c0c      	adds	r4, r1, #0
  u8x8_gpio_SetCS(u8x8, arg&1);
 8003114:	400a      	ands	r2, r1
 8003116:	2149      	movs	r1, #73	; 0x49
}

/*=========================================*/

void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
{
 8003118:	1c05      	adds	r5, r0, #0
  u8x8_gpio_SetCS(u8x8, arg&1);
 800311a:	f7ff f8d7 	bl	80022cc <u8x8_gpio_call>
  arg = arg >> 1;
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS1, arg&1);
 800311e:	1c32      	adds	r2, r6, #0
/*=========================================*/

void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
{
  u8x8_gpio_SetCS(u8x8, arg&1);
  arg = arg >> 1;
 8003120:	0864      	lsrs	r4, r4, #1
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS1, arg&1);
 8003122:	1c28      	adds	r0, r5, #0
 8003124:	4022      	ands	r2, r4
 8003126:	214e      	movs	r1, #78	; 0x4e
 8003128:	f7ff f8d0 	bl	80022cc <u8x8_gpio_call>
  arg = arg >> 2;
 800312c:	08a2      	lsrs	r2, r4, #2
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS2, arg&1);
 800312e:	4032      	ands	r2, r6
 8003130:	1c28      	adds	r0, r5, #0
 8003132:	214f      	movs	r1, #79	; 0x4f
 8003134:	f7ff f8ca 	bl	80022cc <u8x8_gpio_call>
}
 8003138:	bd70      	pop	{r4, r5, r6, pc}
 800313a:	46c0      	nop			; (mov r8, r8)

0800313c <u8x8_byte_ks0108>:

/* 6800 mode */
uint8_t u8x8_byte_ks0108(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	4646      	mov	r6, r8
 8003140:	464f      	mov	r7, r9
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 8003142:	3914      	subs	r1, #20
 8003144:	b2c9      	uxtb	r1, r1
  u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS2, arg&1);
}

/* 6800 mode */
uint8_t u8x8_byte_ks0108(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003146:	b4c0      	push	{r6, r7}
 8003148:	1c14      	adds	r4, r2, #0
 800314a:	1c06      	adds	r6, r0, #0
 800314c:	4698      	mov	r8, r3
  uint8_t i, b;
  uint8_t *data;
 
  switch(msg)
 800314e:	290c      	cmp	r1, #12
 8003150:	d862      	bhi.n	8003218 <u8x8_byte_ks0108+0xdc>
 8003152:	4b32      	ldr	r3, [pc, #200]	; (800321c <u8x8_byte_ks0108+0xe0>)
 8003154:	0089      	lsls	r1, r1, #2
 8003156:	585b      	ldr	r3, [r3, r1]
 8003158:	469f      	mov	pc, r3
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 800315a:	214a      	movs	r1, #74	; 0x4a
 800315c:	f7ff f8b6 	bl	80022cc <u8x8_gpio_call>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
 8003160:	2001      	movs	r0, #1
}
 8003162:	bc0c      	pop	{r2, r3}
 8003164:	4690      	mov	r8, r2
 8003166:	4699      	mov	r9, r3
 8003168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 800316a:	6803      	ldr	r3, [r0, #0]
 800316c:	2149      	movs	r1, #73	; 0x49
 800316e:	785a      	ldrb	r2, [r3, #1]
 8003170:	f7ff f8ac 	bl	80022cc <u8x8_gpio_call>
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8003174:	1c30      	adds	r0, r6, #0
 8003176:	2148      	movs	r1, #72	; 0x48
 8003178:	2200      	movs	r2, #0
 800317a:	f7ff f8a7 	bl	80022cc <u8x8_gpio_call>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
 800317e:	2001      	movs	r0, #1
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
      /* ensure that the enable signal is low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      break;
 8003180:	e7ef      	b.n	8003162 <u8x8_byte_ks0108+0x26>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8003182:	2a00      	cmp	r2, #0
 8003184:	d02e      	beq.n	80031e4 <u8x8_byte_ks0108+0xa8>
 8003186:	3c01      	subs	r4, #1
 8003188:	b2e4      	uxtb	r4, r4
 800318a:	3401      	adds	r4, #1
 800318c:	4444      	add	r4, r8
 800318e:	46a1      	mov	r9, r4
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8003190:	2701      	movs	r7, #1
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8003192:	4643      	mov	r3, r8
 8003194:	781d      	ldrb	r5, [r3, #0]
	data++;
 8003196:	2301      	movs	r3, #1
 8003198:	469c      	mov	ip, r3
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 800319a:	2440      	movs	r4, #64	; 0x40
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
	data++;
 800319c:	44e0      	add	r8, ip
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 800319e:	1c3a      	adds	r2, r7, #0
 80031a0:	1c21      	adds	r1, r4, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80031a2:	3401      	adds	r4, #1
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 80031a4:	402a      	ands	r2, r5
 80031a6:	1c30      	adds	r0, r6, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80031a8:	b2e4      	uxtb	r4, r4
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 80031aa:	f7ff f88f 	bl	80022cc <u8x8_gpio_call>
	  b >>= 1;
 80031ae:	086d      	lsrs	r5, r5, #1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80031b0:	2c48      	cmp	r4, #72	; 0x48
 80031b2:	d1f4      	bne.n	800319e <u8x8_byte_ks0108+0x62>
	{
	  u8x8_gpio_call(u8x8, i, b&1);
	  b >>= 1;
	}    
	
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 80031b4:	6833      	ldr	r3, [r6, #0]
 80031b6:	1c30      	adds	r0, r6, #0
 80031b8:	7b9a      	ldrb	r2, [r3, #14]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	f7ff f886 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 80031c0:	1c30      	adds	r0, r6, #0
 80031c2:	2148      	movs	r1, #72	; 0x48
 80031c4:	2201      	movs	r2, #1
 80031c6:	f7ff f881 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 80031ca:	6833      	ldr	r3, [r6, #0]
 80031cc:	1c30      	adds	r0, r6, #0
 80031ce:	7bda      	ldrb	r2, [r3, #15]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	f7ff f87b 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 80031d6:	1c30      	adds	r0, r6, #0
 80031d8:	2148      	movs	r1, #72	; 0x48
 80031da:	2200      	movs	r2, #0
 80031dc:	f7ff f876 	bl	80022cc <u8x8_gpio_call>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 80031e0:	45c8      	cmp	r8, r9
 80031e2:	d1d6      	bne.n	8003192 <u8x8_byte_ks0108+0x56>
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
 80031e4:	2001      	movs	r0, #1
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      /* expects 3 bits in arg_int for the chip select lines */ 
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
 80031e6:	e7bc      	b.n	8003162 <u8x8_byte_ks0108+0x26>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      /* expects 3 bits in arg_int for the chip select lines */ 
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
 80031e8:	1c11      	adds	r1, r2, #0
 80031ea:	f7ff ff8f 	bl	800310c <u8x8_byte_set_ks0108_cs>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 80031ee:	6833      	ldr	r3, [r6, #0]
 80031f0:	6974      	ldr	r4, [r6, #20]
 80031f2:	789a      	ldrb	r2, [r3, #2]
 80031f4:	1c30      	adds	r0, r6, #0
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	2300      	movs	r3, #0
 80031fa:	47a0      	blx	r4
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
    default:
      return 0;
  }
  return 1;
 80031fc:	2001      	movs	r0, #1
 80031fe:	e7b0      	b.n	8003162 <u8x8_byte_ks0108+0x26>
      /* expects 3 bits in arg_int for the chip select lines */ 
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8003200:	6803      	ldr	r3, [r0, #0]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	78da      	ldrb	r2, [r3, #3]
 8003206:	6975      	ldr	r5, [r6, #20]
 8003208:	2300      	movs	r3, #0
 800320a:	47a8      	blx	r5
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
 800320c:	1c30      	adds	r0, r6, #0
 800320e:	1c21      	adds	r1, r4, #0
 8003210:	f7ff ff7c 	bl	800310c <u8x8_byte_set_ks0108_cs>
      break;
    default:
      return 0;
  }
  return 1;
 8003214:	2001      	movs	r0, #1
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      u8x8_byte_set_ks0108_cs(u8x8, arg_int);
      break;
 8003216:	e7a4      	b.n	8003162 <u8x8_byte_ks0108+0x26>
    default:
      return 0;
 8003218:	2000      	movs	r0, #0
 800321a:	e7a2      	b.n	8003162 <u8x8_byte_ks0108+0x26>
 800321c:	080053cc 	.word	0x080053cc

08003220 <u8x8_byte_sed1520>:
/* sed1520 or sbn1661 
  U8X8_MSG_GPIO_E --> E1
  U8X8_MSG_GPIO_CS --> E2
*/
uint8_t u8x8_byte_sed1520(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	464e      	mov	r6, r9
 8003224:	4645      	mov	r5, r8
 8003226:	4657      	mov	r7, sl
  uint8_t i, b;
  uint8_t *data;
  static uint8_t enable_pin;
 
  switch(msg)
 8003228:	3914      	subs	r1, #20
 800322a:	b2c9      	uxtb	r1, r1
/* sed1520 or sbn1661 
  U8X8_MSG_GPIO_E --> E1
  U8X8_MSG_GPIO_CS --> E2
*/
uint8_t u8x8_byte_sed1520(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800322c:	b4e0      	push	{r5, r6, r7}
 800322e:	4698      	mov	r8, r3
 8003230:	1c06      	adds	r6, r0, #0
  uint8_t i, b;
  uint8_t *data;
  static uint8_t enable_pin;
 
  switch(msg)
 8003232:	290c      	cmp	r1, #12
 8003234:	d861      	bhi.n	80032fa <u8x8_byte_sed1520+0xda>
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <u8x8_byte_sed1520+0xe0>)
 8003238:	0089      	lsls	r1, r1, #2
 800323a:	585b      	ldr	r3, [r3, r1]
 800323c:	469f      	mov	pc, r3
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      /* cs lines are not supported for the SED1520/SBN1661 */
      /* instead, this will select the E1 or E2 line */ 
      enable_pin = U8X8_MSG_GPIO_E;
      if ( arg_int != 0 )
 800323e:	2a00      	cmp	r2, #0
 8003240:	d01c      	beq.n	800327c <u8x8_byte_sed1520+0x5c>
	enable_pin = U8X8_MSG_GPIO_CS;
 8003242:	2249      	movs	r2, #73	; 0x49
 8003244:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <u8x8_byte_sed1520+0xe4>)
 8003246:	705a      	strb	r2, [r3, #1]
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;
    default:
      return 0;
  }
  return 1;
 8003248:	2001      	movs	r0, #1
}
 800324a:	bc1c      	pop	{r2, r3, r4}
 800324c:	4690      	mov	r8, r2
 800324e:	4699      	mov	r9, r3
 8003250:	46a2      	mov	sl, r4
 8003252:	bdf0      	pop	{r4, r5, r6, r7, pc}
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS, 0);
      enable_pin = U8X8_MSG_GPIO_E;
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8003254:	214a      	movs	r1, #74	; 0x4a
 8003256:	f7ff f839 	bl	80022cc <u8x8_gpio_call>
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;
    default:
      return 0;
  }
  return 1;
 800325a:	2001      	movs	r0, #1
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS, 0);
      enable_pin = U8X8_MSG_GPIO_E;
      break;
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
 800325c:	e7f5      	b.n	800324a <u8x8_byte_sed1520+0x2a>
      }
      break;
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	2149      	movs	r1, #73	; 0x49
 8003262:	785a      	ldrb	r2, [r3, #1]
 8003264:	f7ff f832 	bl	80022cc <u8x8_gpio_call>
      /* ensure that the enable signals are low */
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 8003268:	1c30      	adds	r0, r6, #0
 800326a:	2148      	movs	r1, #72	; 0x48
 800326c:	2200      	movs	r2, #0
 800326e:	f7ff f82d 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS, 0);
 8003272:	1c30      	adds	r0, r6, #0
 8003274:	2149      	movs	r1, #73	; 0x49
 8003276:	2200      	movs	r2, #0
 8003278:	f7ff f828 	bl	80022cc <u8x8_gpio_call>
      enable_pin = U8X8_MSG_GPIO_E;
 800327c:	2248      	movs	r2, #72	; 0x48
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <u8x8_byte_sed1520+0xe4>)
 8003280:	705a      	strb	r2, [r3, #1]
 8003282:	e7e1      	b.n	8003248 <u8x8_byte_sed1520+0x28>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 8003284:	2a00      	cmp	r2, #0
 8003286:	d0df      	beq.n	8003248 <u8x8_byte_sed1520+0x28>
 8003288:	3a01      	subs	r2, #1
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	3201      	adds	r2, #1
 800328e:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <u8x8_byte_sed1520+0xe4>)
 8003290:	4442      	add	r2, r8
 8003292:	4691      	mov	r9, r2
 8003294:	469a      	mov	sl, r3
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 8003296:	2701      	movs	r7, #1
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
 8003298:	4643      	mov	r3, r8
 800329a:	781d      	ldrb	r5, [r3, #0]
	data++;
 800329c:	2301      	movs	r3, #1
 800329e:	469c      	mov	ip, r3
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80032a0:	2440      	movs	r4, #64	; 0x40
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
      {
	b = *data;
	data++;
 80032a2:	44e0      	add	r8, ip
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 80032a4:	1c3a      	adds	r2, r7, #0
 80032a6:	1c21      	adds	r1, r4, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80032a8:	3401      	adds	r4, #1
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 80032aa:	402a      	ands	r2, r5
 80032ac:	1c30      	adds	r0, r6, #0
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80032ae:	b2e4      	uxtb	r4, r4
	{
	  u8x8_gpio_call(u8x8, i, b&1);
 80032b0:	f7ff f80c 	bl	80022cc <u8x8_gpio_call>
	  b >>= 1;
 80032b4:	086d      	lsrs	r5, r5, #1
      while( arg_int > 0 )
      {
	b = *data;
	data++;
	arg_int--;
	for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 80032b6:	2c48      	cmp	r4, #72	; 0x48
 80032b8:	d1f4      	bne.n	80032a4 <u8x8_byte_sed1520+0x84>
	{
	  u8x8_gpio_call(u8x8, i, b&1);
	  b >>= 1;
	}    
	
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 80032ba:	6833      	ldr	r3, [r6, #0]
 80032bc:	1c30      	adds	r0, r6, #0
 80032be:	7b9a      	ldrb	r2, [r3, #14]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	f7ff f803 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, enable_pin, 1);
 80032c6:	4653      	mov	r3, sl
 80032c8:	1c30      	adds	r0, r6, #0
 80032ca:	7859      	ldrb	r1, [r3, #1]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f7fe fffd 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 200);		/* KS0108 requires 450 ns, use 200 here */
 80032d2:	1c30      	adds	r0, r6, #0
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	22c8      	movs	r2, #200	; 0xc8
 80032d8:	f7fe fff8 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);  /* expect 250 here */
 80032dc:	6833      	ldr	r3, [r6, #0]
 80032de:	1c30      	adds	r0, r6, #0
 80032e0:	7bda      	ldrb	r2, [r3, #15]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	f7fe fff2 	bl	80022cc <u8x8_gpio_call>
	u8x8_gpio_call(u8x8, enable_pin, 0);
 80032e8:	4653      	mov	r3, sl
 80032ea:	1c30      	adds	r0, r6, #0
 80032ec:	7859      	ldrb	r1, [r3, #1]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f7fe ffec 	bl	80022cc <u8x8_gpio_call>
 
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 )
 80032f4:	45c8      	cmp	r8, r9
 80032f6:	d1cf      	bne.n	8003298 <u8x8_byte_sed1520+0x78>
 80032f8:	e7a6      	b.n	8003248 <u8x8_byte_sed1520+0x28>
	enable_pin = U8X8_MSG_GPIO_CS;
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      break;
    default:
      return 0;
 80032fa:	2000      	movs	r0, #0
 80032fc:	e7a5      	b.n	800324a <u8x8_byte_sed1520+0x2a>
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	08005400 	.word	0x08005400
 8003304:	200000b0 	.word	0x200000b0

08003308 <u8x8_byte_sw_i2c>:

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t *data;
 
  switch(msg)
 8003308:	3914      	subs	r1, #20
 800330a:	b2c9      	uxtb	r1, r1
  /* 1: nothing happend during ack cycle */  
  i2c_read_bit(u8x8);
}

uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	1c05      	adds	r5, r0, #0
 8003310:	1c1c      	adds	r4, r3, #0
  uint8_t *data;
 
  switch(msg)
 8003312:	290c      	cmp	r1, #12
 8003314:	d85f      	bhi.n	80033d6 <u8x8_byte_sw_i2c+0xce>
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <u8x8_byte_sw_i2c+0xd4>)
 8003318:	0089      	lsls	r1, r1, #2
 800331a:	585b      	ldr	r3, [r3, r1]
 800331c:	469f      	mov	pc, r3
  u8x8_gpio_SetI2CData(u8x8, 0);
}

static void i2c_start(u8x8_t *u8x8)
{
  if ( u8x8->i2c_started != 0 )
 800331e:	2321      	movs	r3, #33	; 0x21
 8003320:	5cc3      	ldrb	r3, [r0, r3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <u8x8_byte_sw_i2c+0x32>
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8003326:	214d      	movs	r1, #77	; 0x4d
 8003328:	2201      	movs	r2, #1
 800332a:	f7fe ffcf 	bl	80022cc <u8x8_gpio_call>
{
  if ( u8x8->i2c_started != 0 )
  {
    /* if already started: do restart */
    i2c_read_sda(u8x8);     /* SDA = 1 */
    i2c_delay(u8x8);
 800332e:	1c28      	adds	r0, r5, #0
 8003330:	f7ff fc44 	bl	8002bbc <i2c_delay>
    i2c_read_scl_and_delay(u8x8);
 8003334:	1c28      	adds	r0, r5, #0
 8003336:	f7ff fc49 	bl	8002bcc <i2c_read_scl_and_delay>
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 800333a:	1c28      	adds	r0, r5, #0
 800333c:	214d      	movs	r1, #77	; 0x4d
 800333e:	2201      	movs	r2, #1
 8003340:	f7fe ffc4 	bl	80022cc <u8x8_gpio_call>
}

static void i2c_clear_sda(u8x8_t *u8x8)
{
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
 8003344:	214d      	movs	r1, #77	; 0x4d
 8003346:	2200      	movs	r2, #0
 8003348:	1c28      	adds	r0, r5, #0
 800334a:	f7fe ffbf 	bl	80022cc <u8x8_gpio_call>
    i2c_read_scl_and_delay(u8x8);
  }
  i2c_read_sda(u8x8);
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
  i2c_delay(u8x8);
 800334e:	1c28      	adds	r0, r5, #0
 8003350:	f7ff fc34 	bl	8002bbc <i2c_delay>
  i2c_delay(u8x8);
}

static void i2c_clear_scl(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 0);
 8003354:	1c28      	adds	r0, r5, #0
 8003356:	214c      	movs	r1, #76	; 0x4c
 8003358:	2200      	movs	r2, #0
 800335a:	f7fe ffb7 	bl	80022cc <u8x8_gpio_call>
  i2c_read_sda(u8x8);
  /* send the start condition, both lines go from 1 to 0 */
  i2c_clear_sda(u8x8);
  i2c_delay(u8x8);
  i2c_clear_scl(u8x8);
  u8x8->i2c_started = 1;
 800335e:	2321      	movs	r3, #33	; 0x21
 8003360:	2201      	movs	r2, #1
 8003362:	54ea      	strb	r2, [r5, r3]
      break;
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      i2c_start(u8x8);
      i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
 8003364:	3b01      	subs	r3, #1
 8003366:	5ce9      	ldrb	r1, [r5, r3]
 8003368:	1c28      	adds	r0, r5, #0
 800336a:	f7ff fc53 	bl	8002c14 <i2c_write_byte>
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 800336e:	2001      	movs	r0, #1
}
 8003370:	bd70      	pop	{r4, r5, r6, pc}
}

static void i2c_clear_sda(u8x8_t *u8x8)
{
  /* set open collector and drive low */
  u8x8_gpio_SetI2CData(u8x8, 0);
 8003372:	214d      	movs	r1, #77	; 0x4d
 8003374:	2200      	movs	r2, #0
 8003376:	f7fe ffa9 	bl	80022cc <u8x8_gpio_call>

static void i2c_stop(u8x8_t *u8x8)
{
  /* set SDA to 0 */
  i2c_clear_sda(u8x8);  
  i2c_delay(u8x8);
 800337a:	1c28      	adds	r0, r5, #0
 800337c:	f7ff fc1e 	bl	8002bbc <i2c_delay>
 
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
 8003380:	1c28      	adds	r0, r5, #0
 8003382:	f7ff fc23 	bl	8002bcc <i2c_read_scl_and_delay>
}

static void i2c_read_sda(u8x8_t *u8x8)
{
  /* set as input (line will be high) */
  u8x8_gpio_SetI2CData(u8x8, 1);
 8003386:	2201      	movs	r2, #1
 8003388:	1c28      	adds	r0, r5, #0
 800338a:	214d      	movs	r1, #77	; 0x4d
 800338c:	f7fe ff9e 	bl	80022cc <u8x8_gpio_call>
  /* now release all lines */
  i2c_read_scl_and_delay(u8x8);
 
  /* set SDA to 1 */
  i2c_read_sda(u8x8);
  i2c_delay(u8x8);
 8003390:	1c28      	adds	r0, r5, #0
 8003392:	f7ff fc13 	bl	8002bbc <i2c_delay>
  u8x8->i2c_started = 0;
 8003396:	2200      	movs	r2, #0
 8003398:	2321      	movs	r3, #33	; 0x21
 800339a:	54ea      	strb	r2, [r5, r3]
 800339c:	e7e7      	b.n	800336e <u8x8_byte_sw_i2c+0x66>
  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
}

static void i2c_init(u8x8_t *u8x8)
{
  u8x8_gpio_SetI2CClock(u8x8, 1);
 800339e:	214c      	movs	r1, #76	; 0x4c
 80033a0:	2201      	movs	r2, #1
 80033a2:	f7fe ff93 	bl	80022cc <u8x8_gpio_call>
  u8x8_gpio_SetI2CData(u8x8, 1);
 80033a6:	1c28      	adds	r0, r5, #0
 80033a8:	214d      	movs	r1, #77	; 0x4d
 80033aa:	2201      	movs	r2, #1
 80033ac:	f7fe ff8e 	bl	80022cc <u8x8_gpio_call>
  
  i2c_delay(u8x8);
 80033b0:	1c28      	adds	r0, r5, #0
 80033b2:	f7ff fc03 	bl	8002bbc <i2c_delay>
      i2c_stop(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 80033b6:	2001      	movs	r0, #1
 80033b8:	e7da      	b.n	8003370 <u8x8_byte_sw_i2c+0x68>
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      
      while( arg_int > 0 )
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	d0d7      	beq.n	800336e <u8x8_byte_sw_i2c+0x66>
 80033be:	1e56      	subs	r6, r2, #1
 80033c0:	b2f6      	uxtb	r6, r6
 80033c2:	3601      	adds	r6, #1
 80033c4:	19a6      	adds	r6, r4, r6
      {
	i2c_write_byte(u8x8, *data);
 80033c6:	7821      	ldrb	r1, [r4, #0]
 80033c8:	1c28      	adds	r0, r5, #0
	data++;
 80033ca:	3401      	adds	r4, #1
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      
      while( arg_int > 0 )
      {
	i2c_write_byte(u8x8, *data);
 80033cc:	f7ff fc22 	bl	8002c14 <i2c_write_byte>
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
      
      while( arg_int > 0 )
 80033d0:	42b4      	cmp	r4, r6
 80033d2:	d1f8      	bne.n	80033c6 <u8x8_byte_sw_i2c+0xbe>
 80033d4:	e7cb      	b.n	800336e <u8x8_byte_sw_i2c+0x66>
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      i2c_stop(u8x8);
      break;
    default:
      return 0;
 80033d6:	2000      	movs	r0, #0
 80033d8:	e7ca      	b.n	8003370 <u8x8_byte_sw_i2c+0x68>
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	08005434 	.word	0x08005434

080033e0 <u8x8_gpio_and_delay_ozseccon>:
//#include "delay.h"
#include "u8x8.h"
#include <hw_config.h>

uint8_t u8x8_gpio_and_delay_ozseccon(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitTypeDefStruct;

  switch(msg)
 80033e2:	3928      	subs	r1, #40	; 0x28
 80033e4:	b2c9      	uxtb	r1, r1
//#include "delay.h"
#include "u8x8.h"
#include <hw_config.h>

uint8_t u8x8_gpio_and_delay_ozseccon(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	1c14      	adds	r4, r2, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  SPI_InitTypeDef   SPI_InitTypeDefStruct;

  switch(msg)
 80033ea:	2923      	cmp	r1, #35	; 0x23
 80033ec:	d900      	bls.n	80033f0 <u8x8_gpio_and_delay_ozseccon+0x10>
 80033ee:	e07f      	b.n	80034f0 <u8x8_gpio_and_delay_ozseccon+0x110>
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <u8x8_gpio_and_delay_ozseccon+0x118>)
 80033f2:	0089      	lsls	r1, r1, #2
 80033f4:	585b      	ldr	r3, [r3, r1]
 80033f6:	469f      	mov	pc, r3
 
            GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
        }
        break;
    case U8X8_MSG_GPIO_DC:              // DC (data/cmd, A0, register select) pin: Output level in arg_int
        GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET);
 80033f8:	2090      	movs	r0, #144	; 0x90
 80033fa:	2104      	movs	r1, #4
 80033fc:	05c0      	lsls	r0, r0, #23
 80033fe:	2201      	movs	r2, #1
 8003400:	f7fc ff4c 	bl	800029c <GPIO_WriteBit>
        if(arg_int ==0){
            GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_SET);
 8003404:	2090      	movs	r0, #144	; 0x90
 8003406:	2102      	movs	r1, #2
 8003408:	05c0      	lsls	r0, r0, #23
            GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_SET);
        }
        break;
    case U8X8_MSG_GPIO_DC:              // DC (data/cmd, A0, register select) pin: Output level in arg_int
        GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET);
        if(arg_int ==0){
 800340a:	2c00      	cmp	r4, #0
 800340c:	d165      	bne.n	80034da <u8x8_gpio_and_delay_ozseccon+0xfa>
            GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET);
        } 
      break;
    case U8X8_MSG_GPIO_RESET:              // DC (data/cmd, A0, register select) pin: Output level in arg_int
        if(arg_int ==0){
            GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET);
 800340e:	2201      	movs	r2, #1
 8003410:	f7fc ff44 	bl	800029c <GPIO_WriteBit>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8003414:	2001      	movs	r0, #1
 8003416:	b009      	add	sp, #36	; 0x24
 8003418:	bdf0      	pop	{r4, r5, r6, r7, pc}

  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
      //setup the SPI pins for the display 
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800341a:	2080      	movs	r0, #128	; 0x80
 800341c:	2101      	movs	r1, #1
 800341e:	0280      	lsls	r0, r0, #10
 8003420:	f7fd f958 	bl	80006d4 <RCC_AHBPeriphClockCmd>

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8003424:	2080      	movs	r0, #128	; 0x80
 8003426:	2101      	movs	r1, #1
 8003428:	0140      	lsls	r0, r0, #5
 800342a:	f7fd f95f 	bl	80006ec <RCC_APB2PeriphClockCmd>
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 800342e:	2090      	movs	r0, #144	; 0x90

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003430:	2500      	movs	r5, #0

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
 8003432:	23e0      	movs	r3, #224	; 0xe0
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003434:	2603      	movs	r6, #3
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003436:	2702      	movs	r7, #2

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
 8003438:	ac01      	add	r4, sp, #4
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 800343a:	1c21      	adds	r1, r4, #0
 800343c:	05c0      	lsls	r0, r0, #23

        /* SPI1 Periph clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);

        /* Configure I2C pins: SCL and SDA */
        GPIO_InitStructure.GPIO_Pin = SPI1_SCLK | SPI1_MISO | SPI1_MOSI ;
 800343e:	9301      	str	r3, [sp, #4]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003440:	7166      	strb	r6, [r4, #5]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003442:	7127      	strb	r7, [r4, #4]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003444:	71a5      	strb	r5, [r4, #6]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003446:	71e5      	strb	r5, [r4, #7]
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 8003448:	f7fc fe8e 	bl	8000168 <GPIO_Init>
        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 800344c:	2090      	movs	r0, #144	; 0x90
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
 800344e:	231e      	movs	r3, #30
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003450:	7166      	strb	r6, [r4, #5]
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 8003452:	1c21      	adds	r1, r4, #0
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003454:	3e02      	subs	r6, #2
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 8003456:	05c0      	lsls	r0, r0, #23
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);

        GPIO_InitStructure.GPIO_Pin = SPI1_NSS | SPI1_DC | SPI1_RESET | SPI1_CS;
 8003458:	9301      	str	r3, [sp, #4]
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800345a:	7126      	strb	r6, [r4, #4]
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800345c:	71a5      	strb	r5, [r4, #6]
        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 800345e:	71e6      	strb	r6, [r4, #7]
        GPIO_Init(SPI1_PORT, &GPIO_InitStructure);
 8003460:	f7fc fe82 	bl	8000168 <GPIO_Init>

        /* Connect SPI pins to AF */
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource5, GPIO_AF_0);
 8003464:	2090      	movs	r0, #144	; 0x90
 8003466:	2105      	movs	r1, #5
 8003468:	05c0      	lsls	r0, r0, #23
 800346a:	2200      	movs	r2, #0
 800346c:	f7fc ff1e 	bl	80002ac <GPIO_PinAFConfig>
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource6, GPIO_AF_0);
 8003470:	2090      	movs	r0, #144	; 0x90
 8003472:	2106      	movs	r1, #6
 8003474:	05c0      	lsls	r0, r0, #23
 8003476:	2200      	movs	r2, #0
 8003478:	f7fc ff18 	bl	80002ac <GPIO_PinAFConfig>
        GPIO_PinAFConfig(SPI1_PORT, GPIO_PinSource7, GPIO_AF_0);
 800347c:	2090      	movs	r0, #144	; 0x90
 800347e:	2200      	movs	r2, #0
 8003480:	05c0      	lsls	r0, r0, #23
 8003482:	2107      	movs	r1, #7
 8003484:	f7fc ff12 	bl	80002ac <GPIO_PinAFConfig>

        /*SPI init */
        SPI_InitTypeDefStruct.SPI_Direction = SPI_Direction_1Line_Tx;
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <u8x8_gpio_and_delay_ozseccon+0x11c>)
 800348a:	a903      	add	r1, sp, #12
 800348c:	800b      	strh	r3, [r1, #0]
        SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
 800348e:	2382      	movs	r3, #130	; 0x82
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	804b      	strh	r3, [r1, #2]
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
 8003494:	23e0      	movs	r3, #224	; 0xe0
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	808b      	strh	r3, [r1, #4]
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
        SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
        SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
        SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	814b      	strh	r3, [r1, #10]
        SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 80034a0:	3bd9      	subs	r3, #217	; 0xd9
 80034a2:	3bff      	subs	r3, #255	; 0xff
        SPI_InitTypeDefStruct.SPI_FirstBit = SPI_FirstBit_MSB;

        SPI_Init(SPI1, &SPI_InitTypeDefStruct);
 80034a4:	4816      	ldr	r0, [pc, #88]	; (8003500 <u8x8_gpio_and_delay_ozseccon+0x120>)
        /*SPI init */
        SPI_InitTypeDefStruct.SPI_Direction = SPI_Direction_1Line_Tx;
        SPI_InitTypeDefStruct.SPI_Mode = SPI_Mode_Master;
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
        SPI_InitTypeDefStruct.SPI_DataSize = SPI_DataSize_8b;
        SPI_InitTypeDefStruct.SPI_CPOL = SPI_CPOL_High;
 80034a6:	80cf      	strh	r7, [r1, #6]
        SPI_InitTypeDefStruct.SPI_CPHA = SPI_CPHA_2Edge;
 80034a8:	810e      	strh	r6, [r1, #8]
        SPI_InitTypeDefStruct.SPI_NSS = SPI_NSS_Soft;
        SPI_InitTypeDefStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
 80034aa:	818b      	strh	r3, [r1, #12]
        SPI_InitTypeDefStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 80034ac:	81cd      	strh	r5, [r1, #14]

        SPI_Init(SPI1, &SPI_InitTypeDefStruct);
 80034ae:	f000 f929 	bl	8003704 <SPI_Init>

        SPI_Cmd(SPI1, ENABLE);
 80034b2:	4813      	ldr	r0, [pc, #76]	; (8003500 <u8x8_gpio_and_delay_ozseccon+0x120>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	f000 f9ad 	bl	8003814 <SPI_Cmd>
        //GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET); //SELECT DISPLAY
        //GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET); //RESET DISPLAY
        //backlight pin
        //GPIO_WriteBit(SPI1_PORT, SPI1_BACKLIGHT, Bit_RESET);
 
      break;
 80034ba:	e7ab      	b.n	8003414 <u8x8_gpio_and_delay_ozseccon+0x34>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;
   
    case U8X8_MSG_DELAY_MILLI:
      delay_ms(arg_int);   
 80034bc:	b290      	uxth	r0, r2
 80034be:	f001 fc41 	bl	8004d44 <delay_ms>
    //delay_micro_seconds(arg_int*1000UL);
      break;
 80034c2:	e7a7      	b.n	8003414 <u8x8_gpio_and_delay_ozseccon+0x34>
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
      break;
    
    case U8X8_MSG_DELAY_10MICRO:
      delay_us(arg_int*10);   
 80034c4:	0090      	lsls	r0, r2, #2
 80034c6:	1810      	adds	r0, r2, r0
 80034c8:	0040      	lsls	r0, r0, #1
 80034ca:	f001 fc77 	bl	8004dbc <delay_us>
      break;
 80034ce:	e7a1      	b.n	8003414 <u8x8_gpio_and_delay_ozseccon+0x34>
            GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET);
        } 
      break;
    case U8X8_MSG_GPIO_RESET:              // DC (data/cmd, A0, register select) pin: Output level in arg_int
        if(arg_int ==0){
            GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET);
 80034d0:	2090      	movs	r0, #144	; 0x90
 80034d2:	2104      	movs	r1, #4
 80034d4:	05c0      	lsls	r0, r0, #23
 
            GPIO_WriteBit(SPI1_PORT, SPI1_DC, Bit_RESET);
        } 
      break;
    case U8X8_MSG_GPIO_RESET:              // DC (data/cmd, A0, register select) pin: Output level in arg_int
        if(arg_int ==0){
 80034d6:	2a00      	cmp	r2, #0
 80034d8:	d099      	beq.n	800340e <u8x8_gpio_and_delay_ozseccon+0x2e>
            GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_SET);
        } else {
 
            GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_RESET);
 80034da:	2200      	movs	r2, #0
 80034dc:	f7fc fede 	bl	800029c <GPIO_WriteBit>
 80034e0:	e798      	b.n	8003414 <u8x8_gpio_and_delay_ozseccon+0x34>
    //  delay_micro_seconds(arg_int<=2?5:1);
    //  break;
   
    case U8X8_MSG_GPIO_CS:             // CS (chip select) pin: Output level in arg_int
        if(arg_int ==0){
            GPIO_WriteBit(SPI1_PORT, SPI1_CS, Bit_RESET);
 80034e2:	2090      	movs	r0, #144	; 0x90
 80034e4:	2108      	movs	r1, #8
 80034e6:	05c0      	lsls	r0, r0, #23
    //  /* arg_int is 1 or 4: 100KHz (5us) or 400KHz (1.25us) */
    //  delay_micro_seconds(arg_int<=2?5:1);
    //  break;
   
    case U8X8_MSG_GPIO_CS:             // CS (chip select) pin: Output level in arg_int
        if(arg_int ==0){
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	d000      	beq.n	80034ee <u8x8_gpio_and_delay_ozseccon+0x10e>
 80034ec:	e78f      	b.n	800340e <u8x8_gpio_and_delay_ozseccon+0x2e>
 80034ee:	e7f4      	b.n	80034da <u8x8_gpio_and_delay_ozseccon+0xfa>
            GPIO_WriteBit(SPI1_PORT, SPI1_RESET, Bit_RESET);
        } 
      break;
 
    default:
      u8x8_SetGPIOResult(u8x8, 1);
 80034f0:	2201      	movs	r2, #1
 80034f2:	2324      	movs	r3, #36	; 0x24
 80034f4:	54c2      	strb	r2, [r0, r3]
      break;
 80034f6:	e78d      	b.n	8003414 <u8x8_gpio_and_delay_ozseccon+0x34>
 80034f8:	08005468 	.word	0x08005468
 80034fc:	ffffc000 	.word	0xffffc000
 8003500:	40013000 	.word	0x40013000

08003504 <u8x8_byte_stm32f0_hw_spi>:
}

uint8_t u8x8_byte_stm32f0_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
  uint8_t *data;
  //uint8_t internal_spi_mode; 
  switch(msg) {
 8003504:	3914      	subs	r1, #20
 8003506:	b2c9      	uxtb	r1, r1
      break;
  }
  return 1;
}

uint8_t u8x8_byte_stm32f0_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	1c05      	adds	r5, r0, #0
 800350c:	1c16      	adds	r6, r2, #0
 800350e:	1c1c      	adds	r4, r3, #0
  uint8_t *data;
  //uint8_t internal_spi_mode; 
  switch(msg) {
 8003510:	290c      	cmp	r1, #12
 8003512:	d857      	bhi.n	80035c4 <u8x8_byte_stm32f0_hw_spi+0xc0>
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <u8x8_byte_stm32f0_hw_spi+0xc4>)
 8003516:	0089      	lsls	r1, r1, #2
 8003518:	585b      	ldr	r3, [r3, r1]
 800351a:	469f      	mov	pc, r3
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
      while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); //wait till we can transfer?
      break;
    case U8X8_MSG_BYTE_SET_DC:
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      u8x8_gpio_SetDC(u8x8, arg_int);
 800351c:	214a      	movs	r1, #74	; 0x4a
 800351e:	f7fe fed5 	bl	80022cc <u8x8_gpio_call>
      //SPI.endTransaction();
      break;
    default:
      return 0;
  }  
  return 1;
 8003522:	2001      	movs	r0, #1
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
        data++;
        arg_int--;
      }  
      break;
    case U8X8_MSG_BYTE_INIT:
      u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	214b      	movs	r1, #75	; 0x4b
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	f7fe fece 	bl	80022cc <u8x8_gpio_call>
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	1c28      	adds	r0, r5, #0
 8003534:	785a      	ldrb	r2, [r3, #1]
 8003536:	2149      	movs	r1, #73	; 0x49
 8003538:	f7fe fec8 	bl	80022cc <u8x8_gpio_call>
      while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); //wait till we can transfer?
 800353c:	4823      	ldr	r0, [pc, #140]	; (80035cc <u8x8_byte_stm32f0_hw_spi+0xc8>)
 800353e:	2102      	movs	r1, #2
 8003540:	f000 fa42 	bl	80039c8 <SPI_I2S_GetFlagStatus>
 8003544:	2800      	cmp	r0, #0
 8003546:	d0f9      	beq.n	800353c <u8x8_byte_stm32f0_hw_spi+0x38>
 8003548:	e7eb      	b.n	8003522 <u8x8_byte_stm32f0_hw_spi+0x1e>
uint8_t u8x8_byte_stm32f0_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
  uint8_t *data;
  //uint8_t internal_spi_mode; 
  switch(msg) {
    case U8X8_MSG_BYTE_SEND:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
 800354a:	6803      	ldr	r3, [r0, #0]
 800354c:	2149      	movs	r1, #73	; 0x49
 800354e:	785a      	ldrb	r2, [r3, #1]
 8003550:	f7fe febc 	bl	80022cc <u8x8_gpio_call>
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 ) {
 8003554:	2e00      	cmp	r6, #0
 8003556:	d0e4      	beq.n	8003522 <u8x8_byte_stm32f0_hw_spi+0x1e>
 8003558:	1e75      	subs	r5, r6, #1
 800355a:	b2ed      	uxtb	r5, r5
 800355c:	3501      	adds	r5, #1
 800355e:	1965      	adds	r5, r4, r5
        while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8003560:	481a      	ldr	r0, [pc, #104]	; (80035cc <u8x8_byte_stm32f0_hw_spi+0xc8>)
 8003562:	2102      	movs	r1, #2
 8003564:	f000 fa30 	bl	80039c8 <SPI_I2S_GetFlagStatus>
 8003568:	2800      	cmp	r0, #0
 800356a:	d0f9      	beq.n	8003560 <u8x8_byte_stm32f0_hw_spi+0x5c>
        SPI_SendData8(SPI1, (uint8_t) *data); 
 800356c:	7821      	ldrb	r1, [r4, #0]
 800356e:	4817      	ldr	r0, [pc, #92]	; (80035cc <u8x8_byte_stm32f0_hw_spi+0xc8>)
        data++;
 8003570:	3401      	adds	r4, #1
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 ) {
        while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
        SPI_SendData8(SPI1, (uint8_t) *data); 
 8003572:	f000 f9c3 	bl	80038fc <SPI_SendData8>
  switch(msg) {
    case U8X8_MSG_BYTE_SEND:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      data = (uint8_t *)arg_ptr;
      while( arg_int > 0 ) {
 8003576:	42ac      	cmp	r4, r5
 8003578:	d1f2      	bne.n	8003560 <u8x8_byte_stm32f0_hw_spi+0x5c>
 800357a:	e7d2      	b.n	8003522 <u8x8_byte_stm32f0_hw_spi+0x1e>
    case U8X8_MSG_BYTE_SET_DC:
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      u8x8_gpio_SetDC(u8x8, arg_int);
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
 800357c:	6803      	ldr	r3, [r0, #0]
 800357e:	2149      	movs	r1, #73	; 0x49
 8003580:	785a      	ldrb	r2, [r3, #1]
 8003582:	f7fe fea3 	bl	80022cc <u8x8_gpio_call>
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      u8x8_gpio_SetDC(u8x8, u8x8->display_info->chip_disable_level);  
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	1c28      	adds	r0, r5, #0
 800358a:	785a      	ldrb	r2, [r3, #1]
 800358c:	214a      	movs	r1, #74	; 0x4a
 800358e:	f7fe fe9d 	bl	80022cc <u8x8_gpio_call>
      //u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);  
      while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8003592:	480e      	ldr	r0, [pc, #56]	; (80035cc <u8x8_byte_stm32f0_hw_spi+0xc8>)
 8003594:	2102      	movs	r1, #2
 8003596:	f000 fa17 	bl	80039c8 <SPI_I2S_GetFlagStatus>
 800359a:	2800      	cmp	r0, #0
 800359c:	d0f9      	beq.n	8003592 <u8x8_byte_stm32f0_hw_spi+0x8e>
 800359e:	e7c0      	b.n	8003522 <u8x8_byte_stm32f0_hw_spi+0x1e>
      //SPI.beginTransaction(SPISettings(u8x8->display_info->sck_clock_hz, MSBFIRST, internal_spi_mode));
      //u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
      //u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:      
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level); //acquire bus
 80035a0:	6803      	ldr	r3, [r0, #0]
 80035a2:	2149      	movs	r1, #73	; 0x49
 80035a4:	785a      	ldrb	r2, [r3, #1]
 80035a6:	f7fe fe91 	bl	80022cc <u8x8_gpio_call>
      //u8x8_gpio_SetReset(u8x8, u8x8->display_info->chip_enable_level); //acquire bus
      u8x8_gpio_SetDC(u8x8, u8x8->display_info->chip_enable_level);  
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	1c28      	adds	r0, r5, #0
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	214a      	movs	r1, #74	; 0x4a
 80035b2:	f7fe fe8b 	bl	80022cc <u8x8_gpio_call>
      while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE)); 
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <u8x8_byte_stm32f0_hw_spi+0xc8>)
 80035b8:	2102      	movs	r1, #2
 80035ba:	f000 fa05 	bl	80039c8 <SPI_I2S_GetFlagStatus>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0f9      	beq.n	80035b6 <u8x8_byte_stm32f0_hw_spi+0xb2>
 80035c2:	e7ae      	b.n	8003522 <u8x8_byte_stm32f0_hw_spi+0x1e>
      //u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
      //u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
      //SPI.endTransaction();
      break;
    default:
      return 0;
 80035c4:	2000      	movs	r0, #0
 80035c6:	e7ad      	b.n	8003524 <u8x8_byte_stm32f0_hw_spi+0x20>
 80035c8:	080054f8 	.word	0x080054f8
 80035cc:	40013000 	.word	0x40013000

080035d0 <u8g2_DrawHVLine.part.0>:

/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
 80035d0:	b530      	push	{r4, r5, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	ac06      	add	r4, sp, #24
 80035d6:	7825      	ldrb	r5, [r4, #0]
{
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80035d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035da:	9500      	str	r5, [sp, #0]
 80035dc:	6864      	ldr	r4, [r4, #4]
 80035de:	47a0      	blx	r4
}
 80035e0:	b003      	add	sp, #12
 80035e2:	bd30      	pop	{r4, r5, pc}

080035e4 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80035e4:	b530      	push	{r4, r5, lr}
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80035e6:	2539      	movs	r5, #57	; 0x39
 80035e8:	5d45      	ldrb	r5, [r0, r5]

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80035ea:	b083      	sub	sp, #12
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80035ec:	00ed      	lsls	r5, r5, #3

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80035ee:	ac06      	add	r4, sp, #24
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80035f0:	1b52      	subs	r2, r2, r5

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80035f2:	7824      	ldrb	r4, [r4, #0]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80035f4:	b2d2      	uxtb	r2, r2

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d00a      	beq.n	8003610 <u8g2_draw_hv_line_4dir+0x2c>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
    return;
  }
#endif
  
  if ( dir == 2 )
 80035fa:	2c02      	cmp	r4, #2
 80035fc:	d015      	beq.n	800362a <u8g2_draw_hv_line_4dir+0x46>
  {
    x -= len;
    x++;
  }
  else if ( dir == 3 )
 80035fe:	2c03      	cmp	r4, #3
 8003600:	d017      	beq.n	8003632 <u8g2_draw_hv_line_4dir+0x4e>
  }
  dir &= 1;  
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003602:	2501      	movs	r5, #1
 8003604:	402c      	ands	r4, r5
 8003606:	9400      	str	r4, [sp, #0]
 8003608:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800360a:	47a0      	blx	r4
#endif
}
 800360c:	b003      	add	sp, #12
 800360e:	bd30      	pop	{r4, r5, pc}
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 8003610:	3339      	adds	r3, #57	; 0x39
 8003612:	5cc3      	ldrb	r3, [r0, r3]
 8003614:	428b      	cmp	r3, r1
 8003616:	d9f9      	bls.n	800360c <u8g2_draw_hv_line_4dir+0x28>
 8003618:	233b      	movs	r3, #59	; 0x3b
 800361a:	5cc3      	ldrb	r3, [r0, r3]
 800361c:	4293      	cmp	r3, r2
 800361e:	d9f5      	bls.n	800360c <u8g2_draw_hv_line_4dir+0x28>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003620:	9400      	str	r4, [sp, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003626:	47a0      	blx	r4
 8003628:	e7f0      	b.n	800360c <u8g2_draw_hv_line_4dir+0x28>
 800362a:	3101      	adds	r1, #1
#endif
  
  if ( dir == 2 )
  {
    x -= len;
    x++;
 800362c:	1ac9      	subs	r1, r1, r3
 800362e:	b2c9      	uxtb	r1, r1
 8003630:	e7e7      	b.n	8003602 <u8g2_draw_hv_line_4dir+0x1e>
 8003632:	1ad2      	subs	r2, r2, r3
  }
  else if ( dir == 3 )
  {
    y -= len;
    y++;
 8003634:	3201      	adds	r2, #1
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	e7e3      	b.n	8003602 <u8g2_draw_hv_line_4dir+0x1e>
 800363a:	46c0      	nop			; (mov r8, r8)

0800363c <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800363c:	b510      	push	{r4, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	ac04      	add	r4, sp, #16
 8003642:	7824      	ldrb	r4, [r4, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <u8g2_DrawHVLine+0x12>
 8003648:	9400      	str	r4, [sp, #0]
 800364a:	f7ff ffc1 	bl	80035d0 <u8g2_DrawHVLine.part.0>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
}
 800364e:	b002      	add	sp, #8
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)

08003654 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003654:	b510      	push	{r4, lr}
 8003656:	b082      	sub	sp, #8
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <u8g2_DrawHLine+0x10>
 800365c:	2400      	movs	r4, #0
 800365e:	9400      	str	r4, [sp, #0]
 8003660:	f7ff ffb6 	bl	80035d0 <u8g2_DrawHVLine.part.0>
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
}
 8003664:	b002      	add	sp, #8
 8003666:	bd10      	pop	{r4, pc}

08003668 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b082      	sub	sp, #8
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <u8g2_DrawVLine+0x10>
 8003670:	2401      	movs	r4, #1
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	f7ff ffac 	bl	80035d0 <u8g2_DrawHVLine.part.0>
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
 8003678:	b002      	add	sp, #8
 800367a:	bd10      	pop	{r4, pc}

0800367c <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800367c:	2300      	movs	r3, #0
 800367e:	b500      	push	{lr}
 8003680:	b083      	sub	sp, #12
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	f7ff ffa3 	bl	80035d0 <u8g2_DrawHVLine.part.0>
    return;
  if ( x >= u8g2->user_x1 )
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
 800368a:	b003      	add	sp, #12
 800368c:	bd00      	pop	{pc}
 800368e:	46c0      	nop			; (mov r8, r8)

08003690 <u8g2_SetDrawColor>:
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
 8003690:	2902      	cmp	r1, #2
 8003692:	d903      	bls.n	800369c <u8g2_SetDrawColor+0xc>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003694:	2201      	movs	r2, #1
 8003696:	237b      	movs	r3, #123	; 0x7b
 8003698:	54c2      	strb	r2, [r0, r3]
}
 800369a:	4770      	bx	lr
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800369c:	237b      	movs	r3, #123	; 0x7b
 800369e:	54c1      	strb	r1, [r0, r3]
 80036a0:	e7fb      	b.n	800369a <u8g2_SetDrawColor+0xa>
 80036a2:	46c0      	nop			; (mov r8, r8)

080036a4 <SPI_I2S_DeInit>:
  *         reset values.
  * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80036a4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <SPI_I2S_DeInit+0x3c>)
 80036a8:	4298      	cmp	r0, r3
 80036aa:	d00e      	beq.n	80036ca <SPI_I2S_DeInit+0x26>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else
  {
    if (SPIx == SPI2)
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <SPI_I2S_DeInit+0x40>)
 80036ae:	4298      	cmp	r0, r3
 80036b0:	d000      	beq.n	80036b4 <SPI_I2S_DeInit+0x10>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  }
}
 80036b2:	bd08      	pop	{r3, pc}
  else
  {
    if (SPIx == SPI2)
    {
      /* Enable SPI2 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80036b4:	2080      	movs	r0, #128	; 0x80
 80036b6:	2101      	movs	r1, #1
 80036b8:	01c0      	lsls	r0, r0, #7
 80036ba:	f7fd f847 	bl	800074c <RCC_APB1PeriphResetCmd>
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80036be:	2080      	movs	r0, #128	; 0x80
 80036c0:	2100      	movs	r1, #0
 80036c2:	01c0      	lsls	r0, r0, #7
 80036c4:	f7fd f842 	bl	800074c <RCC_APB1PeriphResetCmd>
 80036c8:	e7f3      	b.n	80036b2 <SPI_I2S_DeInit+0xe>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80036ca:	2080      	movs	r0, #128	; 0x80
 80036cc:	2101      	movs	r1, #1
 80036ce:	0140      	lsls	r0, r0, #5
 80036d0:	f7fd f830 	bl	8000734 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80036d4:	2080      	movs	r0, #128	; 0x80
 80036d6:	2100      	movs	r1, #0
 80036d8:	0140      	lsls	r0, r0, #5
 80036da:	f7fd f82b 	bl	8000734 <RCC_APB2PeriphResetCmd>
 80036de:	e7e8      	b.n	80036b2 <SPI_I2S_DeInit+0xe>
 80036e0:	40013000 	.word	0x40013000
 80036e4:	40003800 	.word	0x40003800

080036e8 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80036e8:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80036ea:	22e0      	movs	r2, #224	; 0xe0
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80036ec:	8003      	strh	r3, [r0, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 80036ee:	8043      	strh	r3, [r0, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80036f0:	00d2      	lsls	r2, r2, #3
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80036f2:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80036f4:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80036f6:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80036f8:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80036fa:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80036fc:	3307      	adds	r3, #7
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80036fe:	8082      	strh	r2, [r0, #4]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8003700:	8203      	strh	r3, [r0, #16]
}
 8003702:	4770      	bx	lr

08003704 <SPI_Init>:

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003704:	23c1      	movs	r3, #193	; 0xc1
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8003706:	b510      	push	{r4, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8003708:	8804      	ldrh	r4, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800370a:	019b      	lsls	r3, r3, #6
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 800370c:	89ca      	ldrh	r2, [r1, #14]

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800370e:	401c      	ands	r4, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8003710:	880b      	ldrh	r3, [r1, #0]
 8003712:	4313      	orrs	r3, r2
 8003714:	88ca      	ldrh	r2, [r1, #6]
 8003716:	4313      	orrs	r3, r2
 8003718:	890a      	ldrh	r2, [r1, #8]
 800371a:	4313      	orrs	r3, r2
 800371c:	894a      	ldrh	r2, [r1, #10]
 800371e:	4313      	orrs	r3, r2
 8003720:	898a      	ldrh	r2, [r1, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	4323      	orrs	r3, r4
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8003726:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8003728:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <SPI_Init+0x4c>)
 800372c:	4013      	ands	r3, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 800372e:	888a      	ldrh	r2, [r1, #4]
 8003730:	4313      	orrs	r3, r2
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8003732:	2204      	movs	r2, #4
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8003734:	8083      	strh	r3, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8003736:	8a0b      	ldrh	r3, [r1, #16]
 8003738:	8203      	strh	r3, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800373a:	8803      	ldrh	r3, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 800373c:	4393      	bics	r3, r2
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 800373e:	884a      	ldrh	r2, [r1, #2]
 8003740:	4313      	orrs	r3, r2
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8003742:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8003744:	8b82      	ldrh	r2, [r0, #28]
 8003746:	4b03      	ldr	r3, [pc, #12]	; (8003754 <SPI_Init+0x50>)
 8003748:	4013      	ands	r3, r2
 800374a:	8383      	strh	r3, [r0, #28]
}
 800374c:	bd10      	pop	{r4, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	fffff0ff 	.word	0xfffff0ff
 8003754:	fffff7ff 	.word	0xfffff7ff

08003758 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8003758:	2300      	movs	r3, #0

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800375a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800375c:	8003      	strh	r3, [r0, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800375e:	8043      	strh	r3, [r0, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8003760:	8083      	strh	r3, [r0, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8003762:	80c3      	strh	r3, [r0, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8003764:	6082      	str	r2, [r0, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8003766:	8183      	strh	r3, [r0, #12]
}
 8003768:	4770      	bx	lr
 800376a:	46c0      	nop			; (mov r8, r8)

0800376c <I2S_Init>:
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	4647      	mov	r7, r8
 8003770:	b480      	push	{r7}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <I2S_Init+0xa4>)
 8003774:	8b82      	ldrh	r2, [r0, #28]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8003776:	b088      	sub	sp, #32
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8003778:	4013      	ands	r3, r2
  SPIx->I2SPR = 0x0002;
 800377a:	2202      	movs	r2, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 800377c:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 800377e:	8402      	strh	r2, [r0, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8003780:	8b83      	ldrh	r3, [r0, #28]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8003782:	1c05      	adds	r5, r0, #0
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8003784:	b29e      	uxth	r6, r3

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8003786:	688b      	ldr	r3, [r1, #8]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8003788:	1c0c      	adds	r4, r1, #0

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800378a:	2b02      	cmp	r3, #2
 800378c:	d037      	beq.n	80037fe <I2S_Init+0x92>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800378e:	888b      	ldrh	r3, [r1, #4]
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8003790:	a801      	add	r0, sp, #4
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8003792:	4259      	negs	r1, r3
 8003794:	4159      	adcs	r1, r3
 8003796:	1a53      	subs	r3, r2, r1
 8003798:	4698      	mov	r8, r3
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 800379a:	f7fc feeb 	bl	8000574 <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	88e7      	ldrh	r7, [r4, #6]

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 80037a2:	9801      	ldr	r0, [sp, #4]

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	429f      	cmp	r7, r3
 80037a8:	d02b      	beq.n	8003802 <I2S_Init+0x96>
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80037aa:	4643      	mov	r3, r8
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	f001 f905 	bl	80049bc <__aeabi_uidiv>
 80037b2:	0083      	lsls	r3, r0, #2
 80037b4:	1818      	adds	r0, r3, r0
 80037b6:	68a1      	ldr	r1, [r4, #8]
 80037b8:	0040      	lsls	r0, r0, #1
 80037ba:	f001 f8ff 	bl	80049bc <__aeabi_uidiv>
 80037be:	3005      	adds	r0, #5
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 80037c0:	210a      	movs	r1, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80037c2:	b280      	uxth	r0, r0
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 80037c4:	f001 f8fa 	bl	80049bc <__aeabi_uidiv>

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 80037c8:	2301      	movs	r3, #1
 80037ca:	4003      	ands	r3, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80037cc:	1ac0      	subs	r0, r0, r3
 80037ce:	0840      	lsrs	r0, r0, #1
 80037d0:	b280      	uxth	r0, r0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80037d2:	1e81      	subs	r1, r0, #2
 80037d4:	2202      	movs	r2, #2
 80037d6:	29fd      	cmp	r1, #253	; 0xfd
 80037d8:	d915      	bls.n	8003806 <I2S_Init+0x9a>
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80037da:	4317      	orrs	r7, r2
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	8823      	ldrh	r3, [r4, #0]
 80037e0:	842f      	strh	r7, [r5, #32]
 80037e2:	4333      	orrs	r3, r6
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	4313      	orrs	r3, r2
 80037e8:	8862      	ldrh	r2, [r4, #2]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	88a2      	ldrh	r2, [r4, #4]
 80037ee:	4313      	orrs	r3, r2

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80037f0:	89a2      	ldrh	r2, [r4, #12]
 80037f2:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 80037f4:	83ab      	strh	r3, [r5, #28]
}
 80037f6:	b008      	add	sp, #32
 80037f8:	bc04      	pop	{r2}
 80037fa:	4690      	mov	r8, r2
 80037fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fe:	88cf      	ldrh	r7, [r1, #6]
 8003800:	e7eb      	b.n	80037da <I2S_Init+0x6e>

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8003802:	0a00      	lsrs	r0, r0, #8
 8003804:	e7d5      	b.n	80037b2 <I2S_Init+0x46>
 8003806:	1c02      	adds	r2, r0, #0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	431a      	orrs	r2, r3
 800380c:	e7e5      	b.n	80037da <I2S_Init+0x6e>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	fffff040 	.word	0xfffff040

08003814 <SPI_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003814:	2900      	cmp	r1, #0
 8003816:	d104      	bne.n	8003822 <SPI_Cmd+0xe>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8003818:	2240      	movs	r2, #64	; 0x40
 800381a:	8803      	ldrh	r3, [r0, #0]
 800381c:	4393      	bics	r3, r2
 800381e:	8003      	strh	r3, [r0, #0]
  }
}
 8003820:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8003822:	2340      	movs	r3, #64	; 0x40
 8003824:	8802      	ldrh	r2, [r0, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	8003      	strh	r3, [r0, #0]
 800382a:	e7f9      	b.n	8003820 <SPI_Cmd+0xc>

0800382c <SPI_TIModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800382c:	2900      	cmp	r1, #0
 800382e:	d104      	bne.n	800383a <SPI_TIModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8003830:	2210      	movs	r2, #16
 8003832:	8883      	ldrh	r3, [r0, #4]
 8003834:	4393      	bics	r3, r2
 8003836:	8083      	strh	r3, [r0, #4]
  }
}
 8003838:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800383a:	2310      	movs	r3, #16
 800383c:	8882      	ldrh	r2, [r0, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	8083      	strh	r3, [r0, #4]
 8003842:	e7f9      	b.n	8003838 <SPI_TIModeCmd+0xc>

08003844 <I2S_Cmd>:
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003844:	2900      	cmp	r1, #0
 8003846:	d104      	bne.n	8003852 <I2S_Cmd+0xe>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8003848:	8b82      	ldrh	r2, [r0, #28]
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <I2S_Cmd+0x1c>)
 800384c:	4013      	ands	r3, r2
 800384e:	8383      	strh	r3, [r0, #28]
  }
}
 8003850:	4770      	bx	lr
  assert_param(IS_SPI_1_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	8b83      	ldrh	r3, [r0, #28]
 8003856:	00d2      	lsls	r2, r2, #3
 8003858:	4313      	orrs	r3, r2
 800385a:	8383      	strh	r3, [r0, #28]
 800385c:	e7f8      	b.n	8003850 <I2S_Cmd+0xc>
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	fffffbff 	.word	0xfffffbff

08003864 <SPI_DataSizeConfig>:
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 8003864:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8003866:	4b02      	ldr	r3, [pc, #8]	; (8003870 <SPI_DataSizeConfig+0xc>)
 8003868:	4013      	ands	r3, r2
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 800386a:	4319      	orrs	r1, r3
  SPIx->CR2 = tmpreg;
 800386c:	8081      	strh	r1, [r0, #4]
}
 800386e:	4770      	bx	lr
 8003870:	fffff0ff 	.word	0xfffff0ff

08003874 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8003874:	8882      	ldrh	r2, [r0, #4]
 8003876:	4b03      	ldr	r3, [pc, #12]	; (8003884 <SPI_RxFIFOThresholdConfig+0x10>)
 8003878:	4013      	ands	r3, r2
 800387a:	8083      	strh	r3, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 800387c:	8883      	ldrh	r3, [r0, #4]
 800387e:	4319      	orrs	r1, r3
 8003880:	8081      	strh	r1, [r0, #4]
}
 8003882:	4770      	bx	lr
 8003884:	ffffefff 	.word	0xffffefff

08003888 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	01db      	lsls	r3, r3, #7
 800388c:	4299      	cmp	r1, r3
 800388e:	d004      	beq.n	800389a <SPI_BiDirectionalLineConfig+0x12>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8003890:	8802      	ldrh	r2, [r0, #0]
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SPI_BiDirectionalLineConfig+0x1c>)
 8003894:	4013      	ands	r3, r2
 8003896:	8003      	strh	r3, [r0, #0]
  }
}
 8003898:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800389a:	8803      	ldrh	r3, [r0, #0]
 800389c:	4319      	orrs	r1, r3
 800389e:	8001      	strh	r1, [r0, #0]
 80038a0:	e7fa      	b.n	8003898 <SPI_BiDirectionalLineConfig+0x10>
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	ffffbfff 	.word	0xffffbfff

080038a8 <SPI_NSSInternalSoftwareConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <SPI_NSSInternalSoftwareConfig+0x1c>)
 80038aa:	4299      	cmp	r1, r3
 80038ac:	d005      	beq.n	80038ba <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	8803      	ldrh	r3, [r0, #0]
 80038b2:	0052      	lsls	r2, r2, #1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	8003      	strh	r3, [r0, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 80038b8:	4770      	bx	lr
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80038ba:	8802      	ldrh	r2, [r0, #0]
 80038bc:	4b02      	ldr	r3, [pc, #8]	; (80038c8 <SPI_NSSInternalSoftwareConfig+0x20>)
 80038be:	4013      	ands	r3, r2
 80038c0:	8003      	strh	r3, [r0, #0]
 80038c2:	e7f9      	b.n	80038b8 <SPI_NSSInternalSoftwareConfig+0x10>
 80038c4:	0000feff 	.word	0x0000feff
 80038c8:	fffffeff 	.word	0xfffffeff

080038cc <SPI_SSOutputCmd>:
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038cc:	2900      	cmp	r1, #0
 80038ce:	d104      	bne.n	80038da <SPI_SSOutputCmd+0xe>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 80038d0:	2204      	movs	r2, #4
 80038d2:	8883      	ldrh	r3, [r0, #4]
 80038d4:	4393      	bics	r3, r2
 80038d6:	8083      	strh	r3, [r0, #4]
  }
}
 80038d8:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 80038da:	2304      	movs	r3, #4
 80038dc:	8882      	ldrh	r2, [r0, #4]
 80038de:	4313      	orrs	r3, r2
 80038e0:	8083      	strh	r3, [r0, #4]
 80038e2:	e7f9      	b.n	80038d8 <SPI_SSOutputCmd+0xc>

080038e4 <SPI_NSSPulseModeCmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80038e4:	2900      	cmp	r1, #0
 80038e6:	d104      	bne.n	80038f2 <SPI_NSSPulseModeCmd+0xe>
    SPIx->CR2 |= SPI_CR2_NSSP;
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 80038e8:	2208      	movs	r2, #8
 80038ea:	8883      	ldrh	r3, [r0, #4]
 80038ec:	4393      	bics	r3, r2
 80038ee:	8083      	strh	r3, [r0, #4]
  }
}
 80038f0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 80038f2:	2308      	movs	r3, #8
 80038f4:	8882      	ldrh	r2, [r0, #4]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	8083      	strh	r3, [r0, #4]
 80038fa:	e7f9      	b.n	80038f0 <SPI_NSSPulseModeCmd+0xc>

080038fc <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 80038fc:	7301      	strb	r1, [r0, #12]
}
 80038fe:	4770      	bx	lr

08003900 <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8003900:	8181      	strh	r1, [r0, #12]
}
 8003902:	4770      	bx	lr

08003904 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8003904:	7b00      	ldrb	r0, [r0, #12]
 8003906:	b2c0      	uxtb	r0, r0
}
 8003908:	4770      	bx	lr
 800390a:	46c0      	nop			; (mov r8, r8)

0800390c <SPI_I2S_ReceiveData16>:
  *         the SPI peripheral.  
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 800390c:	8980      	ldrh	r0, [r0, #12]
 800390e:	b280      	uxth	r0, r0
}
 8003910:	4770      	bx	lr
 8003912:	46c0      	nop			; (mov r8, r8)

08003914 <SPI_CRCLengthConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8003914:	8802      	ldrh	r2, [r0, #0]
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <SPI_CRCLengthConfig+0x10>)
 8003918:	4013      	ands	r3, r2
 800391a:	8003      	strh	r3, [r0, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 800391c:	8803      	ldrh	r3, [r0, #0]
 800391e:	4319      	orrs	r1, r3
 8003920:	8001      	strh	r1, [r0, #0]
}
 8003922:	4770      	bx	lr
 8003924:	fffff7ff 	.word	0xfffff7ff

08003928 <SPI_CalculateCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003928:	2900      	cmp	r1, #0
 800392a:	d104      	bne.n	8003936 <SPI_CalculateCRC+0xe>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800392c:	8802      	ldrh	r2, [r0, #0]
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <SPI_CalculateCRC+0x1c>)
 8003930:	4013      	ands	r3, r2
 8003932:	8003      	strh	r3, [r0, #0]
  }
}
 8003934:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	8803      	ldrh	r3, [r0, #0]
 800393a:	0192      	lsls	r2, r2, #6
 800393c:	4313      	orrs	r3, r2
 800393e:	8003      	strh	r3, [r0, #0]
 8003940:	e7f8      	b.n	8003934 <SPI_CalculateCRC+0xc>
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	ffffdfff 	.word	0xffffdfff

08003948 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	8803      	ldrh	r3, [r0, #0]
 800394c:	0152      	lsls	r2, r2, #5
 800394e:	4313      	orrs	r3, r2
 8003950:	8003      	strh	r3, [r0, #0]
}
 8003952:	4770      	bx	lr

08003954 <SPI_GetCRC>:
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 8003954:	2901      	cmp	r1, #1
 8003956:	d002      	beq.n	800395e <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8003958:	8b00      	ldrh	r0, [r0, #24]
 800395a:	b280      	uxth	r0, r0
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
  }
  /* Return the selected CRC register */
  return crcreg;
}
 800395c:	4770      	bx	lr
    crcreg = SPIx->TXCRCR;
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800395e:	8a80      	ldrh	r0, [r0, #20]
 8003960:	b280      	uxth	r0, r0
 8003962:	e7fb      	b.n	800395c <SPI_GetCRC+0x8>

08003964 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8003964:	8a00      	ldrh	r0, [r0, #16]
 8003966:	b280      	uxth	r0, r0
}
 8003968:	4770      	bx	lr
 800396a:	46c0      	nop			; (mov r8, r8)

0800396c <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800396c:	8883      	ldrh	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800396e:	2a00      	cmp	r2, #0
 8003970:	d102      	bne.n	8003978 <SPI_I2S_DMACmd+0xc>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8003972:	438b      	bics	r3, r1
 8003974:	8083      	strh	r3, [r0, #4]
  }
}
 8003976:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8003978:	4319      	orrs	r1, r3
 800397a:	8081      	strh	r1, [r0, #4]
 800397c:	e7fb      	b.n	8003976 <SPI_I2S_DMACmd+0xa>
 800397e:	46c0      	nop			; (mov r8, r8)

08003980 <SPI_LastDMATransferCmd>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8003980:	8882      	ldrh	r2, [r0, #4]
 8003982:	4b03      	ldr	r3, [pc, #12]	; (8003990 <SPI_LastDMATransferCmd+0x10>)
 8003984:	4013      	ands	r3, r2
 8003986:	8083      	strh	r3, [r0, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8003988:	8883      	ldrh	r3, [r0, #4]
 800398a:	4319      	orrs	r1, r3
 800398c:	8081      	strh	r1, [r0, #4]
}
 800398e:	4770      	bx	lr
 8003990:	ffff9fff 	.word	0xffff9fff

08003994 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8003994:	2301      	movs	r3, #1
 8003996:	0909      	lsrs	r1, r1, #4
 8003998:	408b      	lsls	r3, r1
 800399a:	b299      	uxth	r1, r3

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800399c:	8883      	ldrh	r3, [r0, #4]
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 800399e:	2a00      	cmp	r2, #0
 80039a0:	d102      	bne.n	80039a8 <SPI_I2S_ITConfig+0x14>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80039a2:	438b      	bics	r3, r1
 80039a4:	8083      	strh	r3, [r0, #4]
  }
}
 80039a6:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80039a8:	4319      	orrs	r1, r3
 80039aa:	8081      	strh	r1, [r0, #4]
 80039ac:	e7fb      	b.n	80039a6 <SPI_I2S_ITConfig+0x12>
 80039ae:	46c0      	nop			; (mov r8, r8)

080039b0 <SPI_GetTransmissionFIFOStatus>:
  *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 80039b0:	23c0      	movs	r3, #192	; 0xc0
 80039b2:	8900      	ldrh	r0, [r0, #8]
 80039b4:	015b      	lsls	r3, r3, #5
 80039b6:	4018      	ands	r0, r3
}
 80039b8:	4770      	bx	lr
 80039ba:	46c0      	nop			; (mov r8, r8)

080039bc <SPI_GetReceptionFIFOStatus>:
  *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 80039bc:	23c0      	movs	r3, #192	; 0xc0
 80039be:	8900      	ldrh	r0, [r0, #8]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4018      	ands	r0, r3
}
 80039c4:	4770      	bx	lr
 80039c6:	46c0      	nop			; (mov r8, r8)

080039c8 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80039c8:	8900      	ldrh	r0, [r0, #8]
 80039ca:	4008      	ands	r0, r1
 80039cc:	1e41      	subs	r1, r0, #1
 80039ce:	4188      	sbcs	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80039d0:	b2c0      	uxtb	r0, r0
}
 80039d2:	4770      	bx	lr

080039d4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 80039d4:	43c9      	mvns	r1, r1
 80039d6:	b289      	uxth	r1, r1
 80039d8:	8101      	strh	r1, [r0, #8]
}
 80039da:	4770      	bx	lr

080039dc <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80039dc:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80039de:	2401      	movs	r4, #1

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80039e0:	8883      	ldrh	r3, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80039e2:	8905      	ldrh	r5, [r0, #8]

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80039e4:	b29a      	uxth	r2, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80039e6:	230f      	movs	r3, #15
 80039e8:	1c20      	adds	r0, r4, #0
 80039ea:	400b      	ands	r3, r1
 80039ec:	4098      	lsls	r0, r3
 80039ee:	1c03      	adds	r3, r0, #0
    bitstatus = SET;
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80039f0:	2000      	movs	r0, #0

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80039f2:	422b      	tst	r3, r5
 80039f4:	d006      	beq.n	8003a04 <SPI_I2S_GetITStatus+0x28>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80039f6:	1c23      	adds	r3, r4, #0
 80039f8:	0909      	lsrs	r1, r1, #4
 80039fa:	408b      	lsls	r3, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80039fc:	4013      	ands	r3, r2
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	4193      	sbcs	r3, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8003a02:	b2d8      	uxtb	r0, r3
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8003a04:	bd30      	pop	{r4, r5, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)

08003a08 <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4770      	bx	lr

08003a0c <u8x8_d_null_cb>:
};


/* a special null device */
uint8_t u8x8_d_null_cb(u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003a0c:	b508      	push	{r3, lr}
  switch(msg)
 8003a0e:	2909      	cmp	r1, #9
 8003a10:	d005      	beq.n	8003a1e <u8x8_d_null_cb+0x12>
 8003a12:	290a      	cmp	r1, #10
 8003a14:	d101      	bne.n	8003a1a <u8x8_d_null_cb+0xe>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
      break;
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003a16:	f7fd fcf9 	bl	800140c <u8x8_d_helper_display_init>
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	bd08      	pop	{r3, pc}
uint8_t u8x8_d_null_cb(u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
 8003a1e:	4902      	ldr	r1, [pc, #8]	; (8003a28 <u8x8_d_null_cb+0x1c>)
 8003a20:	f7fd fcf0 	bl	8001404 <u8x8_d_helper_display_setup_memory>
      break;
 8003a24:	e7f9      	b.n	8003a1a <u8x8_d_null_cb+0xe>
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	0800552c 	.word	0x0800552c

08003a2c <u8x8_SetupDefaults>:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    u8x8->display_cb = u8x8_dummy_cb;
 8003a2c:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <u8x8_SetupDefaults+0x24>)
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003a2e:	2300      	movs	r3, #0
    u8x8->display_cb = u8x8_dummy_cb;
 8003a30:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003a32:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003a34:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003a36:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
    u8x8->device_address = 0;
 8003a38:	2222      	movs	r2, #34	; 0x22
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003a3a:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8003a3c:	77c3      	strb	r3, [r0, #31]
    u8x8->device_address = 0;
 8003a3e:	5483      	strb	r3, [r0, r2]
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a40:	3201      	adds	r2, #1
 8003a42:	5483      	strb	r3, [r0, r2]
    u8x8->i2c_address = 255;
 8003a44:	33ff      	adds	r3, #255	; 0xff
 8003a46:	3a03      	subs	r2, #3
 8003a48:	5483      	strb	r3, [r0, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a4a:	3205      	adds	r2, #5
 8003a4c:	5483      	strb	r3, [r0, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003a4e:	4770      	bx	lr
 8003a50:	08003a09 	.word	0x08003a09

08003a54 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003a54:	b538      	push	{r3, r4, r5, lr}
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003a56:	2400      	movs	r4, #0
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    u8x8->device_address = 0;
 8003a58:	2522      	movs	r5, #34	; 0x22
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8003a5a:	6004      	str	r4, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8003a5c:	77c4      	strb	r4, [r0, #31]
    u8x8->device_address = 0;
 8003a5e:	5544      	strb	r4, [r0, r5]
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003a60:	3501      	adds	r5, #1
 8003a62:	5544      	strb	r4, [r0, r5]
    u8x8->i2c_address = 255;
 8003a64:	34ff      	adds	r4, #255	; 0xff
 8003a66:	3d03      	subs	r5, #3
 8003a68:	5544      	strb	r4, [r0, r5]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003a6a:	3505      	adds	r5, #5
 8003a6c:	5544      	strb	r4, [r0, r5]
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
 8003a6e:	6103      	str	r3, [r0, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a70:	9b04      	ldr	r3, [sp, #16]
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003a72:	6081      	str	r1, [r0, #8]
  u8x8->cad_cb = cad_cb;
 8003a74:	60c2      	str	r2, [r0, #12]
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003a76:	6143      	str	r3, [r0, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003a78:	f7fd fd08 	bl	800148c <u8x8_SetupMemory>
}
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)

08003a80 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	4647      	mov	r7, r8
 8003a84:	b480      	push	{r7}
 8003a86:	ac06      	add	r4, sp, #24
 8003a88:	7824      	ldrb	r4, [r4, #0]
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 8003a8a:	2501      	movs	r5, #1
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a8c:	46a4      	mov	ip, r4
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003a8e:	2407      	movs	r4, #7
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8003a90:	267b      	movs	r6, #123	; 0x7b
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003a92:	4014      	ands	r4, r2
  mask = 1;
  mask <<= bit_pos;
 8003a94:	40a5      	lsls	r5, r4

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8003a96:	5d87      	ldrb	r7, [r0, r6]
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 8003a98:	b2ed      	uxtb	r5, r5

  or_mask = 0;
 8003a9a:	2600      	movs	r6, #0
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8003a9c:	2f01      	cmp	r7, #1
 8003a9e:	d919      	bls.n	8003ad4 <u8g2_ll_hvline_vertical_top_lsb+0x54>
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8003aa0:	2707      	movs	r7, #7
 8003aa2:	43ba      	bics	r2, r7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003aa4:	6807      	ldr	r7, [r0, #0]
 8003aa6:	7c3f      	ldrb	r7, [r7, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8003aa8:	437a      	muls	r2, r7
 8003aaa:	1851      	adds	r1, r2, r1
  ptr += x;
 8003aac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003aae:	4690      	mov	r8, r2
  
  if ( dir == 0 )
 8003ab0:	4662      	mov	r2, ip
  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8003ab2:	4441      	add	r1, r8
  
  if ( dir == 0 )
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	d112      	bne.n	8003ade <u8g2_ll_hvline_vertical_top_lsb+0x5e>
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	3201      	adds	r2, #1
 8003abe:	188a      	adds	r2, r1, r2
  {
      do
      {
	*ptr |= or_mask;
 8003ac0:	780b      	ldrb	r3, [r1, #0]
 8003ac2:	4333      	orrs	r3, r6
	*ptr ^= xor_mask;
 8003ac4:	406b      	eors	r3, r5
 8003ac6:	700b      	strb	r3, [r1, #0]
	ptr++;
 8003ac8:	3101      	adds	r1, #1
	len--;
      } while( len != 0 );
 8003aca:	4291      	cmp	r1, r2
 8003acc:	d1f8      	bne.n	8003ac0 <u8g2_ll_hvline_vertical_top_lsb+0x40>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003ace:	bc04      	pop	{r2}
 8003ad0:	4690      	mov	r8, r2
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
 8003ad4:	1c2e      	adds	r6, r5, #0
  if ( u8g2->draw_color != 1 )
 8003ad6:	2f01      	cmp	r7, #1
 8003ad8:	d1e2      	bne.n	8003aa0 <u8g2_ll_hvline_vertical_top_lsb+0x20>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
 8003ada:	2500      	movs	r5, #0
 8003adc:	e7e0      	b.n	8003aa0 <u8g2_ll_hvline_vertical_top_lsb+0x20>

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003ade:	223a      	movs	r2, #58	; 0x3a
 8003ae0:	4690      	mov	r8, r2
		
	if ( u8g2->draw_color <= 1 )
 8003ae2:	3241      	adds	r2, #65	; 0x41
    {
      *ptr |= or_mask;
      *ptr ^= xor_mask;
      
      bit_pos++;
      bit_pos &= 7;
 8003ae4:	2707      	movs	r7, #7

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
 8003ae6:	4694      	mov	ip, r2
 8003ae8:	e009      	b.n	8003afe <u8g2_ll_hvline_vertical_top_lsb+0x7e>

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003aea:	4642      	mov	r2, r8
 8003aec:	5c82      	ldrb	r2, [r0, r2]
 8003aee:	1889      	adds	r1, r1, r2
		
	if ( u8g2->draw_color <= 1 )
 8003af0:	4662      	mov	r2, ip
 8003af2:	5c82      	ldrb	r2, [r0, r2]
 8003af4:	2a01      	cmp	r2, #1
 8003af6:	d911      	bls.n	8003b1c <u8g2_ll_hvline_vertical_top_lsb+0x9c>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
 8003af8:	2501      	movs	r5, #1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0e7      	beq.n	8003ace <u8g2_ll_hvline_vertical_top_lsb+0x4e>
  }
  else
  {    
    do
    {
      *ptr |= or_mask;
 8003afe:	780a      	ldrb	r2, [r1, #0]
      *ptr ^= xor_mask;
      
      bit_pos++;
 8003b00:	3401      	adds	r4, #1
  }
  else
  {    
    do
    {
      *ptr |= or_mask;
 8003b02:	4332      	orrs	r2, r6
      *ptr ^= xor_mask;
 8003b04:	406a      	eors	r2, r5
      
      bit_pos++;
      bit_pos &= 7;

      len--;
 8003b06:	3b01      	subs	r3, #1
  else
  {    
    do
    {
      *ptr |= or_mask;
      *ptr ^= xor_mask;
 8003b08:	700a      	strb	r2, [r1, #0]
      
      bit_pos++;
      bit_pos &= 7;
 8003b0a:	403c      	ands	r4, r7

      len--;
 8003b0c:	b2db      	uxtb	r3, r3

      if ( bit_pos == 0 )
 8003b0e:	2c00      	cmp	r4, #0
 8003b10:	d0eb      	beq.n	8003aea <u8g2_ll_hvline_vertical_top_lsb+0x6a>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
 8003b12:	0076      	lsls	r6, r6, #1
	xor_mask <<= 1;
 8003b14:	006d      	lsls	r5, r5, #1
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
 8003b16:	b2f6      	uxtb	r6, r6
	xor_mask <<= 1;
 8003b18:	b2ed      	uxtb	r5, r5
 8003b1a:	e7ee      	b.n	8003afa <u8g2_ll_hvline_vertical_top_lsb+0x7a>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
 8003b1c:	2a01      	cmp	r2, #1
 8003b1e:	d002      	beq.n	8003b26 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
	  xor_mask = 1;
 8003b20:	2501      	movs	r5, #1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
 8003b22:	2601      	movs	r6, #1
 8003b24:	e7e9      	b.n	8003afa <u8g2_ll_hvline_vertical_top_lsb+0x7a>
 8003b26:	2601      	movs	r6, #1
 8003b28:	e7e7      	b.n	8003afa <u8g2_ll_hvline_vertical_top_lsb+0x7a>
 8003b2a:	46c0      	nop			; (mov r8, r8)

08003b2c <u8g2_ll_hvline_horizontal_right_lsb>:
  asumption: 
    all clipping done
*/

void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2e:	ac05      	add	r4, sp, #20
 8003b30:	7826      	ldrb	r6, [r4, #0]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b32:	6804      	ldr	r4, [r0, #0]

  bit_pos = x;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 128;
  mask >>= bit_pos;
 8003b34:	2780      	movs	r7, #128	; 0x80
{
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b36:	7c25      	ldrb	r5, [r4, #16]

  bit_pos = x;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 128;
  mask >>= bit_pos;
 8003b38:	2407      	movs	r4, #7

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset *= tile_width;
 8003b3a:	436a      	muls	r2, r5
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;

  bit_pos = x;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 128;
  mask >>= bit_pos;
 8003b3c:	400c      	ands	r4, r1

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset *= tile_width;
  offset += x>>3;
 8003b3e:	08c9      	lsrs	r1, r1, #3
 8003b40:	1852      	adds	r2, r2, r1
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8003b42:	6b41      	ldr	r1, [r0, #52]	; 0x34
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;

  bit_pos = x;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 128;
  mask >>= bit_pos;
 8003b44:	4127      	asrs	r7, r4

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset *= tile_width;
  offset += x>>3;
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8003b46:	468c      	mov	ip, r1
 8003b48:	b292      	uxth	r2, r2
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;

  bit_pos = x;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 128;
  mask >>= bit_pos;
 8003b4a:	b2fc      	uxtb	r4, r7

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset *= tile_width;
  offset += x>>3;
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
 8003b4c:	4462      	add	r2, ip
  
  if ( dir == 0 )
 8003b4e:	2e00      	cmp	r6, #0
 8003b50:	d117      	bne.n	8003b82 <u8g2_ll_hvline_horizontal_right_lsb+0x56>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 8003b52:	257b      	movs	r5, #123	; 0x7b
 8003b54:	e00a      	b.n	8003b6c <u8g2_ll_hvline_horizontal_right_lsb+0x40>
	*ptr |= mask;
      if ( u8g2->draw_color != 1 )
	*ptr ^= mask;
 8003b56:	7811      	ldrb	r1, [r2, #0]
 8003b58:	4061      	eors	r1, r4
 8003b5a:	7011      	strb	r1, [r2, #0]
      
      mask >>= 1;
 8003b5c:	0864      	lsrs	r4, r4, #1
      if ( mask == 0 )
 8003b5e:	d101      	bne.n	8003b64 <u8g2_ll_hvline_horizontal_right_lsb+0x38>
      {
	mask = 128;
        ptr++;
 8003b60:	3201      	adds	r2, #1
	*ptr ^= mask;
      
      mask >>= 1;
      if ( mask == 0 )
      {
	mask = 128;
 8003b62:	3480      	adds	r4, #128	; 0x80
        ptr++;
      }
      
      //x++;
      len--;
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b2db      	uxtb	r3, r3
    } while( len != 0 );
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <u8g2_ll_hvline_horizontal_right_lsb+0x54>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 8003b6c:	5d41      	ldrb	r1, [r0, r5]
 8003b6e:	2901      	cmp	r1, #1
 8003b70:	d8f1      	bhi.n	8003b56 <u8g2_ll_hvline_horizontal_right_lsb+0x2a>
	*ptr |= mask;
 8003b72:	7811      	ldrb	r1, [r2, #0]
 8003b74:	4321      	orrs	r1, r4
 8003b76:	7011      	strb	r1, [r2, #0]
      if ( u8g2->draw_color != 1 )
 8003b78:	5d41      	ldrb	r1, [r0, r5]
 8003b7a:	2901      	cmp	r1, #1
 8003b7c:	d0ee      	beq.n	8003b5c <u8g2_ll_hvline_horizontal_right_lsb+0x30>
 8003b7e:	e7ea      	b.n	8003b56 <u8g2_ll_hvline_horizontal_right_lsb+0x2a>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  else
  {
    do
    {
      if ( u8g2->draw_color <= 1 )
 8003b82:	267b      	movs	r6, #123	; 0x7b
 8003b84:	e007      	b.n	8003b96 <u8g2_ll_hvline_horizontal_right_lsb+0x6a>
	*ptr |= mask;
      if ( u8g2->draw_color != 1 )
	*ptr ^= mask;
 8003b86:	7811      	ldrb	r1, [r2, #0]
 8003b88:	4061      	eors	r1, r4
 8003b8a:	7011      	strb	r1, [r2, #0]
      
      ptr += tile_width;
      //y++;
      len--;
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
      if ( u8g2->draw_color <= 1 )
	*ptr |= mask;
      if ( u8g2->draw_color != 1 )
	*ptr ^= mask;
      
      ptr += tile_width;
 8003b90:	1952      	adds	r2, r2, r5
      //y++;
      len--;
    } while( len != 0 );
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f4      	beq.n	8003b80 <u8g2_ll_hvline_horizontal_right_lsb+0x54>
  }
  else
  {
    do
    {
      if ( u8g2->draw_color <= 1 )
 8003b96:	5d81      	ldrb	r1, [r0, r6]
 8003b98:	2901      	cmp	r1, #1
 8003b9a:	d8f4      	bhi.n	8003b86 <u8g2_ll_hvline_horizontal_right_lsb+0x5a>
	*ptr |= mask;
 8003b9c:	7811      	ldrb	r1, [r2, #0]
 8003b9e:	4321      	orrs	r1, r4
 8003ba0:	7011      	strb	r1, [r2, #0]
      if ( u8g2->draw_color != 1 )
 8003ba2:	5d81      	ldrb	r1, [r0, r6]
 8003ba4:	2901      	cmp	r1, #1
 8003ba6:	d0f1      	beq.n	8003b8c <u8g2_ll_hvline_horizontal_right_lsb+0x60>
 8003ba8:	e7ed      	b.n	8003b86 <u8g2_ll_hvline_horizontal_right_lsb+0x5a>
 8003baa:	46c0      	nop			; (mov r8, r8)

08003bac <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8003bac:	1841      	adds	r1, r0, r1
    pos = u8x8_pgm_read( font );
 8003bae:	7808      	ldrb	r0, [r1, #0]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8003bb0:	784b      	ldrb	r3, [r1, #1]
{
    uint16_t pos;
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    pos <<= 8;
 8003bb2:	0200      	lsls	r0, r0, #8
    pos += u8x8_pgm_read( font);
 8003bb4:	18c0      	adds	r0, r0, r3
    return pos;
 8003bb6:	b280      	uxth	r0, r0
}
 8003bb8:	4770      	bx	lr
 8003bba:	46c0      	nop			; (mov r8, r8)

08003bbc <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	4770      	bx	lr

08003bc0 <u8g2_font_calc_vref_bottom>:
}


u8g2_uint_t u8g2_font_calc_vref_bottom(u8g2_t *u8g2)
{
  return (u8g2_uint_t)(u8g2->font_ref_descent);
 8003bc0:	2378      	movs	r3, #120	; 0x78
 8003bc2:	5cc0      	ldrb	r0, [r0, r3]
}
 8003bc4:	4770      	bx	lr
 8003bc6:	46c0      	nop			; (mov r8, r8)

08003bc8 <u8g2_font_calc_vref_top>:

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 8003bc8:	2377      	movs	r3, #119	; 0x77
 8003bca:	5cc0      	ldrb	r0, [r0, r3]
  tmp++;
 8003bcc:	3001      	adds	r0, #1
  return tmp;
 8003bce:	b2c0      	uxtb	r0, r0
}
 8003bd0:	4770      	bx	lr
 8003bd2:	46c0      	nop			; (mov r8, r8)

08003bd4 <u8g2_font_calc_vref_center>:

u8g2_uint_t u8g2_font_calc_vref_center(u8g2_t *u8g2)
{
  int8_t tmp;
  tmp = u8g2->font_ref_ascent;
  tmp -= u8g2->font_ref_descent;
 8003bd4:	2378      	movs	r3, #120	; 0x78
 8003bd6:	5cc2      	ldrb	r2, [r0, r3]
}

u8g2_uint_t u8g2_font_calc_vref_center(u8g2_t *u8g2)
{
  int8_t tmp;
  tmp = u8g2->font_ref_ascent;
 8003bd8:	3b01      	subs	r3, #1
  tmp -= u8g2->font_ref_descent;
 8003bda:	5cc3      	ldrb	r3, [r0, r3]
 8003bdc:	1a9b      	subs	r3, r3, r2
  tmp /= 2;
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	0fd8      	lsrs	r0, r3, #31
 8003be2:	18c0      	adds	r0, r0, r3
 8003be4:	1043      	asrs	r3, r0, #1
  tmp += u8g2->font_ref_descent;  
 8003be6:	18d0      	adds	r0, r2, r3
  return tmp;
 8003be8:	b2c0      	uxtb	r0, r0
}
 8003bea:	4770      	bx	lr

08003bec <u8g2_read_font_info>:
}

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003bec:	b538      	push	{r3, r4, r5, lr}
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003bee:	780b      	ldrb	r3, [r1, #0]
}

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003bf0:	1c04      	adds	r4, r0, #0
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003bf2:	7003      	strb	r3, [r0, #0]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003bf4:	784b      	ldrb	r3, [r1, #1]
}

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003bf6:	1c0d      	adds	r5, r1, #0
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003bf8:	7043      	strb	r3, [r0, #1]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003bfa:	788b      	ldrb	r3, [r1, #2]
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003bfc:	7083      	strb	r3, [r0, #2]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003bfe:	78cb      	ldrb	r3, [r1, #3]
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003c00:	70c3      	strb	r3, [r0, #3]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003c02:	790b      	ldrb	r3, [r1, #4]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003c04:	7103      	strb	r3, [r0, #4]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003c06:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003c08:	7143      	strb	r3, [r0, #5]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003c0a:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003c0c:	7183      	strb	r3, [r0, #6]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003c0e:	79cb      	ldrb	r3, [r1, #7]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003c10:	71c3      	strb	r3, [r0, #7]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
 8003c12:	7a0b      	ldrb	r3, [r1, #8]
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003c14:	7203      	strb	r3, [r0, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003c16:	7a4b      	ldrb	r3, [r1, #9]
 8003c18:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003c1a:	7a8b      	ldrb	r3, [r1, #10]
 8003c1c:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003c1e:	7acb      	ldrb	r3, [r1, #11]
 8003c20:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003c22:	7b0b      	ldrb	r3, [r1, #12]
 8003c24:	7303      	strb	r3, [r0, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003c26:	7b4b      	ldrb	r3, [r1, #13]
 8003c28:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003c2a:	7b8b      	ldrb	r3, [r1, #14]
 8003c2c:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003c2e:	7bcb      	ldrb	r3, [r1, #15]
 8003c30:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003c32:	7c0b      	ldrb	r3, [r1, #16]
 8003c34:	7403      	strb	r3, [r0, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003c36:	1c08      	adds	r0, r1, #0
 8003c38:	2111      	movs	r1, #17
 8003c3a:	f7ff ffb7 	bl	8003bac <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003c3e:	2113      	movs	r1, #19
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003c40:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003c42:	1c28      	adds	r0, r5, #0
 8003c44:	f7ff ffb2 	bl	8003bac <u8g2_font_get_word>
 8003c48:	82a0      	strh	r0, [r4, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
#endif
}
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}

08003c4c <u8g2_GetFontSize>:


/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g2_GetFontSize(const uint8_t *font_arg)
{
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	1c04      	adds	r4, r0, #0
  const uint8_t *font = font_arg;
  font += U8G2_FONT_DATA_STRUCT_SIZE;
  
  for(;;)
  {
    if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003c50:	7e23      	ldrb	r3, [r4, #24]
/* calculate the overall length of the font, only used to create the picture for the google wiki */
size_t u8g2_GetFontSize(const uint8_t *font_arg)
{
  uint16_t e;
  const uint8_t *font = font_arg;
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003c52:	3017      	adds	r0, #23
  
  for(;;)
  {
    if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <u8g2_GetFontSize+0x14>
      break;
    font += u8x8_pgm_read( font + 1 );
 8003c58:	18c0      	adds	r0, r0, r3
  const uint8_t *font = font_arg;
  font += U8G2_FONT_DATA_STRUCT_SIZE;
  
  for(;;)
  {
    if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003c5a:	7843      	ldrb	r3, [r0, #1]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1fb      	bne.n	8003c58 <u8g2_GetFontSize+0xc>
      break;
    font += u8x8_pgm_read( font + 1 );
  }
  
  /* continue with unicode section */
  font += 2;
 8003c60:	1c85      	adds	r5, r0, #2

  /* skip unicode lookup table */
  font += u8g2_font_get_word(font, 0);
 8003c62:	1c28      	adds	r0, r5, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	f7ff ffa1 	bl	8003bac <u8g2_font_get_word>
 8003c6a:	1828      	adds	r0, r5, r0
 8003c6c:	e001      	b.n	8003c72 <u8g2_GetFontSize+0x26>
    e = u8x8_pgm_read( font );
    e <<= 8;
    e |= u8x8_pgm_read( font + 1 );
    if ( e == 0 )
      break;
    font += u8x8_pgm_read( font + 2 );    
 8003c6e:	7883      	ldrb	r3, [r0, #2]
 8003c70:	18c0      	adds	r0, r0, r3
  /* skip unicode lookup table */
  font += u8g2_font_get_word(font, 0);
  
  for(;;)
  {
    e = u8x8_pgm_read( font );
 8003c72:	7803      	ldrb	r3, [r0, #0]
    e <<= 8;
    e |= u8x8_pgm_read( font + 1 );
 8003c74:	7842      	ldrb	r2, [r0, #1]
  font += u8g2_font_get_word(font, 0);
  
  for(;;)
  {
    e = u8x8_pgm_read( font );
    e <<= 8;
 8003c76:	021b      	lsls	r3, r3, #8
    e |= u8x8_pgm_read( font + 1 );
    if ( e == 0 )
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d1f8      	bne.n	8003c6e <u8g2_GetFontSize+0x22>
      break;
    font += u8x8_pgm_read( font + 2 );    
  }
  
  return (font - font_arg) + 2;
 8003c7c:	1b00      	subs	r0, r0, r4
 8003c7e:	3002      	adds	r0, #2
}
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)

08003c84 <u8g2_GetFontBBXWidth>:
/*========================================================================*/
/* u8g2 interface, font access */

uint8_t u8g2_GetFontBBXWidth(u8g2_t *u8g2)
{
  return u8g2->font_info.max_char_width;		/* new font info structure */
 8003c84:	2369      	movs	r3, #105	; 0x69
 8003c86:	5cc0      	ldrb	r0, [r0, r3]
}
 8003c88:	4770      	bx	lr
 8003c8a:	46c0      	nop			; (mov r8, r8)

08003c8c <u8g2_GetFontBBXHeight>:

uint8_t u8g2_GetFontBBXHeight(u8g2_t *u8g2)
{
  return u8g2->font_info.max_char_height;		/* new font info structure */
 8003c8c:	236a      	movs	r3, #106	; 0x6a
 8003c8e:	5cc0      	ldrb	r0, [r0, r3]
}
 8003c90:	4770      	bx	lr
 8003c92:	46c0      	nop			; (mov r8, r8)

08003c94 <u8g2_GetFontBBXOffX>:

int8_t u8g2_GetFontBBXOffX(u8g2_t *u8g2) U8G2_NOINLINE;
int8_t u8g2_GetFontBBXOffX(u8g2_t *u8g2)
{
  return u8g2->font_info.x_offset;		/* new font info structure */
 8003c94:	236b      	movs	r3, #107	; 0x6b
 8003c96:	56c0      	ldrsb	r0, [r0, r3]
}
 8003c98:	4770      	bx	lr
 8003c9a:	46c0      	nop			; (mov r8, r8)

08003c9c <u8g2_GetFontBBXOffY>:

int8_t u8g2_GetFontBBXOffY(u8g2_t *u8g2) U8G2_NOINLINE;
int8_t u8g2_GetFontBBXOffY(u8g2_t *u8g2)
{
  return u8g2->font_info.y_offset;		/* new font info structure */
 8003c9c:	236c      	movs	r3, #108	; 0x6c
 8003c9e:	56c0      	ldrsb	r0, [r0, r3]
}
 8003ca0:	4770      	bx	lr
 8003ca2:	46c0      	nop			; (mov r8, r8)

08003ca4 <u8g2_GetFontCapitalAHeight>:

uint8_t u8g2_GetFontCapitalAHeight(u8g2_t *u8g2) U8G2_NOINLINE; 
uint8_t u8g2_GetFontCapitalAHeight(u8g2_t *u8g2)
{
  return u8g2->font_info.ascent_A;		/* new font info structure */
 8003ca4:	236d      	movs	r3, #109	; 0x6d
 8003ca6:	5cc0      	ldrb	r0, [r0, r3]
}
 8003ca8:	4770      	bx	lr
 8003caa:	46c0      	nop			; (mov r8, r8)

08003cac <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003cae:	6802      	ldr	r2, [r0, #0]

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003cb0:	7a86      	ldrb	r6, [r0, #10]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
 8003cb2:	7813      	ldrb	r3, [r2, #0]
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
 8003cb4:	198d      	adds	r5, r1, r6
 8003cb6:	b2ed      	uxtb	r5, r5
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
 8003cb8:	4133      	asrs	r3, r6
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
 8003cba:	2d07      	cmp	r5, #7
 8003cbc:	d911      	bls.n	8003ce2 <u8g2_font_decode_get_unsigned_bits+0x36>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
 8003cbe:	1c54      	adds	r4, r2, #1
 8003cc0:	6004      	str	r4, [r0, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003cc2:	7854      	ldrb	r4, [r2, #1]
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	1b92      	subs	r2, r2, r6
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	4094      	lsls	r4, r2
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003ccc:	3d08      	subs	r5, #8
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003cce:	4323      	orrs	r3, r4
 8003cd0:	b2db      	uxtb	r3, r3
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003cd2:	b2ed      	uxtb	r5, r5
  }
  val &= (1U<<cnt)-1;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	408a      	lsls	r2, r1
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003cd8:	7285      	strb	r5, [r0, #10]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
 8003cda:	1c10      	adds	r0, r2, #0
 8003cdc:	3801      	subs	r0, #1
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
  return val;
 8003cde:	4018      	ands	r0, r3
}
 8003ce0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e7f6      	b.n	8003cd4 <u8g2_font_decode_get_unsigned_bits+0x28>
 8003ce6:	46c0      	nop			; (mov r8, r8)

08003ce8 <u8g2_font_setup_decode>:
  decode->y = ly;
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003ce8:	b538      	push	{r3, r4, r5, lr}
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003cea:	1c04      	adds	r4, r0, #0
  decode->decode_ptr = glyph_data;
  decode->decode_bit_pos = 0;
 8003cec:	2300      	movs	r3, #0
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003cee:	3450      	adds	r4, #80	; 0x50
  decode->decode_ptr = glyph_data;
 8003cf0:	6501      	str	r1, [r0, #80]	; 0x50
  decode->decode_bit_pos = 0;
 8003cf2:	72a3      	strb	r3, [r4, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003cf4:	3364      	adds	r3, #100	; 0x64
  decode->y = ly;
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003cf6:	1c05      	adds	r5, r0, #0
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003cf8:	5cc1      	ldrb	r1, [r0, r3]
 8003cfa:	1c20      	adds	r0, r4, #0
 8003cfc:	f7ff ffd6 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003d00:	2365      	movs	r3, #101	; 0x65
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8003d02:	7220      	strb	r0, [r4, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003d04:	5ce9      	ldrb	r1, [r5, r3]
 8003d06:	1c20      	adds	r0, r4, #0
 8003d08:	f7ff ffd0 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  
  decode->fg_color = u8g2->draw_color;
 8003d0c:	237b      	movs	r3, #123	; 0x7b
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003d0e:	7260      	strb	r0, [r4, #9]
  
  decode->fg_color = u8g2->draw_color;
 8003d10:	5ceb      	ldrb	r3, [r5, r3]
 8003d12:	7323      	strb	r3, [r4, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003d14:	425a      	negs	r2, r3
 8003d16:	4153      	adcs	r3, r2
 8003d18:	7363      	strb	r3, [r4, #13]
}
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}

08003d1c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003d1c:	b510      	push	{r4, lr}
 8003d1e:	1c0c      	adds	r4, r1, #0
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003d20:	f7ff ffc4 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003d24:	2301      	movs	r3, #1
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003d26:	3c01      	subs	r4, #1
  d <<= cnt;
 8003d28:	b2e4      	uxtb	r4, r4
 8003d2a:	40a3      	lsls	r3, r4
  v -= d;
 8003d2c:	1ac0      	subs	r0, r0, r3
  return v;
 8003d2e:	b240      	sxtb	r0, r0
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)

08003d34 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	465f      	mov	r7, fp
 8003d38:	4656      	mov	r6, sl
 8003d3a:	464d      	mov	r5, r9
 8003d3c:	4644      	mov	r4, r8
 8003d3e:	b4f0      	push	{r4, r5, r6, r7}
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
 8003d40:	1c06      	adds	r6, r0, #0
 8003d42:	3650      	adds	r6, #80	; 0x50
 8003d44:	79b3      	ldrb	r3, [r6, #6]
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003d46:	b085      	sub	sp, #20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
 8003d48:	4698      	mov	r8, r3
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003d4a:	237b      	movs	r3, #123	; 0x7b
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	1c0f      	adds	r7, r1, #0
 8003d50:	4691      	mov	r9, r2
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
  ly = decode->y;
 8003d52:	79f5      	ldrb	r5, [r6, #7]
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003d54:	469b      	mov	fp, r3
 8003d56:	e00a      	b.n	8003d6e <u8g2_font_decode_len+0x3a>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003d58:	7af0      	ldrb	r0, [r6, #11]
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d032      	beq.n	8003dc4 <u8g2_font_decode_len+0x90>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003d5e:	42a7      	cmp	r7, r4
 8003d60:	d326      	bcc.n	8003db0 <u8g2_font_decode_len+0x7c>
      break;
    cnt -= rem;
    lx = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	4698      	mov	r8, r3
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
 8003d66:	1b3f      	subs	r7, r7, r4
    lx = 0;
    ly++;
 8003d68:	3501      	adds	r5, #1
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
 8003d6a:	b2ff      	uxtb	r7, r7
    lx = 0;
    ly++;
 8003d6c:	b2ed      	uxtb	r5, r5
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    rem -= lx;
 8003d6e:	4643      	mov	r3, r8
 8003d70:	7a34      	ldrb	r4, [r6, #8]
 8003d72:	1ae4      	subs	r4, r4, r3
 8003d74:	b2e4      	uxtb	r4, r4
 8003d76:	1c23      	adds	r3, r4, #0
 8003d78:	42bc      	cmp	r4, r7
 8003d7a:	d900      	bls.n	8003d7e <u8g2_font_decode_len+0x4a>
 8003d7c:	1c3b      	adds	r3, r7, #0
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003d7e:	4648      	mov	r0, r9
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	9303      	str	r3, [sp, #12]
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
 8003d84:	7972      	ldrb	r2, [r6, #5]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003d86:	7931      	ldrb	r1, [r6, #4]
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
    y += ly;
 8003d88:	18aa      	adds	r2, r5, r2
    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
 8003d8a:	4441      	add	r1, r8
    y += ly;
 8003d8c:	b2d3      	uxtb	r3, r2
    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
#else
    x += lx;
 8003d8e:	b2c9      	uxtb	r1, r1
    y += ly;
 8003d90:	469c      	mov	ip, r3
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d0e0      	beq.n	8003d58 <u8g2_font_decode_len+0x24>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003d96:	4653      	mov	r3, sl
 8003d98:	465a      	mov	r2, fp
 8003d9a:	7b30      	ldrb	r0, [r6, #12]
 8003d9c:	5498      	strb	r0, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8003d9e:	2300      	movs	r3, #0
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
      u8g2_DrawHVLine(u8g2, 
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4650      	mov	r0, sl
 8003da4:	4662      	mov	r2, ip
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	f7ff fc48 	bl	800363c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003dac:	42a7      	cmp	r7, r4
 8003dae:	d2d8      	bcs.n	8003d62 <u8g2_font_decode_len+0x2e>
      break;
    cnt -= rem;
    lx = 0;
    ly++;
  }
  lx += cnt;
 8003db0:	4447      	add	r7, r8
  
  decode->x = lx;
 8003db2:	71b7      	strb	r7, [r6, #6]
  decode->y = ly;
 8003db4:	71f5      	strb	r5, [r6, #7]
  
}
 8003db6:	b005      	add	sp, #20
 8003db8:	bc3c      	pop	{r2, r3, r4, r5}
 8003dba:	4690      	mov	r8, r2
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	46a2      	mov	sl, r4
 8003dc0:	46ab      	mov	fp, r5
 8003dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003dc4:	4653      	mov	r3, sl
 8003dc6:	465a      	mov	r2, fp
 8003dc8:	7b70      	ldrb	r0, [r6, #13]
 8003dca:	5498      	strb	r0, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8003dcc:	464b      	mov	r3, r9
 8003dce:	e7e7      	b.n	8003da0 <u8g2_font_decode_len+0x6c>

08003dd0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8003dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd2:	465f      	mov	r7, fp
 8003dd4:	4656      	mov	r6, sl
 8003dd6:	464d      	mov	r5, r9
 8003dd8:	4644      	mov	r4, r8
 8003dda:	b4f0      	push	{r4, r5, r6, r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	1c04      	adds	r4, r0, #0
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003de0:	1c05      	adds	r5, r0, #0
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003de2:	f7ff ff81 	bl	8003ce8 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003de6:	2359      	movs	r3, #89	; 0x59
 8003de8:	5ce6      	ldrb	r6, [r4, r3]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8003dea:	330d      	adds	r3, #13
 8003dec:	5ce7      	ldrb	r7, [r4, r3]
{
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003dee:	3550      	adds	r5, #80	; 0x50
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003df0:	1c39      	adds	r1, r7, #0
 8003df2:	1c28      	adds	r0, r5, #0
 8003df4:	f7ff ff5a 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003df8:	2301      	movs	r3, #1
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003dfa:	3f01      	subs	r7, #1
  d <<= cnt;
 8003dfc:	b2ff      	uxtb	r7, r7
 8003dfe:	4699      	mov	r9, r3
 8003e00:	40bb      	lsls	r3, r7
  v -= d;
 8003e02:	b2df      	uxtb	r7, r3
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003e04:	2367      	movs	r3, #103	; 0x67
 8003e06:	5ce3      	ldrb	r3, [r4, r3]
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003e08:	4683      	mov	fp, r0
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003e0a:	4698      	mov	r8, r3
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003e0c:	1c19      	adds	r1, r3, #0
 8003e0e:	1c28      	adds	r0, r5, #0
 8003e10:	f7ff ff4c 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
 8003e14:	4643      	mov	r3, r8
  d <<= cnt;
 8003e16:	464a      	mov	r2, r9
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003e18:	3b01      	subs	r3, #1
  d <<= cnt;
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	409a      	lsls	r2, r3
  v -= d;
 8003e1e:	b2d3      	uxtb	r3, r2
 8003e20:	9301      	str	r3, [sp, #4]
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003e22:	2368      	movs	r3, #104	; 0x68
 8003e24:	5ce3      	ldrb	r3, [r4, r3]
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003e26:	4682      	mov	sl, r0
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003e28:	4698      	mov	r8, r3
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003e2a:	1c19      	adds	r1, r3, #0
 8003e2c:	1c28      	adds	r0, r5, #0
 8003e2e:	f7ff ff3d 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
 8003e32:	4643      	mov	r3, r8
  d <<= cnt;
 8003e34:	464a      	mov	r2, r9
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003e36:	3b01      	subs	r3, #1
  d <<= cnt;
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	409a      	lsls	r2, r3
  v -= d;
 8003e3c:	1a83      	subs	r3, r0, r2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4698      	mov	r8, r3
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
  
  if ( decode->glyph_width > 0 )
 8003e42:	2308      	movs	r3, #8
 8003e44:	56eb      	ldrsb	r3, [r5, r3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	dd37      	ble.n	8003eba <u8g2_font_decode_glyph+0xea>
 8003e4a:	9a01      	ldr	r2, [sp, #4]
 8003e4c:	792b      	ldrb	r3, [r5, #4]
 8003e4e:	4694      	mov	ip, r2
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
    decode->target_y -= h+y;
 8003e50:	4652      	mov	r2, sl
 8003e52:	1bdf      	subs	r7, r3, r7
 8003e54:	796b      	ldrb	r3, [r5, #5]
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
 8003e56:	445f      	add	r7, fp
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	4463      	add	r3, ip
    decode->target_y -= h+y;
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	716b      	strb	r3, [r5, #5]
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	71ab      	strb	r3, [r5, #6]
    decode->y = 0;
 8003e64:	71eb      	strb	r3, [r5, #7]
 8003e66:	b273      	sxtb	r3, r6
 8003e68:	469b      	mov	fp, r3
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003e6a:	2362      	movs	r3, #98	; 0x62
 8003e6c:	469a      	mov	sl, r3
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4699      	mov	r9, r3
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
#else
    decode->target_x += x;
 8003e72:	712f      	strb	r7, [r5, #4]
    decode->y = 0;
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003e74:	4653      	mov	r3, sl
 8003e76:	1c28      	adds	r0, r5, #0
 8003e78:	5ce1      	ldrb	r1, [r4, r3]
 8003e7a:	f7ff ff17 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003e7e:	464b      	mov	r3, r9
    decode->y = 0;
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003e80:	1c06      	adds	r6, r0, #0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003e82:	5ce1      	ldrb	r1, [r4, r3]
 8003e84:	1c28      	adds	r0, r5, #0
 8003e86:	f7ff ff11 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
 8003e8a:	1c07      	adds	r7, r0, #0
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8003e8c:	1c20      	adds	r0, r4, #0
 8003e8e:	1c31      	adds	r1, r6, #0
 8003e90:	2200      	movs	r2, #0
 8003e92:	f7ff ff4f 	bl	8003d34 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8003e96:	1c20      	adds	r0, r4, #0
 8003e98:	1c39      	adds	r1, r7, #0
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f7ff ff4a 	bl	8003d34 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003ea0:	1c28      	adds	r0, r5, #0
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f7ff ff02 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d1ef      	bne.n	8003e8c <u8g2_font_decode_glyph+0xbc>

      if ( decode->y >= h )
 8003eac:	2307      	movs	r3, #7
 8003eae:	56eb      	ldrsb	r3, [r5, r3]
 8003eb0:	455b      	cmp	r3, fp
 8003eb2:	dbdf      	blt.n	8003e74 <u8g2_font_decode_glyph+0xa4>
	break;
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003eb4:	237b      	movs	r3, #123	; 0x7b
 8003eb6:	7b2a      	ldrb	r2, [r5, #12]
 8003eb8:	54e2      	strb	r2, [r4, r3]
  }
  return d;
 8003eba:	466a      	mov	r2, sp
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	2004      	movs	r0, #4
 8003ec0:	7113      	strb	r3, [r2, #4]
 8003ec2:	5610      	ldrsb	r0, [r2, r0]
}
 8003ec4:	b003      	add	sp, #12
 8003ec6:	bc3c      	pop	{r2, r3, r4, r5}
 8003ec8:	4690      	mov	r8, r2
 8003eca:	4699      	mov	r9, r3
 8003ecc:	46a2      	mov	sl, r4
 8003ece:	46ab      	mov	fp, r5
 8003ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)

08003ed4 <u8g2_font_get_glyph_data>:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
  const uint8_t *font = u8g2->font;
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003ed4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003ed6:	3317      	adds	r3, #23

  
  if ( encoding <= 255 )
 8003ed8:	29ff      	cmp	r1, #255	; 0xff
 8003eda:	d80e      	bhi.n	8003efa <u8g2_font_get_glyph_data+0x26>
  {
    if ( encoding >= 'a' )
 8003edc:	2960      	cmp	r1, #96	; 0x60
 8003ede:	d80e      	bhi.n	8003efe <u8g2_font_get_glyph_data+0x2a>
    {
      font += u8g2->font_info.start_pos_lower_a;
    }
    else if ( encoding >= 'A' )
 8003ee0:	2940      	cmp	r1, #64	; 0x40
 8003ee2:	d902      	bls.n	8003eea <u8g2_font_get_glyph_data+0x16>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003ee4:	2272      	movs	r2, #114	; 0x72
 8003ee6:	5a82      	ldrh	r2, [r0, r2]
 8003ee8:	189b      	adds	r3, r3, r2
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003eea:	785a      	ldrb	r2, [r3, #1]
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	d004      	beq.n	8003efa <u8g2_font_get_glyph_data+0x26>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003ef0:	7818      	ldrb	r0, [r3, #0]
 8003ef2:	4288      	cmp	r0, r1
 8003ef4:	d1f8      	bne.n	8003ee8 <u8g2_font_get_glyph_data+0x14>
      {
	return font+2;	/* skip encoding and glyph size */
 8003ef6:	1c98      	adds	r0, r3, #2
 8003ef8:	e000      	b.n	8003efc <u8g2_font_get_glyph_data+0x28>
      font += u8x8_pgm_read( font + 2 );
    }  
  }
#endif
  
  return NULL;
 8003efa:	2000      	movs	r0, #0
}
 8003efc:	4770      	bx	lr
  
  if ( encoding <= 255 )
  {
    if ( encoding >= 'a' )
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003efe:	2274      	movs	r2, #116	; 0x74
 8003f00:	5a82      	ldrh	r2, [r0, r2]
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	e7f1      	b.n	8003eea <u8g2_font_get_glyph_data+0x16>
 8003f06:	46c0      	nop			; (mov r8, r8)

08003f08 <u8g2_GetGlyphHorizontalProperties>:
  
  return w;  
}

static void u8g2_GetGlyphHorizontalProperties(u8g2_t *u8g2, uint16_t requested_encoding, uint8_t *w, int8_t *ox, int8_t *dx)
{
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	4647      	mov	r7, r8
 8003f0c:	b480      	push	{r7}
 8003f0e:	1c05      	adds	r5, r0, #0
 8003f10:	1c14      	adds	r4, r2, #0
 8003f12:	4698      	mov	r8, r3
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8003f14:	f7ff ffde 	bl	8003ed4 <u8g2_font_get_glyph_data>
 8003f18:	1e01      	subs	r1, r0, #0
  if ( glyph_data == NULL )
 8003f1a:	d026      	beq.n	8003f6a <u8g2_GetGlyphHorizontalProperties+0x62>
    return; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003f1c:	1c28      	adds	r0, r5, #0
 8003f1e:	f7ff fee3 	bl	8003ce8 <u8g2_font_setup_decode>
  *w = u8g2->font_decode.glyph_width;
 8003f22:	2358      	movs	r3, #88	; 0x58
 8003f24:	5ceb      	ldrb	r3, [r5, r3]
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f26:	1c2f      	adds	r7, r5, #0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
  if ( glyph_data == NULL )
    return; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
 8003f28:	7023      	strb	r3, [r4, #0]
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f2a:	2366      	movs	r3, #102	; 0x66
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
  d <<= cnt;
 8003f2c:	2601      	movs	r6, #1
  if ( glyph_data == NULL )
    return; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f2e:	5cec      	ldrb	r4, [r5, r3]
 8003f30:	3750      	adds	r7, #80	; 0x50
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f32:	1c21      	adds	r1, r4, #0
 8003f34:	1c38      	adds	r0, r7, #0
 8003f36:	f7ff feb9 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003f3a:	1c33      	adds	r3, r6, #0
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003f3c:	3c01      	subs	r4, #1
  d <<= cnt;
 8003f3e:	b2e4      	uxtb	r4, r4
 8003f40:	40a3      	lsls	r3, r4
  v -= d;
 8003f42:	1ac4      	subs	r4, r0, r3
  if ( glyph_data == NULL )
    return; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f44:	4643      	mov	r3, r8
 8003f46:	701c      	strb	r4, [r3, #0]
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8003f48:	2367      	movs	r3, #103	; 0x67
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f4a:	1c38      	adds	r0, r7, #0
 8003f4c:	5ce9      	ldrb	r1, [r5, r3]
 8003f4e:	f7ff fead 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
  *dx = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8003f52:	2368      	movs	r3, #104	; 0x68
 8003f54:	5cec      	ldrb	r4, [r5, r3]
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f56:	1c38      	adds	r0, r7, #0
 8003f58:	1c21      	adds	r1, r4, #0
  d = 1;
  cnt--;
 8003f5a:	3c01      	subs	r4, #1
  d <<= cnt;
 8003f5c:	b2e4      	uxtb	r4, r4
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f5e:	f7ff fea5 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003f62:	40a6      	lsls	r6, r4
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
  *dx = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8003f64:	9b06      	ldr	r3, [sp, #24]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
  d <<= cnt;
  v -= d;
 8003f66:	1b84      	subs	r4, r0, r6
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  *w = u8g2->font_decode.glyph_width;
  *ox =  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
  *dx = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8003f68:	701c      	strb	r4, [r3, #0]
}
 8003f6a:	bc04      	pop	{r2}
 8003f6c:	4690      	mov	r8, r2
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f70 <u8g2_IsGlyph>:
}



uint8_t u8g2_IsGlyph(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8003f70:	b508      	push	{r3, lr}
  /* updated to new code */
  if ( u8g2_font_get_glyph_data(u8g2, requested_encoding) != NULL )
 8003f72:	f7ff ffaf 	bl	8003ed4 <u8g2_font_get_glyph_data>
 8003f76:	1e43      	subs	r3, r0, #1
 8003f78:	4198      	sbcs	r0, r3
    return 1;
  return 0;
}
 8003f7a:	b2c0      	uxtb	r0, r0
 8003f7c:	bd08      	pop	{r3, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)

08003f80 <u8g2_GetGlyphWidth>:

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	1c05      	adds	r5, r0, #0
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8003f84:	f7ff ffa6 	bl	8003ed4 <u8g2_font_get_glyph_data>
 8003f88:	1e01      	subs	r1, r0, #0
  if ( glyph_data == NULL )
 8003f8a:	d024      	beq.n	8003fd6 <u8g2_GetGlyphWidth+0x56>
    return 0; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8003f8c:	1c28      	adds	r0, r5, #0
 8003f8e:	f7ff feab 	bl	8003ce8 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f92:	2366      	movs	r3, #102	; 0x66
 8003f94:	1c2f      	adds	r7, r5, #0
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
  d <<= cnt;
 8003f96:	2601      	movs	r6, #1
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
  if ( glyph_data == NULL )
    return 0; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003f98:	5cec      	ldrb	r4, [r5, r3]
 8003f9a:	3750      	adds	r7, #80	; 0x50
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003f9c:	1c21      	adds	r1, r4, #0
 8003f9e:	1c38      	adds	r0, r7, #0
 8003fa0:	f7ff fe84 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003fa4:	1c33      	adds	r3, r6, #0
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
 8003fa6:	3c01      	subs	r4, #1
  d <<= cnt;
 8003fa8:	b2e4      	uxtb	r4, r4
 8003faa:	40a3      	lsls	r3, r4
  v -= d;
 8003fac:	1ac4      	subs	r4, r0, r3
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
  if ( glyph_data == NULL )
    return 0; 
  
  u8g2_font_setup_decode(u8g2, glyph_data);
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8003fae:	2379      	movs	r3, #121	; 0x79
 8003fb0:	54ec      	strb	r4, [r5, r3]
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8003fb2:	3b12      	subs	r3, #18
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003fb4:	5ce9      	ldrb	r1, [r5, r3]
 8003fb6:	1c38      	adds	r0, r7, #0
 8003fb8:	f7ff fe78 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8003fbc:	2368      	movs	r3, #104	; 0x68
 8003fbe:	5cec      	ldrb	r4, [r5, r3]
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003fc0:	1c38      	adds	r0, r7, #0
 8003fc2:	1c21      	adds	r1, r4, #0
  d = 1;
  cnt--;
 8003fc4:	3c01      	subs	r4, #1
  d <<= cnt;
 8003fc6:	b2e4      	uxtb	r4, r4
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003fc8:	f7ff fe70 	bl	8003cac <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
  d <<= cnt;
 8003fcc:	40a6      	lsls	r6, r4
  v -= d;
 8003fce:	1b80      	subs	r0, r0, r6
 8003fd0:	b2c0      	uxtb	r0, r0
 8003fd2:	b240      	sxtb	r0, r0
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
}
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
  if ( glyph_data == NULL )
    return 0; 
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	e7fb      	b.n	8003fd2 <u8g2_GetGlyphWidth+0x52>
 8003fda:	46c0      	nop			; (mov r8, r8)

08003fdc <u8g2_string_width>:
/*===============================================*/

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8003fde:	2200      	movs	r2, #0
/*===============================================*/

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003fe0:	464f      	mov	r7, r9
 8003fe2:	4646      	mov	r6, r8
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8003fe4:	2358      	movs	r3, #88	; 0x58
/*===============================================*/

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003fe6:	b4c0      	push	{r6, r7}
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
 8003fe8:	54c2      	strb	r2, [r0, r3]
/*===============================================*/

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8003fea:	1c05      	adds	r5, r0, #0
 8003fec:	1c0c      	adds	r4, r1, #0
  uint16_t e;
  u8g2_uint_t  w, dx;
  
  u8g2->font_decode.glyph_width = 0;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003fee:	f000 fc33 	bl	8004858 <u8x8_utf8_init>
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <u8g2_string_width+0x70>)
  u8g2->font_decode.glyph_width = 0;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
  dx = 0;
 8003ff4:	2700      	movs	r7, #0
  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8003ff6:	4698      	mov	r8, r3
      break;
    str++;
    if ( e != 0x0fffe )
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <u8g2_string_width+0x74>)
  
  u8g2->font_decode.glyph_width = 0;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8003ffa:	2600      	movs	r6, #0
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
      break;
    str++;
    if ( e != 0x0fffe )
 8003ffc:	4699      	mov	r9, r3

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003ffe:	7821      	ldrb	r1, [r4, #0]
 8004000:	1c28      	adds	r0, r5, #0
 8004002:	686b      	ldr	r3, [r5, #4]
 8004004:	4798      	blx	r3
 8004006:	1e01      	subs	r1, r0, #0
    if ( e == 0x0ffff )
 8004008:	4541      	cmp	r1, r8
 800400a:	d00f      	beq.n	800402c <u8g2_string_width+0x50>
      break;
    str++;
 800400c:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 800400e:	4548      	cmp	r0, r9
 8004010:	d0f5      	beq.n	8003ffe <u8g2_string_width+0x22>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8004012:	1c28      	adds	r0, r5, #0
 8004014:	f7ff ffb4 	bl	8003f80 <u8g2_GetGlyphWidth>

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004018:	7821      	ldrb	r1, [r4, #0]
    if ( e == 0x0ffff )
      break;
    str++;
    if ( e != 0x0fffe )
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 800401a:	b2c7      	uxtb	r7, r0

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800401c:	686b      	ldr	r3, [r5, #4]
 800401e:	1c28      	adds	r0, r5, #0
 8004020:	4798      	blx	r3
      break;
    str++;
    if ( e != 0x0fffe )
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
      w += dx;
 8004022:	19be      	adds	r6, r7, r6
 8004024:	b2f6      	uxtb	r6, r6

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004026:	1e01      	subs	r1, r0, #0
    if ( e == 0x0ffff )
 8004028:	4541      	cmp	r1, r8
 800402a:	d1ef      	bne.n	800400c <u8g2_string_width+0x30>
      w += dx;
    }
  }
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800402c:	2358      	movs	r3, #88	; 0x58
 800402e:	5ceb      	ldrb	r3, [r5, r3]
 8004030:	1c30      	adds	r0, r6, #0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <u8g2_string_width+0x66>
  {
    w -= dx;
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8004036:	2279      	movs	r2, #121	; 0x79
 8004038:	5cae      	ldrb	r6, [r5, r2]
 800403a:	18f3      	adds	r3, r6, r3
 800403c:	18c0      	adds	r0, r0, r3
 800403e:	1bc0      	subs	r0, r0, r7
 8004040:	b2c0      	uxtb	r0, r0
  }
  // printf("w=%d \n", w);
  
  return w;  
}
 8004042:	bc0c      	pop	{r2, r3}
 8004044:	4690      	mov	r8, r2
 8004046:	4699      	mov	r9, r3
 8004048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	0000ffff 	.word	0x0000ffff
 8004050:	0000fffe 	.word	0x0000fffe

08004054 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8004054:	235b      	movs	r3, #91	; 0x5b
 8004056:	54c1      	strb	r1, [r0, r3]
}
 8004058:	4770      	bx	lr
 800405a:	46c0      	nop			; (mov r8, r8)

0800405c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	1c04      	adds	r4, r0, #0
 8004060:	1c1e      	adds	r6, r3, #0
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 8004062:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004064:	1c0f      	adds	r7, r1, #0
 8004066:	1c15      	adds	r5, r2, #0
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 8004068:	4798      	blx	r3
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
 800406a:	2354      	movs	r3, #84	; 0x54
    case 3:
      x += u8g2->font_calc_vref(u8g2);
      break;
  }
#else
  y += u8g2->font_calc_vref(u8g2);
 800406c:	1945      	adds	r5, r0, r5
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
 800406e:	54e7      	strb	r7, [r4, r3]
  u8g2->font_decode.target_y = y;
 8004070:	3301      	adds	r3, #1
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004072:	1c31      	adds	r1, r6, #0

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
  u8g2->font_decode.target_y = y;
 8004074:	54e5      	strb	r5, [r4, r3]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004076:	1c20      	adds	r0, r4, #0
 8004078:	f7ff ff2c 	bl	8003ed4 <u8g2_font_get_glyph_data>
 800407c:	1e01      	subs	r1, r0, #0
  if ( glyph_data != NULL )
 800407e:	d004      	beq.n	800408a <u8g2_DrawGlyph+0x2e>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004080:	1c20      	adds	r0, r4, #0
 8004082:	f7ff fea5 	bl	8003dd0 <u8g2_font_decode_glyph>
 8004086:	b2c0      	uxtb	r0, r0
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}
 8004088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return NULL;
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
 800408a:	2000      	movs	r0, #0
 800408c:	e7fc      	b.n	8004088 <u8g2_DrawGlyph+0x2c>
 800408e:	46c0      	nop			; (mov r8, r8)

08004090 <u8g2_draw_string>:
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004092:	4657      	mov	r7, sl
 8004094:	464e      	mov	r6, r9
 8004096:	4645      	mov	r5, r8
 8004098:	b4e0      	push	{r5, r6, r7}
 800409a:	1c1c      	adds	r4, r3, #0
 800409c:	1c05      	adds	r5, r0, #0
 800409e:	1c0e      	adds	r6, r1, #0
 80040a0:	4692      	mov	sl, r2
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80040a2:	f000 fbd9 	bl	8004858 <u8x8_utf8_init>
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <u8g2_draw_string+0x60>)
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
 80040a8:	2700      	movs	r7, #0
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 80040aa:	4698      	mov	r8, r3
      break;
    str++;
    if ( e != 0x0fffe )
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <u8g2_draw_string+0x64>)
 80040ae:	4699      	mov	r9, r3
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80040b0:	686b      	ldr	r3, [r5, #4]
 80040b2:	7821      	ldrb	r1, [r4, #0]
 80040b4:	1c28      	adds	r0, r5, #0
 80040b6:	4798      	blx	r3
 80040b8:	1e03      	subs	r3, r0, #0
    if ( e == 0x0ffff )
 80040ba:	4543      	cmp	r3, r8
 80040bc:	d012      	beq.n	80040e4 <u8g2_draw_string+0x54>
      break;
    str++;
 80040be:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 80040c0:	4548      	cmp	r0, r9
 80040c2:	d0f5      	beq.n	80040b0 <u8g2_draw_string+0x20>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80040c4:	1c31      	adds	r1, r6, #0
 80040c6:	4652      	mov	r2, sl
 80040c8:	1c28      	adds	r0, r5, #0
 80040ca:	f7ff ffc7 	bl	800405c <u8g2_DrawGlyph>
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80040ce:	686b      	ldr	r3, [r5, #4]
	case 3:
	  y -= delta;
	  break;
      }
#else
      x += delta;
 80040d0:	1986      	adds	r6, r0, r6
#endif

      sum += delta;    
 80040d2:	19c7      	adds	r7, r0, r7
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80040d4:	7821      	ldrb	r1, [r4, #0]
 80040d6:	1c28      	adds	r0, r5, #0
 80040d8:	4798      	blx	r3
	case 3:
	  y -= delta;
	  break;
      }
#else
      x += delta;
 80040da:	b2f6      	uxtb	r6, r6
#endif

      sum += delta;    
 80040dc:	b2ff      	uxtb	r7, r7
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80040de:	1e03      	subs	r3, r0, #0
    if ( e == 0x0ffff )
 80040e0:	4543      	cmp	r3, r8
 80040e2:	d1ec      	bne.n	80040be <u8g2_draw_string+0x2e>

      sum += delta;    
    }
  }
  return sum;
}
 80040e4:	1c38      	adds	r0, r7, #0
 80040e6:	bc1c      	pop	{r2, r3, r4}
 80040e8:	4690      	mov	r8, r2
 80040ea:	4699      	mov	r9, r3
 80040ec:	46a2      	mov	sl, r4
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	0000ffff 	.word	0x0000ffff
 80040f4:	0000fffe 	.word	0x0000fffe

080040f8 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80040f8:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80040fa:	4c02      	ldr	r4, [pc, #8]	; (8004104 <u8g2_DrawStr+0xc>)
 80040fc:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80040fe:	f7ff ffc7 	bl	8004090 <u8g2_draw_string>
}
 8004102:	bd10      	pop	{r4, pc}
 8004104:	080044b1 	.word	0x080044b1

08004108 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004108:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800410a:	4c02      	ldr	r4, [pc, #8]	; (8004114 <u8g2_DrawUTF8+0xc>)
 800410c:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800410e:	f7ff ffbf 	bl	8004090 <u8g2_draw_string>
}
 8004112:	bd10      	pop	{r4, pc}
 8004114:	08004525 	.word	0x08004525

08004118 <u8g2_DrawExtendedUTF8>:



u8g2_uint_t u8g2_DrawExtendedUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, u8g2_kerning_t *kerning, const char *str)
{
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	465f      	mov	r7, fp
 800411c:	464d      	mov	r5, r9
 800411e:	4656      	mov	r6, sl
 8004120:	4644      	mov	r4, r8
 8004122:	b4f0      	push	{r4, r5, r6, r7}
 8004124:	b083      	sub	sp, #12
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800412a:	1c07      	adds	r7, r0, #0
 800412c:	469a      	mov	sl, r3
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800412e:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <u8g2_DrawExtendedUTF8+0xc8>)
}



u8g2_uint_t u8g2_DrawExtendedUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, u8g2_kerning_t *kerning, const char *str)
{
 8004130:	4688      	mov	r8, r1
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8004132:	6043      	str	r3, [r0, #4]
}



u8g2_uint_t u8g2_DrawExtendedUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, u8g2_kerning_t *kerning, const char *str)
{
 8004134:	9200      	str	r2, [sp, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
  uint16_t e;
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004136:	f000 fb8f 	bl	8004858 <u8x8_utf8_init>


u8g2_uint_t u8g2_DrawExtendedUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, u8g2_kerning_t *kerning, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <u8g2_DrawExtendedUTF8+0xcc>)
  uint16_t e;
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
 800413c:	2500      	movs	r5, #0


u8g2_uint_t u8g2_DrawExtendedUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, u8g2_kerning_t *kerning, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
 800413e:	4699      	mov	r9, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8004140:	469b      	mov	fp, r3
      break;
    str++;
    if ( e != 0x0fffe )
 8004142:	4653      	mov	r3, sl
 8004144:	46aa      	mov	sl, r5
 8004146:	1c1d      	adds	r5, r3, #0
 8004148:	930d      	str	r3, [sp, #52]	; 0x34
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800414a:	7829      	ldrb	r1, [r5, #0]
 800414c:	1c38      	adds	r0, r7, #0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	1e04      	subs	r4, r0, #0
    if ( e == 0x0ffff )
 8004154:	455c      	cmp	r4, fp
 8004156:	d028      	beq.n	80041aa <u8g2_DrawExtendedUTF8+0x92>
      break;
    str++;
    if ( e != 0x0fffe )
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <u8g2_DrawExtendedUTF8+0xd0>)
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
      break;
    str++;
 800415a:	3501      	adds	r5, #1
    if ( e != 0x0fffe )
 800415c:	4298      	cmp	r0, r3
 800415e:	d0f4      	beq.n	800414a <u8g2_DrawExtendedUTF8+0x32>
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
 8004160:	1c21      	adds	r1, r4, #0
 8004162:	1c38      	adds	r0, r7, #0
 8004164:	f7ff ff0c 	bl	8003f80 <u8g2_GetGlyphWidth>
	    
      if ( to_left )
 8004168:	9b01      	ldr	r3, [sp, #4]
    if ( e == 0x0ffff )
      break;
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
 800416a:	b2c6      	uxtb	r6, r0
	    
      if ( to_left )
      {
        k = u8g2_GetKerning(u8g2, kerning, e, e_prev);
 800416c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800416e:	1c38      	adds	r0, r7, #0
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
	    
      if ( to_left )
 8004170:	2b00      	cmp	r3, #0
 8004172:	d022      	beq.n	80041ba <u8g2_DrawExtendedUTF8+0xa2>
      {
        k = u8g2_GetKerning(u8g2, kerning, e, e_prev);
 8004174:	1c22      	adds	r2, r4, #0
 8004176:	464b      	mov	r3, r9
 8004178:	f000 fbc8 	bl	800490c <u8g2_GetKerning>
	delta -= k;
	x -= delta;
 800417c:	4643      	mov	r3, r8
      delta = u8g2_GetGlyphWidth(u8g2, e);
	    
      if ( to_left )
      {
        k = u8g2_GetKerning(u8g2, kerning, e, e_prev);
	delta -= k;
 800417e:	1a36      	subs	r6, r6, r0
 8004180:	b2f6      	uxtb	r6, r6
	x -= delta;
 8004182:	1b9b      	subs	r3, r3, r6
 8004184:	b2db      	uxtb	r3, r3
 8004186:	4698      	mov	r8, r3
        k = u8g2_GetKerning(u8g2, kerning, e_prev, e);
	delta -= k;
      }
      e_prev = e;

      u8g2_DrawGlyph(u8g2, x, y, e);
 8004188:	1c19      	adds	r1, r3, #0
 800418a:	1c38      	adds	r0, r7, #0
 800418c:	9a00      	ldr	r2, [sp, #0]
 800418e:	1c23      	adds	r3, r4, #0
 8004190:	f7ff ff64 	bl	800405c <u8g2_DrawGlyph>
      {
	x += delta;
	x -= k;
      }
      
      sum += delta;    
 8004194:	4456      	add	r6, sl
 8004196:	b2f3      	uxtb	r3, r6
 8004198:	469a      	mov	sl, r3
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800419a:	7829      	ldrb	r1, [r5, #0]
 800419c:	1c38      	adds	r0, r7, #0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4798      	blx	r3
      {
	x += delta;
	x -= k;
      }
      
      sum += delta;    
 80041a2:	46a1      	mov	r9, r4
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80041a4:	1e04      	subs	r4, r0, #0
    if ( e == 0x0ffff )
 80041a6:	455c      	cmp	r4, fp
 80041a8:	d1d6      	bne.n	8004158 <u8g2_DrawExtendedUTF8+0x40>
      
      sum += delta;    
    }
  }
  return sum;
}
 80041aa:	4650      	mov	r0, sl
 80041ac:	b003      	add	sp, #12
 80041ae:	bc3c      	pop	{r2, r3, r4, r5}
 80041b0:	4690      	mov	r8, r2
 80041b2:	4699      	mov	r9, r3
 80041b4:	46a2      	mov	sl, r4
 80041b6:	46ab      	mov	fp, r5
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delta -= k;
	x -= delta;
      }
      else
      {
        k = u8g2_GetKerning(u8g2, kerning, e_prev, e);
 80041ba:	464a      	mov	r2, r9
 80041bc:	1c23      	adds	r3, r4, #0
 80041be:	f000 fba5 	bl	800490c <u8g2_GetKerning>
 80041c2:	4681      	mov	r9, r0
	delta -= k;
 80041c4:	1a36      	subs	r6, r6, r0
      }
      e_prev = e;

      u8g2_DrawGlyph(u8g2, x, y, e);
 80041c6:	4641      	mov	r1, r8
 80041c8:	1c23      	adds	r3, r4, #0
 80041ca:	1c38      	adds	r0, r7, #0
 80041cc:	9a00      	ldr	r2, [sp, #0]
 80041ce:	f7ff ff45 	bl	800405c <u8g2_DrawGlyph>
 80041d2:	464b      	mov	r3, r9
	x -= delta;
      }
      else
      {
        k = u8g2_GetKerning(u8g2, kerning, e_prev, e);
	delta -= k;
 80041d4:	b2f6      	uxtb	r6, r6
 80041d6:	1af3      	subs	r3, r6, r3
      {
      }
      else
      {
	x += delta;
	x -= k;
 80041d8:	4443      	add	r3, r8
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4698      	mov	r8, r3
 80041de:	e7d9      	b.n	8004194 <u8g2_DrawExtendedUTF8+0x7c>
 80041e0:	08004525 	.word	0x08004525
 80041e4:	0000ffff 	.word	0x0000ffff
 80041e8:	0000fffe 	.word	0x0000fffe

080041ec <u8g2_DrawExtUTF8>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawExtUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, const uint16_t *kerning_table, const char *str)
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ee:	465f      	mov	r7, fp
 80041f0:	4644      	mov	r4, r8
 80041f2:	4656      	mov	r6, sl
 80041f4:	464d      	mov	r5, r9
 80041f6:	b4f0      	push	{r4, r5, r6, r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041fe:	1c07      	adds	r7, r0, #0
 8004200:	4698      	mov	r8, r3
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8004202:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <u8g2_DrawExtUTF8+0xb8>)
  }
  return sum;
}

u8g2_uint_t u8g2_DrawExtUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, const uint16_t *kerning_table, const char *str)
{
 8004204:	4689      	mov	r9, r1
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8004206:	6043      	str	r3, [r0, #4]
  }
  return sum;
}

u8g2_uint_t u8g2_DrawExtUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, const uint16_t *kerning_table, const char *str)
{
 8004208:	9200      	str	r2, [sp, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
  uint16_t e;
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800420a:	f000 fb25 	bl	8004858 <u8x8_utf8_init>
}

u8g2_uint_t u8g2_DrawExtUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, const uint16_t *kerning_table, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <u8g2_DrawExtUTF8+0xbc>)
  uint16_t e;
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
 8004210:	2400      	movs	r4, #0
}

u8g2_uint_t u8g2_DrawExtUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint8_t to_left, const uint16_t *kerning_table, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_utf8_next;
  uint16_t e_prev = 0x0ffff;
 8004212:	469a      	mov	sl, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
 8004214:	469b      	mov	fp, r3
      break;
    str++;
    if ( e != 0x0fffe )
 8004216:	4643      	mov	r3, r8
 8004218:	46a0      	mov	r8, r4
 800421a:	1c1c      	adds	r4, r3, #0
 800421c:	930d      	str	r3, [sp, #52]	; 0x34
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800421e:	7821      	ldrb	r1, [r4, #0]
 8004220:	1c38      	adds	r0, r7, #0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4798      	blx	r3
 8004226:	1e05      	subs	r5, r0, #0
    if ( e == 0x0ffff )
 8004228:	455d      	cmp	r5, fp
 800422a:	d028      	beq.n	800427e <u8g2_DrawExtUTF8+0x92>
      break;
    str++;
    if ( e != 0x0fffe )
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <u8g2_DrawExtUTF8+0xc0>)
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
      break;
    str++;
 800422e:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 8004230:	4298      	cmp	r0, r3
 8004232:	d0f4      	beq.n	800421e <u8g2_DrawExtUTF8+0x32>
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
 8004234:	1c29      	adds	r1, r5, #0
 8004236:	1c38      	adds	r0, r7, #0
 8004238:	f7ff fea2 	bl	8003f80 <u8g2_GetGlyphWidth>
	    
      if ( to_left )
 800423c:	9b01      	ldr	r3, [sp, #4]
    if ( e == 0x0ffff )
      break;
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
 800423e:	b2c6      	uxtb	r6, r0
	    
      if ( to_left )
      {
        k = u8g2_GetKerningByTable(u8g2, kerning_table, e, e_prev);
 8004240:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004242:	1c38      	adds	r0, r7, #0
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_GetGlyphWidth(u8g2, e);
	    
      if ( to_left )
 8004244:	2b00      	cmp	r3, #0
 8004246:	d022      	beq.n	800428e <u8g2_DrawExtUTF8+0xa2>
      {
        k = u8g2_GetKerningByTable(u8g2, kerning_table, e, e_prev);
 8004248:	4653      	mov	r3, sl
 800424a:	1c2a      	adds	r2, r5, #0
 800424c:	f000 fb96 	bl	800497c <u8g2_GetKerningByTable>
	delta -= k;
	x -= delta;
 8004250:	464b      	mov	r3, r9
      delta = u8g2_GetGlyphWidth(u8g2, e);
	    
      if ( to_left )
      {
        k = u8g2_GetKerningByTable(u8g2, kerning_table, e, e_prev);
	delta -= k;
 8004252:	1a36      	subs	r6, r6, r0
 8004254:	b2f6      	uxtb	r6, r6
	x -= delta;
 8004256:	1b9b      	subs	r3, r3, r6
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4699      	mov	r9, r3
      }
      else
      {
	x += delta;
      }
      u8g2_DrawGlyph(u8g2, x, y, e);
 800425c:	1c2b      	adds	r3, r5, #0
 800425e:	4649      	mov	r1, r9
 8004260:	9a00      	ldr	r2, [sp, #0]
      {
	//x += delta;
	//x -= k;
      }
      
      sum += delta;    
 8004262:	4446      	add	r6, r8
      }
      else
      {
	x += delta;
      }
      u8g2_DrawGlyph(u8g2, x, y, e);
 8004264:	1c38      	adds	r0, r7, #0
 8004266:	f7ff fef9 	bl	800405c <u8g2_DrawGlyph>
      {
	//x += delta;
	//x -= k;
      }
      
      sum += delta;    
 800426a:	b2f3      	uxtb	r3, r6
 800426c:	4698      	mov	r8, r3
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800426e:	7821      	ldrb	r1, [r4, #0]
 8004270:	1c38      	adds	r0, r7, #0
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4798      	blx	r3
      {
	//x += delta;
	//x -= k;
      }
      
      sum += delta;    
 8004276:	46aa      	mov	sl, r5
  u8g2_uint_t delta, sum, k;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004278:	1e05      	subs	r5, r0, #0
    if ( e == 0x0ffff )
 800427a:	455d      	cmp	r5, fp
 800427c:	d1d6      	bne.n	800422c <u8g2_DrawExtUTF8+0x40>
      
      sum += delta;    
    }
  }
  return sum;
}
 800427e:	4640      	mov	r0, r8
 8004280:	b003      	add	sp, #12
 8004282:	bc3c      	pop	{r2, r3, r4, r5}
 8004284:	4690      	mov	r8, r2
 8004286:	4699      	mov	r9, r3
 8004288:	46a2      	mov	sl, r4
 800428a:	46ab      	mov	fp, r5
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delta -= k;
	x -= delta;
      }
      else
      {
        k = u8g2_GetKerningByTable(u8g2, kerning_table, e_prev, e);
 800428e:	1c2b      	adds	r3, r5, #0
 8004290:	4652      	mov	r2, sl
 8004292:	f000 fb73 	bl	800497c <u8g2_GetKerningByTable>
      if ( to_left )
      {
      }
      else
      {
	x += delta;
 8004296:	464b      	mov	r3, r9
	x -= delta;
      }
      else
      {
        k = u8g2_GetKerningByTable(u8g2, kerning_table, e_prev, e);
	delta -= k;
 8004298:	1a36      	subs	r6, r6, r0
 800429a:	b2f6      	uxtb	r6, r6
      if ( to_left )
      {
      }
      else
      {
	x += delta;
 800429c:	18f3      	adds	r3, r6, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4699      	mov	r9, r3
 80042a2:	e7db      	b.n	800425c <u8g2_DrawExtUTF8+0x70>
 80042a4:	08004525 	.word	0x08004525
 80042a8:	0000ffff 	.word	0x0000ffff
 80042ac:	0000fffe 	.word	0x0000fffe

080042b0 <u8g2_UpdateRefHeight>:

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
 80042b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80042b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( u8g2->font == NULL )
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01c      	beq.n	80042f2 <u8g2_UpdateRefHeight+0x42>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80042b8:	236d      	movs	r3, #109	; 0x6d
 80042ba:	2477      	movs	r4, #119	; 0x77
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80042bc:	2178      	movs	r1, #120	; 0x78

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80042be:	5cc2      	ldrb	r2, [r0, r3]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80042c0:	3301      	adds	r3, #1

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80042c2:	5502      	strb	r2, [r0, r4]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80042c4:	5cc3      	ldrb	r3, [r0, r3]
 80042c6:	5443      	strb	r3, [r0, r1]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80042c8:	3902      	subs	r1, #2
 80042ca:	5c41      	ldrb	r1, [r0, r1]
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d010      	beq.n	80042f2 <u8g2_UpdateRefHeight+0x42>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80042d0:	2901      	cmp	r1, #1
 80042d2:	d012      	beq.n	80042fa <u8g2_UpdateRefHeight+0x4a>
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80042d4:	216a      	movs	r1, #106	; 0x6a
 80042d6:	5c45      	ldrb	r5, [r0, r1]
 80042d8:	3102      	adds	r1, #2
 80042da:	5c46      	ldrb	r6, [r0, r1]
 80042dc:	b269      	sxtb	r1, r5
 80042de:	b277      	sxtb	r7, r6
 80042e0:	b252      	sxtb	r2, r2
 80042e2:	19c9      	adds	r1, r1, r7
 80042e4:	428a      	cmp	r2, r1
 80042e6:	db05      	blt.n	80042f4 <u8g2_UpdateRefHeight+0x44>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	42bb      	cmp	r3, r7
 80042ec:	dd01      	ble.n	80042f2 <u8g2_UpdateRefHeight+0x42>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80042ee:	2378      	movs	r3, #120	; 0x78
 80042f0:	54c6      	strb	r6, [r0, r3]
  }  
}
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80042f4:	1975      	adds	r5, r6, r5
 80042f6:	5505      	strb	r5, [r0, r4]
 80042f8:	e7f6      	b.n	80042e8 <u8g2_UpdateRefHeight+0x38>
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80042fa:	316e      	adds	r1, #110	; 0x6e
 80042fc:	5c41      	ldrb	r1, [r0, r1]
 80042fe:	b252      	sxtb	r2, r2
 8004300:	b24d      	sxtb	r5, r1
 8004302:	42aa      	cmp	r2, r5
 8004304:	da00      	bge.n	8004308 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004306:	5501      	strb	r1, [r0, r4]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004308:	2270      	movs	r2, #112	; 0x70
 800430a:	5c82      	ldrb	r2, [r0, r2]
 800430c:	b25b      	sxtb	r3, r3
 800430e:	b251      	sxtb	r1, r2
 8004310:	428b      	cmp	r3, r1
 8004312:	ddee      	ble.n	80042f2 <u8g2_UpdateRefHeight+0x42>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004314:	2378      	movs	r3, #120	; 0x78
 8004316:	54c2      	strb	r2, [r0, r3]
 8004318:	e7eb      	b.n	80042f2 <u8g2_UpdateRefHeight+0x42>
 800431a:	46c0      	nop			; (mov r8, r8)

0800431c <u8g2_SetFontRefHeightText>:
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
  }  
}

void u8g2_SetFontRefHeightText(u8g2_t *u8g2)
{
 800431c:	b508      	push	{r3, lr}
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_TEXT;
 800431e:	2200      	movs	r2, #0
 8004320:	2376      	movs	r3, #118	; 0x76
 8004322:	54c2      	strb	r2, [r0, r3]
  u8g2_UpdateRefHeight(u8g2);
 8004324:	f7ff ffc4 	bl	80042b0 <u8g2_UpdateRefHeight>
}
 8004328:	bd08      	pop	{r3, pc}
 800432a:	46c0      	nop			; (mov r8, r8)

0800432c <u8g2_SetFontRefHeightExtendedText>:

void u8g2_SetFontRefHeightExtendedText(u8g2_t *u8g2)
{
 800432c:	b508      	push	{r3, lr}
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
 800432e:	2201      	movs	r2, #1
 8004330:	2376      	movs	r3, #118	; 0x76
 8004332:	54c2      	strb	r2, [r0, r3]
  u8g2_UpdateRefHeight(u8g2);
 8004334:	f7ff ffbc 	bl	80042b0 <u8g2_UpdateRefHeight>
}
 8004338:	bd08      	pop	{r3, pc}
 800433a:	46c0      	nop			; (mov r8, r8)

0800433c <u8g2_SetFontRefHeightAll>:

void u8g2_SetFontRefHeightAll(u8g2_t *u8g2)
{
 800433c:	b508      	push	{r3, lr}
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_ALL;
 800433e:	2202      	movs	r2, #2
 8004340:	2376      	movs	r3, #118	; 0x76
 8004342:	54c2      	strb	r2, [r0, r3]
  u8g2_UpdateRefHeight(u8g2);
 8004344:	f7ff ffb4 	bl	80042b0 <u8g2_UpdateRefHeight>
}
 8004348:	bd08      	pop	{r3, pc}
 800434a:	46c0      	nop			; (mov r8, r8)

0800434c <u8g2_SetFontPosBaseline>:
  return 0;
}

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800434c:	4b01      	ldr	r3, [pc, #4]	; (8004354 <u8g2_SetFontPosBaseline+0x8>)
 800434e:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 8004350:	4770      	bx	lr
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	08003bbd 	.word	0x08003bbd

08004358 <u8g2_SetFontPosBottom>:
  return (u8g2_uint_t)(u8g2->font_ref_descent);
}

void u8g2_SetFontPosBottom(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
 8004358:	4b01      	ldr	r3, [pc, #4]	; (8004360 <u8g2_SetFontPosBottom+0x8>)
 800435a:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 800435c:	4770      	bx	lr
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	08003bc1 	.word	0x08003bc1

08004364 <u8g2_SetFontPosTop>:
  return tmp;
}

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8004364:	4b01      	ldr	r3, [pc, #4]	; (800436c <u8g2_SetFontPosTop+0x8>)
 8004366:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 8004368:	4770      	bx	lr
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	08003bc9 	.word	0x08003bc9

08004370 <u8g2_SetFontPosCenter>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
 8004370:	4b01      	ldr	r3, [pc, #4]	; (8004378 <u8g2_SetFontPosCenter+0x8>)
 8004372:	64c3      	str	r3, [r0, #76]	; 0x4c
}
 8004374:	4770      	bx	lr
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	08003bd5 	.word	0x08003bd5

0800437c <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 800437c:	6c83      	ldr	r3, [r0, #72]	; 0x48
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800437e:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 8004380:	428b      	cmp	r3, r1
 8004382:	d007      	beq.n	8004394 <u8g2_SetFont+0x18>
 8004384:	1c04      	adds	r4, r0, #0
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004386:	6481      	str	r1, [r0, #72]	; 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004388:	3060      	adds	r0, #96	; 0x60
 800438a:	f7ff fc2f 	bl	8003bec <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800438e:	1c20      	adds	r0, r4, #0
 8004390:	f7ff ff8e 	bl	80042b0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004394:	bd10      	pop	{r4, pc}
 8004396:	46c0      	nop			; (mov r8, r8)

08004398 <u8g2_GetStrX>:
  *dx = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
}

/* u8g compatible GetStrX function */
int8_t u8g2_GetStrX(u8g2_t *u8g2, const char *s)
{
 8004398:	b510      	push	{r4, lr}
  uint8_t w;
  int8_t ox, dx;
  u8g2_GetGlyphHorizontalProperties(u8g2, *s, &w, &ox, &dx);
 800439a:	230f      	movs	r3, #15
 800439c:	240e      	movs	r4, #14
 800439e:	220d      	movs	r2, #13
  *dx = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
}

/* u8g compatible GetStrX function */
int8_t u8g2_GetStrX(u8g2_t *u8g2, const char *s)
{
 80043a0:	b084      	sub	sp, #16
  uint8_t w;
  int8_t ox, dx;
  u8g2_GetGlyphHorizontalProperties(u8g2, *s, &w, &ox, &dx);
 80043a2:	446c      	add	r4, sp
 80043a4:	446b      	add	r3, sp
 80043a6:	7809      	ldrb	r1, [r1, #0]
 80043a8:	446a      	add	r2, sp
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	1c23      	adds	r3, r4, #0
 80043ae:	f7ff fdab 	bl	8003f08 <u8g2_GetGlyphHorizontalProperties>
  return ox;
 80043b2:	2000      	movs	r0, #0
 80043b4:	5620      	ldrsb	r0, [r4, r0]
}
 80043b6:	b004      	add	sp, #16
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)

080043bc <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80043bc:	b508      	push	{r3, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80043be:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <u8g2_GetStrWidth+0xc>)
 80043c0:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, s);
 80043c2:	f7ff fe0b 	bl	8003fdc <u8g2_string_width>
}
 80043c6:	bd08      	pop	{r3, pc}
 80043c8:	080044b1 	.word	0x080044b1

080043cc <u8g2_GetExactStrWidth>:

u8g2_uint_t u8g2_GetExactStrWidth(u8g2_t *u8g2, const char *s)
{
 80043cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ce:	4656      	mov	r6, sl
 80043d0:	464d      	mov	r5, r9
 80043d2:	4644      	mov	r4, r8
 80043d4:	465f      	mov	r7, fp
 80043d6:	b4f0      	push	{r4, r5, r6, r7}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <u8g2_GetExactStrWidth+0xb0>)
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_string_width(u8g2, s);
}

u8g2_uint_t u8g2_GetExactStrWidth(u8g2_t *u8g2, const char *s)
{
 80043da:	b085      	sub	sp, #20
 80043dc:	1c05      	adds	r5, r0, #0
 80043de:	1c0c      	adds	r4, r1, #0
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80043e0:	6043      	str	r3, [r0, #4]
  /* check for empty string, width is already 0 */
  do
  {
    enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    str++;
  } while( enc == 0x0fffe );
 80043e2:	4e27      	ldr	r6, [pc, #156]	; (8004480 <u8g2_GetExactStrWidth+0xb4>)
 80043e4:	e000      	b.n	80043e8 <u8g2_GetExactStrWidth+0x1c>
 80043e6:	686b      	ldr	r3, [r5, #4]
    
  
  /* check for empty string, width is already 0 */
  do
  {
    enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80043e8:	7821      	ldrb	r1, [r4, #0]
 80043ea:	1c28      	adds	r0, r5, #0
 80043ec:	4798      	blx	r3
    str++;
 80043ee:	3401      	adds	r4, #1
    
  
  /* check for empty string, width is already 0 */
  do
  {
    enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80043f0:	1e01      	subs	r1, r0, #0
    str++;
  } while( enc == 0x0fffe );
 80043f2:	42b1      	cmp	r1, r6
 80043f4:	d0f7      	beq.n	80043e6 <u8g2_GetExactStrWidth+0x1a>
  
  if ( enc== 0x0ffff )
 80043f6:	4b23      	ldr	r3, [pc, #140]	; (8004484 <u8g2_GetExactStrWidth+0xb8>)
     return w;
 80043f8:	2000      	movs	r0, #0
  {
    enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    str++;
  } while( enc == 0x0fffe );
  
  if ( enc== 0x0ffff )
 80043fa:	469a      	mov	sl, r3
 80043fc:	4299      	cmp	r1, r3
 80043fe:	d036      	beq.n	800446e <u8g2_GetExactStrWidth+0xa2>
     return w;
  
  /* get the glyph information of the first char. This must be valid, because we already checked for the empty string */
  /* if *s is not inside the font, then the cached parameters of the glyph are all zero */
  u8g2_GetGlyphHorizontalProperties(u8g2, enc, &gw, &ox, &dx);  
 8004400:	230d      	movs	r3, #13
 8004402:	270e      	movs	r7, #14
 8004404:	260f      	movs	r6, #15
 8004406:	446b      	add	r3, sp
 8004408:	446f      	add	r7, sp
 800440a:	446e      	add	r6, sp
 800440c:	1c28      	adds	r0, r5, #0
 800440e:	1c1a      	adds	r2, r3, #0
 8004410:	469b      	mov	fp, r3
 8004412:	9600      	str	r6, [sp, #0]
 8004414:	1c3b      	adds	r3, r7, #0
 8004416:	f7ff fd77 	bl	8003f08 <u8g2_GetGlyphHorizontalProperties>
  /* strlen(s) == 2:       width = - offx(s[0]) + deltax(s[0]) + offx(s[1]) + width(s[1]) */
  /* strlen(s) == 3:       width = - offx(s[0]) + deltax(s[0]) + deltax(s[1]) + offx(s[2]) + width(s[2]) */
  
  /* assume that the string has size 2 or more, than start with negative offset-x */
  /* for string with size 1, this will be nullified after the loop */
  w = -ox;  
 800441a:	7838      	ldrb	r0, [r7, #0]
 800441c:	4240      	negs	r0, r0
 800441e:	b2c3      	uxtb	r3, r0
 8004420:	4698      	mov	r8, r3
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
      str++;
    } while( enc == 0x0fffe );
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <u8g2_GetExactStrWidth+0xb4>)
 8004424:	4699      	mov	r9, r3
  {
    
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004426:	7821      	ldrb	r1, [r4, #0]
 8004428:	1c28      	adds	r0, r5, #0
 800442a:	686b      	ldr	r3, [r5, #4]
 800442c:	4798      	blx	r3
      str++;
 800442e:	3401      	adds	r4, #1
  {
    
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004430:	1e01      	subs	r1, r0, #0
      str++;
    } while( enc == 0x0fffe );
 8004432:	4549      	cmp	r1, r9
 8004434:	d0f7      	beq.n	8004426 <u8g2_GetExactStrWidth+0x5a>
    if ( enc== 0x0ffff )
 8004436:	4550      	cmp	r0, sl
 8004438:	d013      	beq.n	8004462 <u8g2_GetExactStrWidth+0x96>
      break;

    u8g2_GetGlyphHorizontalProperties(u8g2, enc, &gw, &ox, &dx);  
 800443a:	1c28      	adds	r0, r5, #0
 800443c:	465a      	mov	r2, fp
 800443e:	1c3b      	adds	r3, r7, #0
 8004440:	9600      	str	r6, [sp, #0]
 8004442:	f7ff fd61 	bl	8003f08 <u8g2_GetGlyphHorizontalProperties>
    
    /* if there are still more characters, add the delta to the next glyph */
    w += dx;    
 8004446:	7830      	ldrb	r0, [r6, #0]
  {
    
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004448:	7821      	ldrb	r1, [r4, #0]
      break;

    u8g2_GetGlyphHorizontalProperties(u8g2, enc, &gw, &ox, &dx);  
    
    /* if there are still more characters, add the delta to the next glyph */
    w += dx;    
 800444a:	4440      	add	r0, r8
 800444c:	b2c3      	uxtb	r3, r0
 800444e:	4698      	mov	r8, r3
  {
    
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004450:	1c28      	adds	r0, r5, #0
 8004452:	686b      	ldr	r3, [r5, #4]
 8004454:	4798      	blx	r3
      str++;
 8004456:	3401      	adds	r4, #1
  {
    
    /* check and stop if the end of the string is reached */
    do
    {
      enc = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004458:	1e01      	subs	r1, r0, #0
      str++;
    } while( enc == 0x0fffe );
 800445a:	4549      	cmp	r1, r9
 800445c:	d0e3      	beq.n	8004426 <u8g2_GetExactStrWidth+0x5a>
    if ( enc== 0x0ffff )
 800445e:	4550      	cmp	r0, sl
 8004460:	d1eb      	bne.n	800443a <u8g2_GetExactStrWidth+0x6e>
 8004462:	465b      	mov	r3, fp
 8004464:	7838      	ldrb	r0, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	18c0      	adds	r0, r0, r3
  /* here is another exception, if the last char is a black, use the dx value instead */
  if ( enc != ' ' )
  {
    /* if g was not updated in the for loop (strlen() == 1), then the initial offset x gets removed */
    w += gw;
    w += ox;
 800446a:	4440      	add	r0, r8
 800446c:	b2c0      	uxtb	r0, r0

u8g2_uint_t u8g2_GetExactStrWidth(u8g2_t *u8g2, const char *s)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_calculate_exact_string_width(u8g2, s);
}
 800446e:	b005      	add	sp, #20
 8004470:	bc3c      	pop	{r2, r3, r4, r5}
 8004472:	4690      	mov	r8, r2
 8004474:	4699      	mov	r9, r3
 8004476:	46a2      	mov	sl, r4
 8004478:	46ab      	mov	fp, r5
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	080044b1 	.word	0x080044b1
 8004480:	0000fffe 	.word	0x0000fffe
 8004484:	0000ffff 	.word	0x0000ffff

08004488 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8004488:	b508      	push	{r3, lr}
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800448a:	4b02      	ldr	r3, [pc, #8]	; (8004494 <u8g2_GetUTF8Width+0xc>)
 800448c:	6043      	str	r3, [r0, #4]
  return u8g2_string_width(u8g2, str);
 800448e:	f7ff fda5 	bl	8003fdc <u8g2_string_width>
}
 8004492:	bd08      	pop	{r3, pc}
 8004494:	08004525 	.word	0x08004525

08004498 <u8g2_SetFontDirection>:
void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
#endif
}
 8004498:	4770      	bx	lr
 800449a:	46c0      	nop			; (mov r8, r8)

0800449c <u8x8_upscale_buf>:
	return y;
}

static void u8x8_upscale_buf(uint8_t *src, uint8_t *dest) U8X8_NOINLINE;
static void u8x8_upscale_buf(uint8_t *src, uint8_t *dest)
{
 800449c:	1d02      	adds	r2, r0, #4
  uint8_t i = 4;  
  do 
  {
    *dest++ = *src;
 800449e:	7803      	ldrb	r3, [r0, #0]
 80044a0:	700b      	strb	r3, [r1, #0]
    *dest++ = *src++;
 80044a2:	7803      	ldrb	r3, [r0, #0]
 80044a4:	3001      	adds	r0, #1
 80044a6:	704b      	strb	r3, [r1, #1]
 80044a8:	3102      	adds	r1, #2
    i--;
  } while( i > 0 );
 80044aa:	4290      	cmp	r0, r2
 80044ac:	d1f7      	bne.n	800449e <u8x8_upscale_buf+0x2>
}
 80044ae:	4770      	bx	lr

080044b0 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d101      	bne.n	80044b8 <u8x8_ascii_next+0x8>
    return 0x0ffff;	/* end of string detected*/
 80044b4:	4802      	ldr	r0, [pc, #8]	; (80044c0 <u8x8_ascii_next+0x10>)
  return b;
}
 80044b6:	4770      	bx	lr
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80044b8:	290a      	cmp	r1, #10
 80044ba:	d0fb      	beq.n	80044b4 <u8x8_ascii_next+0x4>
    return 0x0ffff;	/* end of string detected*/
  return b;
 80044bc:	b288      	uxth	r0, r1
 80044be:	e7fa      	b.n	80044b6 <u8x8_ascii_next+0x6>
 80044c0:	0000ffff 	.word	0x0000ffff

080044c4 <u8x8_get_glyph_data.isra.0>:
   u8x8: ptr to u8x8 structure
   encoding: glyph for which the data is requested (must be between 0 and 255)
   buf: pointer to 8 bytes
*/
static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf) U8X8_NOINLINE;
static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf) 
 80044c4:	b570      	push	{r4, r5, r6, lr}
{
  uint8_t first, last, i;
  uint16_t offset;
  first = u8x8_pgm_read(u8x8->font+0);
 80044c6:	6805      	ldr	r5, [r0, #0]
 80044c8:	782c      	ldrb	r4, [r5, #0]
  last = u8x8_pgm_read(u8x8->font+1);
 80044ca:	786e      	ldrb	r6, [r5, #1]
  
  /* get the glyph bitmap from the font */
  if ( first <= encoding && encoding <= last )
 80044cc:	4294      	cmp	r4, r2
 80044ce:	d81f      	bhi.n	8004510 <u8x8_get_glyph_data.isra.0+0x4c>
 80044d0:	4296      	cmp	r6, r2
 80044d2:	d31d      	bcc.n	8004510 <u8x8_get_glyph_data.isra.0+0x4c>
  {
    offset = encoding;
    offset -= first;
 80044d4:	1b14      	subs	r4, r2, r4
 80044d6:	b2a4      	uxth	r4, r4
    offset *= 8;
 80044d8:	00e4      	lsls	r4, r4, #3
 80044da:	b2a4      	uxth	r4, r4
    offset +=2;
 80044dc:	1ca2      	adds	r2, r4, #2
 80044de:	340a      	adds	r4, #10
 80044e0:	b292      	uxth	r2, r2
 80044e2:	1c1e      	adds	r6, r3, #0
 80044e4:	b2a4      	uxth	r4, r4
 80044e6:	e000      	b.n	80044ea <u8x8_get_glyph_data.isra.0+0x26>
 80044e8:	6805      	ldr	r5, [r0, #0]
    for( i = 0; i < 8; i++ )
    {
      buf[i] = u8x8_pgm_read(u8x8->font+offset);
 80044ea:	5cad      	ldrb	r5, [r5, r2]
      offset++;
 80044ec:	3201      	adds	r2, #1
 80044ee:	b292      	uxth	r2, r2
    offset -= first;
    offset *= 8;
    offset +=2;
    for( i = 0; i < 8; i++ )
    {
      buf[i] = u8x8_pgm_read(u8x8->font+offset);
 80044f0:	7035      	strb	r5, [r6, #0]
 80044f2:	3601      	adds	r6, #1
  {
    offset = encoding;
    offset -= first;
    offset *= 8;
    offset +=2;
    for( i = 0; i < 8; i++ )
 80044f4:	42a2      	cmp	r2, r4
 80044f6:	d1f7      	bne.n	80044e8 <u8x8_get_glyph_data.isra.0+0x24>
      buf[i] = 0;
    }
  }
  
  /* invert the bitmap if required */
  if ( u8x8->is_font_inverse_mode )
 80044f8:	780a      	ldrb	r2, [r1, #0]
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	d007      	beq.n	800450e <u8x8_get_glyph_data.isra.0+0x4a>
 80044fe:	1c19      	adds	r1, r3, #0
 8004500:	3108      	adds	r1, #8
  {
    for( i = 0; i < 8; i++ )
    {
      buf[i] ^= 255;
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	43d2      	mvns	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	3301      	adds	r3, #1
  }
  
  /* invert the bitmap if required */
  if ( u8x8->is_font_inverse_mode )
  {
    for( i = 0; i < 8; i++ )
 800450a:	428b      	cmp	r3, r1
 800450c:	d1f9      	bne.n	8004502 <u8x8_get_glyph_data.isra.0+0x3e>
    {
      buf[i] ^= 255;
    }
  }
  
}
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	1c1c      	adds	r4, r3, #0
 8004512:	1c1a      	adds	r2, r3, #0
  }
  else
  {
    for( i = 0; i < 8; i++ )
    {
      buf[i] = 0;
 8004514:	2000      	movs	r0, #0
 8004516:	3408      	adds	r4, #8
 8004518:	7010      	strb	r0, [r2, #0]
 800451a:	3201      	adds	r2, #1
      offset++;
    }
  }
  else
  {
    for( i = 0; i < 8; i++ )
 800451c:	42a2      	cmp	r2, r4
 800451e:	d1fb      	bne.n	8004518 <u8x8_get_glyph_data.isra.0+0x54>
 8004520:	e7ea      	b.n	80044f8 <u8x8_get_glyph_data.isra.0+0x34>
 8004522:	46c0      	nop			; (mov r8, r8)

08004524 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8004524:	b510      	push	{r4, lr}
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8004526:	2900      	cmp	r1, #0
 8004528:	d102      	bne.n	8004530 <u8x8_utf8_next+0xc>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800452a:	491f      	ldr	r1, [pc, #124]	; (80045a8 <u8x8_utf8_next+0x84>)
    u8x8->encoding |= b;
    if ( u8x8->utf8_state != 0 )
      return 0x0fffe;	/* nothing to do yet */
  }
  return u8x8->encoding;
}
 800452c:	1c08      	adds	r0, r1, #0
 800452e:	bd10      	pop	{r4, pc}
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8004530:	290a      	cmp	r1, #10
 8004532:	d0fa      	beq.n	800452a <u8x8_utf8_next+0x6>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
  if ( u8x8->utf8_state == 0 )
 8004534:	2423      	movs	r4, #35	; 0x23
 8004536:	5d03      	ldrb	r3, [r0, r4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <u8x8_utf8_next+0x2a>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800453c:	29fb      	cmp	r1, #251	; 0xfb
 800453e:	d914      	bls.n	800456a <u8x8_utf8_next+0x46>
    {
      u8x8->utf8_state = 5;
 8004540:	3305      	adds	r3, #5
 8004542:	5503      	strb	r3, [r0, r4]
      b &= 1;
 8004544:	3b04      	subs	r3, #4
 8004546:	4019      	ands	r1, r3
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
    }
    u8x8->encoding = b;
 8004548:	8381      	strh	r1, [r0, #28]
    return 0x0fffe;
 800454a:	4918      	ldr	r1, [pc, #96]	; (80045ac <u8x8_utf8_next+0x88>)
 800454c:	e7ee      	b.n	800452c <u8x8_utf8_next+0x8>
  }
  else
  {
    u8x8->utf8_state--;
 800454e:	3b01      	subs	r3, #1
 8004550:	b2da      	uxtb	r2, r3
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
    b &= 0x03f;
    u8x8->encoding |= b;
 8004552:	233f      	movs	r3, #63	; 0x3f
    u8x8->encoding = b;
    return 0x0fffe;
  }
  else
  {
    u8x8->utf8_state--;
 8004554:	5502      	strb	r2, [r0, r4]
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
    b &= 0x03f;
    u8x8->encoding |= b;
 8004556:	4019      	ands	r1, r3
  }
  else
  {
    u8x8->utf8_state--;
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8004558:	8b83      	ldrh	r3, [r0, #28]
 800455a:	019b      	lsls	r3, r3, #6
    b &= 0x03f;
    u8x8->encoding |= b;
 800455c:	4319      	orrs	r1, r3
 800455e:	b289      	uxth	r1, r1
 8004560:	8381      	strh	r1, [r0, #28]
    if ( u8x8->utf8_state != 0 )
 8004562:	2a00      	cmp	r2, #0
 8004564:	d0e2      	beq.n	800452c <u8x8_utf8_next+0x8>
      return 0x0fffe;	/* nothing to do yet */
 8004566:	4911      	ldr	r1, [pc, #68]	; (80045ac <u8x8_utf8_next+0x88>)
 8004568:	e7e0      	b.n	800452c <u8x8_utf8_next+0x8>
    if ( b >= 0xfc )	/* 6 byte sequence */
    {
      u8x8->utf8_state = 5;
      b &= 1;
    }
    else if ( b >= 0xf8 )
 800456a:	29f7      	cmp	r1, #247	; 0xf7
 800456c:	d904      	bls.n	8004578 <u8x8_utf8_next+0x54>
    {
      u8x8->utf8_state = 4;
 800456e:	2304      	movs	r3, #4
 8004570:	5503      	strb	r3, [r0, r4]
      b &= 3;
 8004572:	3b01      	subs	r3, #1
 8004574:	4019      	ands	r1, r3
 8004576:	e7e7      	b.n	8004548 <u8x8_utf8_next+0x24>
    }
    else if ( b >= 0xf0 )
 8004578:	29ef      	cmp	r1, #239	; 0xef
 800457a:	d904      	bls.n	8004586 <u8x8_utf8_next+0x62>
    {
      u8x8->utf8_state = 3;
 800457c:	2303      	movs	r3, #3
 800457e:	5503      	strb	r3, [r0, r4]
      b &= 7;      
 8004580:	3304      	adds	r3, #4
 8004582:	4019      	ands	r1, r3
 8004584:	e7e0      	b.n	8004548 <u8x8_utf8_next+0x24>
    }
    else if ( b >= 0xe0 )
 8004586:	29df      	cmp	r1, #223	; 0xdf
 8004588:	d904      	bls.n	8004594 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 2;
 800458a:	2302      	movs	r3, #2
 800458c:	5503      	strb	r3, [r0, r4]
      b &= 15;
 800458e:	330d      	adds	r3, #13
 8004590:	4019      	ands	r1, r3
 8004592:	e7d9      	b.n	8004548 <u8x8_utf8_next+0x24>
    }
    else if ( b >= 0xc0 )
 8004594:	29bf      	cmp	r1, #191	; 0xbf
 8004596:	d904      	bls.n	80045a2 <u8x8_utf8_next+0x7e>
    {
      u8x8->utf8_state = 1;
 8004598:	2301      	movs	r3, #1
 800459a:	5503      	strb	r3, [r0, r4]
      b &= 0x01f;
 800459c:	331e      	adds	r3, #30
 800459e:	4019      	ands	r1, r3
 80045a0:	e7d2      	b.n	8004548 <u8x8_utf8_next+0x24>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80045a2:	b289      	uxth	r1, r1
 80045a4:	e7c2      	b.n	800452c <u8x8_utf8_next+0x8>
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	0000ffff 	.word	0x0000ffff
 80045ac:	0000fffe 	.word	0x0000fffe

080045b0 <u8x8_SetFont>:
#endif


void u8x8_SetFont(u8x8_t *u8x8, const uint8_t *font_8x8)
{
  u8x8->font = font_8x8;
 80045b0:	6181      	str	r1, [r0, #24]
}
 80045b2:	4770      	bx	lr

080045b4 <u8x8_DrawGlyph>:
  }
  
}

void u8x8_DrawGlyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
 80045b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b6:	1c04      	adds	r4, r0, #0
 80045b8:	1c0f      	adds	r7, r1, #0
 80045ba:	1c21      	adds	r1, r4, #0
 80045bc:	1c16      	adds	r6, r2, #0
 80045be:	b085      	sub	sp, #20
  uint8_t buf[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
 80045c0:	ad02      	add	r5, sp, #8
 80045c2:	1c1a      	adds	r2, r3, #0
 80045c4:	3018      	adds	r0, #24
 80045c6:	1c2b      	adds	r3, r5, #0
 80045c8:	311f      	adds	r1, #31
 80045ca:	f7ff ff7b 	bl	80044c4 <u8x8_get_glyph_data.isra.0>
  u8x8_DrawTile(u8x8, x, y, 1, buf);
 80045ce:	9500      	str	r5, [sp, #0]
 80045d0:	1c20      	adds	r0, r4, #0
 80045d2:	1c39      	adds	r1, r7, #0
 80045d4:	1c32      	adds	r2, r6, #0
 80045d6:	2301      	movs	r3, #1
 80045d8:	f7fc ff48 	bl	800146c <u8x8_DrawTile>
}
 80045dc:	b005      	add	sp, #20
 80045de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045e0 <u8x8_draw_string>:



static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	4657      	mov	r7, sl
 80045e4:	464e      	mov	r6, r9
 80045e6:	4645      	mov	r5, r8
 80045e8:	4692      	mov	sl, r2
 80045ea:	1c1c      	adds	r4, r3, #0
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80045ec:	2200      	movs	r2, #0
 80045ee:	2323      	movs	r3, #35	; 0x23



static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80045f0:	b4e0      	push	{r5, r6, r7}
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80045f2:	54c2      	strb	r2, [r0, r3]
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <u8x8_draw_string+0x60>)



static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80045f6:	1c05      	adds	r5, r0, #0
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 80045f8:	4698      	mov	r8, r3
      break;
    s++;
    if ( e != 0x0fffe )
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <u8x8_draw_string+0x64>)



static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80045fc:	1c0e      	adds	r6, r1, #0
  uint16_t e;
  uint8_t cnt = 0;
 80045fe:	2700      	movs	r7, #0
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
 8004600:	4699      	mov	r9, r3
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004602:	7821      	ldrb	r1, [r4, #0]
 8004604:	1c28      	adds	r0, r5, #0
 8004606:	686b      	ldr	r3, [r5, #4]
 8004608:	4798      	blx	r3
    if ( e == 0x0ffff )
 800460a:	4540      	cmp	r0, r8
 800460c:	d012      	beq.n	8004634 <u8x8_draw_string+0x54>
      break;
    s++;
 800460e:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 8004610:	4548      	cmp	r0, r9
 8004612:	d0f6      	beq.n	8004602 <u8x8_draw_string+0x22>
    {
      u8x8_DrawGlyph(u8x8, x, y, e);
 8004614:	b2c3      	uxtb	r3, r0
 8004616:	1c31      	adds	r1, r6, #0
 8004618:	1c28      	adds	r0, r5, #0
 800461a:	4652      	mov	r2, sl
 800461c:	f7ff ffca 	bl	80045b4 <u8x8_DrawGlyph>
      x++;
 8004620:	3601      	adds	r6, #1
      cnt++;
 8004622:	3701      	adds	r7, #1
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004624:	7821      	ldrb	r1, [r4, #0]
 8004626:	1c28      	adds	r0, r5, #0
 8004628:	686b      	ldr	r3, [r5, #4]
      break;
    s++;
    if ( e != 0x0fffe )
    {
      u8x8_DrawGlyph(u8x8, x, y, e);
      x++;
 800462a:	b2f6      	uxtb	r6, r6
      cnt++;
 800462c:	b2ff      	uxtb	r7, r7
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 800462e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8004630:	4540      	cmp	r0, r8
 8004632:	d1ec      	bne.n	800460e <u8x8_draw_string+0x2e>
      x++;
      cnt++;
    }
  }
  return cnt;
}
 8004634:	1c38      	adds	r0, r7, #0
 8004636:	bc1c      	pop	{r2, r3, r4}
 8004638:	4690      	mov	r8, r2
 800463a:	4699      	mov	r9, r3
 800463c:	46a2      	mov	sl, r4
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004640:	0000ffff 	.word	0x0000ffff
 8004644:	0000fffe 	.word	0x0000fffe

08004648 <u8x8_upscale_byte>:
		z = x | (y << 1);
*/
uint16_t u8x8_upscale_byte(uint8_t x) 
{
	uint16_t y = x;
	y |= (y << 4);		// x = (x | (x << S[2])) & B[2];
 8004648:	0103      	lsls	r3, r0, #4
 800464a:	4318      	orrs	r0, r3
	y &= 0x0f0f;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <u8x8_upscale_byte+0x20>)
 800464e:	4018      	ands	r0, r3
	y |= (y << 2);		// x = (x | (x << S[1])) & B[1];
 8004650:	0083      	lsls	r3, r0, #2
 8004652:	4318      	orrs	r0, r3
	y &= 0x3333;
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <u8x8_upscale_byte+0x24>)
 8004656:	4018      	ands	r0, r3
	y |= (y << 1);		// x = (x | (x << S[0])) & B[0];
 8004658:	0043      	lsls	r3, r0, #1
 800465a:	4318      	orrs	r0, r3
	y &= 0x5555;
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <u8x8_upscale_byte+0x28>)
 800465e:	4018      	ands	r0, r3
  
	y |= (y << 1);		// z = x | (y << 1);
 8004660:	0043      	lsls	r3, r0, #1
	return y;
 8004662:	4318      	orrs	r0, r3
}
 8004664:	4770      	bx	lr
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	00000f0f 	.word	0x00000f0f
 800466c:	00003333 	.word	0x00003333
 8004670:	00005555 	.word	0x00005555

08004674 <u8x8_Draw2x2Glyph>:
    i--;
  } while( i > 0 );
}

void u8x8_Draw2x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
 8004674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004676:	464e      	mov	r6, r9
 8004678:	4681      	mov	r9, r0
 800467a:	4657      	mov	r7, sl
 800467c:	4645      	mov	r5, r8
 800467e:	468a      	mov	sl, r1
 8004680:	4649      	mov	r1, r9
 8004682:	b4e0      	push	{r5, r6, r7}
 8004684:	b088      	sub	sp, #32
  uint8_t i;
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
 8004686:	ad02      	add	r5, sp, #8
    i--;
  } while( i > 0 );
}

void u8x8_Draw2x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
 8004688:	4690      	mov	r8, r2
 800468a:	3018      	adds	r0, #24
  uint8_t i;
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
 800468c:	1c1a      	adds	r2, r3, #0
 800468e:	311f      	adds	r1, #31
 8004690:	1c2b      	adds	r3, r5, #0
 8004692:	f7ff ff17 	bl	80044c4 <u8x8_get_glyph_data.isra.0>
 8004696:	2400      	movs	r4, #0
 8004698:	ae04      	add	r6, sp, #16
 800469a:	af06      	add	r7, sp, #24
  for( i = 0; i < 8; i ++ )
  {
      t = u8x8_upscale_byte(buf[i]);
 800469c:	5d28      	ldrb	r0, [r5, r4]
 800469e:	f7ff ffd3 	bl	8004648 <u8x8_upscale_byte>
      buf1[i] = t >> 8;
 80046a2:	0a03      	lsrs	r3, r0, #8
 80046a4:	5533      	strb	r3, [r6, r4]
      buf2[i] = t & 255;
 80046a6:	5538      	strb	r0, [r7, r4]
 80046a8:	3401      	adds	r4, #1
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
  for( i = 0; i < 8; i ++ )
 80046aa:	2c08      	cmp	r4, #8
 80046ac:	d1f6      	bne.n	800469c <u8x8_Draw2x2Glyph+0x28>
  {
      t = u8x8_upscale_byte(buf[i]);
      buf1[i] = t >> 8;
      buf2[i] = t & 255;
  }
  u8x8_upscale_buf(buf2, buf);
 80046ae:	1c38      	adds	r0, r7, #0
 80046b0:	1c29      	adds	r1, r5, #0
 80046b2:	f7ff fef3 	bl	800449c <u8x8_upscale_buf>
  u8x8_DrawTile(u8x8, x, y, 1, buf);
 80046b6:	4642      	mov	r2, r8
 80046b8:	4651      	mov	r1, sl
 80046ba:	2301      	movs	r3, #1
 80046bc:	9500      	str	r5, [sp, #0]
 80046be:	4648      	mov	r0, r9
 80046c0:	f7fc fed4 	bl	800146c <u8x8_DrawTile>
  
  u8x8_upscale_buf(buf2+4, buf);
 80046c4:	a807      	add	r0, sp, #28
 80046c6:	1c29      	adds	r1, r5, #0
 80046c8:	f7ff fee8 	bl	800449c <u8x8_upscale_buf>
  u8x8_DrawTile(u8x8, x+1, y, 1, buf);
 80046cc:	4653      	mov	r3, sl
  
  u8x8_upscale_buf(buf1, buf);
  u8x8_DrawTile(u8x8, x, y+1, 1, buf);
 80046ce:	4644      	mov	r4, r8
  }
  u8x8_upscale_buf(buf2, buf);
  u8x8_DrawTile(u8x8, x, y, 1, buf);
  
  u8x8_upscale_buf(buf2+4, buf);
  u8x8_DrawTile(u8x8, x+1, y, 1, buf);
 80046d0:	1c5f      	adds	r7, r3, #1
 80046d2:	b2ff      	uxtb	r7, r7
 80046d4:	4642      	mov	r2, r8
 80046d6:	1c39      	adds	r1, r7, #0
 80046d8:	2301      	movs	r3, #1
 80046da:	9500      	str	r5, [sp, #0]
 80046dc:	4648      	mov	r0, r9
  
  u8x8_upscale_buf(buf1, buf);
  u8x8_DrawTile(u8x8, x, y+1, 1, buf);
 80046de:	3401      	adds	r4, #1
  }
  u8x8_upscale_buf(buf2, buf);
  u8x8_DrawTile(u8x8, x, y, 1, buf);
  
  u8x8_upscale_buf(buf2+4, buf);
  u8x8_DrawTile(u8x8, x+1, y, 1, buf);
 80046e0:	f7fc fec4 	bl	800146c <u8x8_DrawTile>
  
  u8x8_upscale_buf(buf1, buf);
  u8x8_DrawTile(u8x8, x, y+1, 1, buf);
 80046e4:	b2e4      	uxtb	r4, r4
  u8x8_DrawTile(u8x8, x, y, 1, buf);
  
  u8x8_upscale_buf(buf2+4, buf);
  u8x8_DrawTile(u8x8, x+1, y, 1, buf);
  
  u8x8_upscale_buf(buf1, buf);
 80046e6:	1c30      	adds	r0, r6, #0
 80046e8:	1c29      	adds	r1, r5, #0
 80046ea:	f7ff fed7 	bl	800449c <u8x8_upscale_buf>
  u8x8_DrawTile(u8x8, x, y+1, 1, buf);
 80046ee:	1c22      	adds	r2, r4, #0
 80046f0:	4651      	mov	r1, sl
 80046f2:	2301      	movs	r3, #1
 80046f4:	9500      	str	r5, [sp, #0]
 80046f6:	4648      	mov	r0, r9
 80046f8:	f7fc feb8 	bl	800146c <u8x8_DrawTile>
  
  u8x8_upscale_buf(buf1+4, buf);
 80046fc:	a805      	add	r0, sp, #20
 80046fe:	1c29      	adds	r1, r5, #0
 8004700:	f7ff fecc 	bl	800449c <u8x8_upscale_buf>
  u8x8_DrawTile(u8x8, x+1, y+1, 1, buf);  
 8004704:	9500      	str	r5, [sp, #0]
 8004706:	4648      	mov	r0, r9
 8004708:	1c39      	adds	r1, r7, #0
 800470a:	1c22      	adds	r2, r4, #0
 800470c:	2301      	movs	r3, #1
 800470e:	f7fc fead 	bl	800146c <u8x8_DrawTile>
}
 8004712:	b008      	add	sp, #32
 8004714:	bc1c      	pop	{r2, r3, r4}
 8004716:	4690      	mov	r8, r2
 8004718:	4699      	mov	r9, r3
 800471a:	46a2      	mov	sl, r4
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)

08004720 <u8x8_draw_2x2_string>:



static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004722:	4657      	mov	r7, sl
 8004724:	464e      	mov	r6, r9
 8004726:	4645      	mov	r5, r8
 8004728:	4692      	mov	sl, r2
 800472a:	1c1c      	adds	r4, r3, #0
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800472c:	2200      	movs	r2, #0
 800472e:	2323      	movs	r3, #35	; 0x23



static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004730:	b4e0      	push	{r5, r6, r7}
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004732:	54c2      	strb	r2, [r0, r3]
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 8004734:	4b12      	ldr	r3, [pc, #72]	; (8004780 <u8x8_draw_2x2_string+0x60>)



static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004736:	1c05      	adds	r5, r0, #0
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 8004738:	4698      	mov	r8, r3
      break;
    s++;
    if ( e != 0x0fffe )
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <u8x8_draw_2x2_string+0x64>)



static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 800473c:	1c0e      	adds	r6, r1, #0
  uint16_t e;
  uint8_t cnt = 0;
 800473e:	2700      	movs	r7, #0
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
 8004740:	4699      	mov	r9, r3
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004742:	7821      	ldrb	r1, [r4, #0]
 8004744:	1c28      	adds	r0, r5, #0
 8004746:	686b      	ldr	r3, [r5, #4]
 8004748:	4798      	blx	r3
    if ( e == 0x0ffff )
 800474a:	4540      	cmp	r0, r8
 800474c:	d012      	beq.n	8004774 <u8x8_draw_2x2_string+0x54>
      break;
    s++;
 800474e:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 8004750:	4548      	cmp	r0, r9
 8004752:	d0f6      	beq.n	8004742 <u8x8_draw_2x2_string+0x22>
    {
      u8x8_Draw2x2Glyph(u8x8, x, y, e);
 8004754:	b2c3      	uxtb	r3, r0
 8004756:	1c31      	adds	r1, r6, #0
 8004758:	1c28      	adds	r0, r5, #0
 800475a:	4652      	mov	r2, sl
 800475c:	f7ff ff8a 	bl	8004674 <u8x8_Draw2x2Glyph>
      x+=2;
 8004760:	3602      	adds	r6, #2
      cnt++;
 8004762:	3701      	adds	r7, #1
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004764:	7821      	ldrb	r1, [r4, #0]
 8004766:	1c28      	adds	r0, r5, #0
 8004768:	686b      	ldr	r3, [r5, #4]
      break;
    s++;
    if ( e != 0x0fffe )
    {
      u8x8_Draw2x2Glyph(u8x8, x, y, e);
      x+=2;
 800476a:	b2f6      	uxtb	r6, r6
      cnt++;
 800476c:	b2ff      	uxtb	r7, r7
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 800476e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8004770:	4540      	cmp	r0, r8
 8004772:	d1ec      	bne.n	800474e <u8x8_draw_2x2_string+0x2e>
      x+=2;
      cnt++;
    }
  }
  return cnt;
}
 8004774:	1c38      	adds	r0, r7, #0
 8004776:	bc1c      	pop	{r2, r3, r4}
 8004778:	4690      	mov	r8, r2
 800477a:	4699      	mov	r9, r3
 800477c:	46a2      	mov	sl, r4
 800477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004780:	0000ffff 	.word	0x0000ffff
 8004784:	0000fffe 	.word	0x0000fffe

08004788 <u8x8_Draw1x2Glyph>:
  u8x8_DrawTile(u8x8, x+1, y+1, 1, buf);  
}

/* https://github.com/olikraus/u8g2/issues/474 */
void u8x8_Draw1x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
 8004788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478a:	464e      	mov	r6, r9
 800478c:	4681      	mov	r9, r0
 800478e:	4657      	mov	r7, sl
 8004790:	4645      	mov	r5, r8
 8004792:	468a      	mov	sl, r1
 8004794:	4649      	mov	r1, r9
 8004796:	b4e0      	push	{r5, r6, r7}
 8004798:	b088      	sub	sp, #32
  uint8_t i;
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
 800479a:	af02      	add	r7, sp, #8
  u8x8_DrawTile(u8x8, x+1, y+1, 1, buf);  
}

/* https://github.com/olikraus/u8g2/issues/474 */
void u8x8_Draw1x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
 800479c:	4690      	mov	r8, r2
 800479e:	3018      	adds	r0, #24
  uint8_t i;
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
 80047a0:	1c1a      	adds	r2, r3, #0
 80047a2:	311f      	adds	r1, #31
 80047a4:	1c3b      	adds	r3, r7, #0
 80047a6:	f7ff fe8d 	bl	80044c4 <u8x8_get_glyph_data.isra.0>
 80047aa:	2400      	movs	r4, #0
 80047ac:	ad04      	add	r5, sp, #16
 80047ae:	ae06      	add	r6, sp, #24
  for( i = 0; i < 8; i ++ )
  {
      t = u8x8_upscale_byte(buf[i]);
 80047b0:	5d38      	ldrb	r0, [r7, r4]
 80047b2:	f7ff ff49 	bl	8004648 <u8x8_upscale_byte>
      buf1[i] = t >> 8;
 80047b6:	0a03      	lsrs	r3, r0, #8
 80047b8:	552b      	strb	r3, [r5, r4]
      buf2[i] = t & 255;
 80047ba:	5530      	strb	r0, [r6, r4]
 80047bc:	3401      	adds	r4, #1
  uint16_t t;
  uint8_t buf[8];
  uint8_t buf1[8];
  uint8_t buf2[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
  for( i = 0; i < 8; i ++ )
 80047be:	2c08      	cmp	r4, #8
 80047c0:	d1f6      	bne.n	80047b0 <u8x8_Draw1x2Glyph+0x28>
  {
      t = u8x8_upscale_byte(buf[i]);
      buf1[i] = t >> 8;
      buf2[i] = t & 255;
  }
  u8x8_DrawTile(u8x8, x,   y, 1, buf2);
 80047c2:	4651      	mov	r1, sl
 80047c4:	4642      	mov	r2, r8
 80047c6:	9600      	str	r6, [sp, #0]
 80047c8:	4648      	mov	r0, r9
 80047ca:	2301      	movs	r3, #1
 80047cc:	f7fc fe4e 	bl	800146c <u8x8_DrawTile>
  u8x8_DrawTile(u8x8, x, y+1, 1, buf1);
 80047d0:	4642      	mov	r2, r8
 80047d2:	3201      	adds	r2, #1
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	9500      	str	r5, [sp, #0]
 80047d8:	4648      	mov	r0, r9
 80047da:	4651      	mov	r1, sl
 80047dc:	2301      	movs	r3, #1
 80047de:	f7fc fe45 	bl	800146c <u8x8_DrawTile>
}
 80047e2:	b008      	add	sp, #32
 80047e4:	bc1c      	pop	{r2, r3, r4}
 80047e6:	4690      	mov	r8, r2
 80047e8:	4699      	mov	r9, r3
 80047ea:	46a2      	mov	sl, r4
 80047ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)

080047f0 <u8x8_draw_1x2_string>:



static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	4657      	mov	r7, sl
 80047f4:	464e      	mov	r6, r9
 80047f6:	4645      	mov	r5, r8
 80047f8:	4692      	mov	sl, r2
 80047fa:	1c1c      	adds	r4, r3, #0
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80047fc:	2200      	movs	r2, #0
 80047fe:	2323      	movs	r3, #35	; 0x23



static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004800:	b4e0      	push	{r5, r6, r7}
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004802:	54c2      	strb	r2, [r0, r3]
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <u8x8_draw_1x2_string+0x60>)



static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004806:	1c05      	adds	r5, r0, #0
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
 8004808:	4698      	mov	r8, r3
      break;
    s++;
    if ( e != 0x0fffe )
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <u8x8_draw_1x2_string+0x64>)



static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 800480c:	1c0e      	adds	r6, r1, #0
  uint16_t e;
  uint8_t cnt = 0;
 800480e:	2700      	movs	r7, #0
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
 8004810:	4699      	mov	r9, r3
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004812:	7821      	ldrb	r1, [r4, #0]
 8004814:	1c28      	adds	r0, r5, #0
 8004816:	686b      	ldr	r3, [r5, #4]
 8004818:	4798      	blx	r3
    if ( e == 0x0ffff )
 800481a:	4540      	cmp	r0, r8
 800481c:	d012      	beq.n	8004844 <u8x8_draw_1x2_string+0x54>
      break;
    s++;
 800481e:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 8004820:	4548      	cmp	r0, r9
 8004822:	d0f6      	beq.n	8004812 <u8x8_draw_1x2_string+0x22>
    {
      u8x8_Draw1x2Glyph(u8x8, x, y, e);
 8004824:	b2c3      	uxtb	r3, r0
 8004826:	1c31      	adds	r1, r6, #0
 8004828:	1c28      	adds	r0, r5, #0
 800482a:	4652      	mov	r2, sl
 800482c:	f7ff ffac 	bl	8004788 <u8x8_Draw1x2Glyph>
      x++;
 8004830:	3601      	adds	r6, #1
      cnt++;
 8004832:	3701      	adds	r7, #1
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 8004834:	7821      	ldrb	r1, [r4, #0]
 8004836:	1c28      	adds	r0, r5, #0
 8004838:	686b      	ldr	r3, [r5, #4]
      break;
    s++;
    if ( e != 0x0fffe )
    {
      u8x8_Draw1x2Glyph(u8x8, x, y, e);
      x++;
 800483a:	b2f6      	uxtb	r6, r6
      cnt++;
 800483c:	b2ff      	uxtb	r7, r7
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
 800483e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8004840:	4540      	cmp	r0, r8
 8004842:	d1ec      	bne.n	800481e <u8x8_draw_1x2_string+0x2e>
      x++;
      cnt++;
    }
  }
  return cnt;
}
 8004844:	1c38      	adds	r0, r7, #0
 8004846:	bc1c      	pop	{r2, r3, r4}
 8004848:	4690      	mov	r8, r2
 800484a:	4699      	mov	r9, r3
 800484c:	46a2      	mov	sl, r4
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	0000ffff 	.word	0x0000ffff
 8004854:	0000fffe 	.word	0x0000fffe

08004858 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004858:	2200      	movs	r2, #0
 800485a:	2323      	movs	r3, #35	; 0x23
 800485c:	54c2      	strb	r2, [r0, r3]
}
 800485e:	4770      	bx	lr

08004860 <u8x8_DrawString>:
  return cnt;
}


uint8_t u8x8_DrawString(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004860:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_ascii_next;
 8004862:	4c02      	ldr	r4, [pc, #8]	; (800486c <u8x8_DrawString+0xc>)
 8004864:	6044      	str	r4, [r0, #4]
  return u8x8_draw_string(u8x8, x, y, s);
 8004866:	f7ff febb 	bl	80045e0 <u8x8_draw_string>
}
 800486a:	bd10      	pop	{r4, pc}
 800486c:	080044b1 	.word	0x080044b1

08004870 <u8x8_DrawUTF8>:

uint8_t u8x8_DrawUTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004870:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_utf8_next;
 8004872:	4c02      	ldr	r4, [pc, #8]	; (800487c <u8x8_DrawUTF8+0xc>)
 8004874:	6044      	str	r4, [r0, #4]
  return u8x8_draw_string(u8x8, x, y, s);
 8004876:	f7ff feb3 	bl	80045e0 <u8x8_draw_string>
}
 800487a:	bd10      	pop	{r4, pc}
 800487c:	08004525 	.word	0x08004525

08004880 <u8x8_Draw2x2String>:
  return cnt;
}


uint8_t u8x8_Draw2x2String(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004880:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_ascii_next;
 8004882:	4c02      	ldr	r4, [pc, #8]	; (800488c <u8x8_Draw2x2String+0xc>)
 8004884:	6044      	str	r4, [r0, #4]
  return u8x8_draw_2x2_string(u8x8, x, y, s);
 8004886:	f7ff ff4b 	bl	8004720 <u8x8_draw_2x2_string>
}
 800488a:	bd10      	pop	{r4, pc}
 800488c:	080044b1 	.word	0x080044b1

08004890 <u8x8_Draw2x2UTF8>:

uint8_t u8x8_Draw2x2UTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 8004890:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_utf8_next;
 8004892:	4c02      	ldr	r4, [pc, #8]	; (800489c <u8x8_Draw2x2UTF8+0xc>)
 8004894:	6044      	str	r4, [r0, #4]
  return u8x8_draw_2x2_string(u8x8, x, y, s);
 8004896:	f7ff ff43 	bl	8004720 <u8x8_draw_2x2_string>
}
 800489a:	bd10      	pop	{r4, pc}
 800489c:	08004525 	.word	0x08004525

080048a0 <u8x8_Draw1x2String>:
  return cnt;
}


uint8_t u8x8_Draw1x2String(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80048a0:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_ascii_next;
 80048a2:	4c02      	ldr	r4, [pc, #8]	; (80048ac <u8x8_Draw1x2String+0xc>)
 80048a4:	6044      	str	r4, [r0, #4]
  return u8x8_draw_1x2_string(u8x8, x, y, s);
 80048a6:	f7ff ffa3 	bl	80047f0 <u8x8_draw_1x2_string>
}
 80048aa:	bd10      	pop	{r4, pc}
 80048ac:	080044b1 	.word	0x080044b1

080048b0 <u8x8_Draw1x2UTF8>:

uint8_t u8x8_Draw1x2UTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
 80048b0:	b510      	push	{r4, lr}
  u8x8->next_cb = u8x8_utf8_next;
 80048b2:	4c02      	ldr	r4, [pc, #8]	; (80048bc <u8x8_Draw1x2UTF8+0xc>)
 80048b4:	6044      	str	r4, [r0, #4]
  return u8x8_draw_1x2_string(u8x8, x, y, s);
 80048b6:	f7ff ff9b 	bl	80047f0 <u8x8_draw_1x2_string>
}
 80048ba:	bd10      	pop	{r4, pc}
 80048bc:	08004525 	.word	0x08004525

080048c0 <u8x8_GetUTF8Len>:



uint8_t u8x8_GetUTF8Len(u8x8_t *u8x8, const char *s)
{
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80048c2:	2323      	movs	r3, #35	; 0x23
}



uint8_t u8x8_GetUTF8Len(u8x8_t *u8x8, const char *s)
{
 80048c4:	4647      	mov	r7, r8
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80048c6:	2200      	movs	r2, #0
}



uint8_t u8x8_GetUTF8Len(u8x8_t *u8x8, const char *s)
{
 80048c8:	b480      	push	{r7}
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80048ca:	54c2      	strb	r2, [r0, r3]
  {
    e = u8x8_utf8_next(u8x8, *s);
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <u8x8_GetUTF8Len+0x44>)
}



uint8_t u8x8_GetUTF8Len(u8x8_t *u8x8, const char *s)
{
 80048ce:	1c06      	adds	r6, r0, #0
 80048d0:	1c0c      	adds	r4, r1, #0
  uint16_t e;
  uint8_t cnt = 0;
 80048d2:	2500      	movs	r5, #0
  {
    e = u8x8_utf8_next(u8x8, *s);
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
 80048d4:	4698      	mov	r8, r3
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8_utf8_next(u8x8, *s);
    if ( e == 0x0ffff )
 80048d6:	4f0c      	ldr	r7, [pc, #48]	; (8004908 <u8x8_GetUTF8Len+0x48>)
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8_utf8_next(u8x8, *s);
 80048d8:	7821      	ldrb	r1, [r4, #0]
 80048da:	1c30      	adds	r0, r6, #0
 80048dc:	f7ff fe22 	bl	8004524 <u8x8_utf8_next>
    if ( e == 0x0ffff )
 80048e0:	42b8      	cmp	r0, r7
 80048e2:	d00a      	beq.n	80048fa <u8x8_GetUTF8Len+0x3a>
      break;
    s++;
 80048e4:	3401      	adds	r4, #1
    if ( e != 0x0fffe )
 80048e6:	4540      	cmp	r0, r8
 80048e8:	d0f6      	beq.n	80048d8 <u8x8_GetUTF8Len+0x18>
      cnt++;
 80048ea:	3501      	adds	r5, #1
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8_utf8_next(u8x8, *s);
 80048ec:	7821      	ldrb	r1, [r4, #0]
 80048ee:	1c30      	adds	r0, r6, #0
    if ( e == 0x0ffff )
      break;
    s++;
    if ( e != 0x0fffe )
      cnt++;
 80048f0:	b2ed      	uxtb	r5, r5
  uint16_t e;
  uint8_t cnt = 0;
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8_utf8_next(u8x8, *s);
 80048f2:	f7ff fe17 	bl	8004524 <u8x8_utf8_next>
    if ( e == 0x0ffff )
 80048f6:	42b8      	cmp	r0, r7
 80048f8:	d1f4      	bne.n	80048e4 <u8x8_GetUTF8Len+0x24>
    s++;
    if ( e != 0x0fffe )
      cnt++;
  }
  return cnt;
}
 80048fa:	1c28      	adds	r0, r5, #0
 80048fc:	bc04      	pop	{r2}
 80048fe:	4690      	mov	r8, r2
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	0000fffe 	.word	0x0000fffe
 8004908:	0000ffff 	.word	0x0000ffff

0800490c <u8g2_GetKerning>:
}
*/

/* this function is used as "u8g2_get_kerning_cb" */
uint8_t u8g2_GetKerning(U8X8_UNUSED u8g2_t *u8g2, u8g2_kerning_t *kerning, uint16_t e1, uint16_t e2)
{
 800490c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i1, i2, cnt, end;
  if ( kerning == NULL )
 800490e:	2900      	cmp	r1, #0
 8004910:	d016      	beq.n	8004940 <u8g2_GetKerning+0x34>
    return 0;
  
  /* search for the encoding in the first table */
  cnt = kerning->first_table_cnt;
 8004912:	880f      	ldrh	r7, [r1, #0]
  cnt--;	/* ignore the last element of the table, which is 0x0ffff */
 8004914:	3f01      	subs	r7, #1
 8004916:	b2bf      	uxth	r7, r7
  for( i1 = 0; i1 < cnt; i1++ )
 8004918:	2f00      	cmp	r7, #0
 800491a:	d011      	beq.n	8004940 <u8g2_GetKerning+0x34>
  {
    if ( kerning->first_encoding_table[i1] == e1 )
 800491c:	6848      	ldr	r0, [r1, #4]
 800491e:	4684      	mov	ip, r0
 8004920:	8800      	ldrh	r0, [r0, #0]
 8004922:	4290      	cmp	r0, r2
 8004924:	d026      	beq.n	8004974 <u8g2_GetKerning+0x68>
 8004926:	2402      	movs	r4, #2
 8004928:	2001      	movs	r0, #1
 800492a:	e006      	b.n	800493a <u8g2_GetKerning+0x2e>
 800492c:	4665      	mov	r5, ip
 800492e:	5b2d      	ldrh	r5, [r5, r4]
 8004930:	3001      	adds	r0, #1
 8004932:	1ca6      	adds	r6, r4, #2
 8004934:	4295      	cmp	r5, r2
 8004936:	d005      	beq.n	8004944 <u8g2_GetKerning+0x38>
 8004938:	1c34      	adds	r4, r6, #0
    return 0;
  
  /* search for the encoding in the first table */
  cnt = kerning->first_table_cnt;
  cnt--;	/* ignore the last element of the table, which is 0x0ffff */
  for( i1 = 0; i1 < cnt; i1++ )
 800493a:	b285      	uxth	r5, r0
 800493c:	42bd      	cmp	r5, r7
 800493e:	d3f5      	bcc.n	800492c <u8g2_GetKerning+0x20>
/* this function is used as "u8g2_get_kerning_cb" */
uint8_t u8g2_GetKerning(U8X8_UNUSED u8g2_t *u8g2, u8g2_kerning_t *kerning, uint16_t e1, uint16_t e2)
{
  uint16_t i1, i2, cnt, end;
  if ( kerning == NULL )
    return 0;
 8004940:	2000      	movs	r0, #0
  
  if ( i2 >= end )
    return 0;	/* e2 not part of any pair with e1, return 0 */
  
  return kerning->kerning_values[i2];
}
 8004942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004944:	0040      	lsls	r0, r0, #1
  }
  if ( i1 >= cnt )
    return 0;	/* e1 not part of the kerning table, return 0 */

  /* get the upper index for i2 */
  end = kerning->index_to_second_table[i1+1];
 8004946:	688a      	ldr	r2, [r1, #8]
 8004948:	5a15      	ldrh	r5, [r2, r0]
  for( i2 = kerning->index_to_second_table[i1]; i2 < end; i2++ )
 800494a:	5b12      	ldrh	r2, [r2, r4]
 800494c:	4295      	cmp	r5, r2
 800494e:	d9f7      	bls.n	8004940 <u8g2_GetKerning+0x34>
  {
    if ( kerning->second_encoding_table[i2] == e2 )
 8004950:	68cc      	ldr	r4, [r1, #12]
 8004952:	0050      	lsls	r0, r2, #1
 8004954:	5b00      	ldrh	r0, [r0, r4]
 8004956:	4298      	cmp	r0, r3
 8004958:	d104      	bne.n	8004964 <u8g2_GetKerning+0x58>
 800495a:	e008      	b.n	800496e <u8g2_GetKerning+0x62>
 800495c:	0050      	lsls	r0, r2, #1
 800495e:	5b00      	ldrh	r0, [r0, r4]
 8004960:	4298      	cmp	r0, r3
 8004962:	d004      	beq.n	800496e <u8g2_GetKerning+0x62>
  if ( i1 >= cnt )
    return 0;	/* e1 not part of the kerning table, return 0 */

  /* get the upper index for i2 */
  end = kerning->index_to_second_table[i1+1];
  for( i2 = kerning->index_to_second_table[i1]; i2 < end; i2++ )
 8004964:	3201      	adds	r2, #1
 8004966:	b292      	uxth	r2, r2
 8004968:	4295      	cmp	r5, r2
 800496a:	d8f7      	bhi.n	800495c <u8g2_GetKerning+0x50>
 800496c:	e7e8      	b.n	8004940 <u8g2_GetKerning+0x34>
  }
  
  if ( i2 >= end )
    return 0;	/* e2 not part of any pair with e1, return 0 */
  
  return kerning->kerning_values[i2];
 800496e:	690b      	ldr	r3, [r1, #16]
 8004970:	5c98      	ldrb	r0, [r3, r2]
 8004972:	e7e6      	b.n	8004942 <u8g2_GetKerning+0x36>
  /* search for the encoding in the first table */
  cnt = kerning->first_table_cnt;
  cnt--;	/* ignore the last element of the table, which is 0x0ffff */
  for( i1 = 0; i1 < cnt; i1++ )
  {
    if ( kerning->first_encoding_table[i1] == e1 )
 8004974:	2400      	movs	r4, #0
 8004976:	2002      	movs	r0, #2
 8004978:	e7e5      	b.n	8004946 <u8g2_GetKerning+0x3a>
 800497a:	46c0      	nop			; (mov r8, r8)

0800497c <u8g2_GetKerningByTable>:
  
  return kerning->kerning_values[i2];
}

uint8_t u8g2_GetKerningByTable(U8X8_UNUSED u8g2_t *u8g2, const uint16_t *kt, uint16_t e1, uint16_t e2)
{
 800497c:	b570      	push	{r4, r5, r6, lr}
  uint16_t i;
  i = 0;
  if ( kt == NULL )
 800497e:	2900      	cmp	r1, #0
 8004980:	d018      	beq.n	80049b4 <u8g2_GetKerningByTable+0x38>
    return 0;
  for(;;)
  {
    if ( kt[i] == 0x0ffff )
 8004982:	880c      	ldrh	r4, [r1, #0]
 8004984:	4e0c      	ldr	r6, [pc, #48]	; (80049b8 <u8g2_GetKerningByTable+0x3c>)
 8004986:	42b4      	cmp	r4, r6
 8004988:	d014      	beq.n	80049b4 <u8g2_GetKerningByTable+0x38>
 800498a:	2500      	movs	r5, #0
 800498c:	2000      	movs	r0, #0
 800498e:	e006      	b.n	800499e <u8g2_GetKerningByTable+0x22>
      break;
    if ( kt[i] == e1 && kt[i+1] == e2 )
      return kt[i+2];
    i+=3;
 8004990:	3003      	adds	r0, #3
 8004992:	b280      	uxth	r0, r0
  i = 0;
  if ( kt == NULL )
    return 0;
  for(;;)
  {
    if ( kt[i] == 0x0ffff )
 8004994:	0044      	lsls	r4, r0, #1
 8004996:	5a64      	ldrh	r4, [r4, r1]
 8004998:	1c05      	adds	r5, r0, #0
 800499a:	42b4      	cmp	r4, r6
 800499c:	d00a      	beq.n	80049b4 <u8g2_GetKerningByTable+0x38>
      break;
    if ( kt[i] == e1 && kt[i+1] == e2 )
 800499e:	4294      	cmp	r4, r2
 80049a0:	d1f6      	bne.n	8004990 <u8g2_GetKerningByTable+0x14>
 80049a2:	1c6c      	adds	r4, r5, #1
 80049a4:	0064      	lsls	r4, r4, #1
 80049a6:	5a64      	ldrh	r4, [r4, r1]
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d1f1      	bne.n	8004990 <u8g2_GetKerningByTable+0x14>
      return kt[i+2];
 80049ac:	3502      	adds	r5, #2
 80049ae:	006d      	lsls	r5, r5, #1
 80049b0:	5d48      	ldrb	r0, [r1, r5]
 80049b2:	e000      	b.n	80049b6 <u8g2_GetKerningByTable+0x3a>
uint8_t u8g2_GetKerningByTable(U8X8_UNUSED u8g2_t *u8g2, const uint16_t *kt, uint16_t e1, uint16_t e2)
{
  uint16_t i;
  i = 0;
  if ( kt == NULL )
    return 0;
 80049b4:	2000      	movs	r0, #0
    if ( kt[i] == e1 && kt[i+1] == e2 )
      return kt[i+2];
    i+=3;
  }
  return 0;
}
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	0000ffff 	.word	0x0000ffff

080049bc <__aeabi_uidiv>:
 80049bc:	2200      	movs	r2, #0
 80049be:	0843      	lsrs	r3, r0, #1
 80049c0:	428b      	cmp	r3, r1
 80049c2:	d374      	bcc.n	8004aae <__aeabi_uidiv+0xf2>
 80049c4:	0903      	lsrs	r3, r0, #4
 80049c6:	428b      	cmp	r3, r1
 80049c8:	d35f      	bcc.n	8004a8a <__aeabi_uidiv+0xce>
 80049ca:	0a03      	lsrs	r3, r0, #8
 80049cc:	428b      	cmp	r3, r1
 80049ce:	d344      	bcc.n	8004a5a <__aeabi_uidiv+0x9e>
 80049d0:	0b03      	lsrs	r3, r0, #12
 80049d2:	428b      	cmp	r3, r1
 80049d4:	d328      	bcc.n	8004a28 <__aeabi_uidiv+0x6c>
 80049d6:	0c03      	lsrs	r3, r0, #16
 80049d8:	428b      	cmp	r3, r1
 80049da:	d30d      	bcc.n	80049f8 <__aeabi_uidiv+0x3c>
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	0209      	lsls	r1, r1, #8
 80049e0:	ba12      	rev	r2, r2
 80049e2:	0c03      	lsrs	r3, r0, #16
 80049e4:	428b      	cmp	r3, r1
 80049e6:	d302      	bcc.n	80049ee <__aeabi_uidiv+0x32>
 80049e8:	1212      	asrs	r2, r2, #8
 80049ea:	0209      	lsls	r1, r1, #8
 80049ec:	d065      	beq.n	8004aba <__aeabi_uidiv+0xfe>
 80049ee:	0b03      	lsrs	r3, r0, #12
 80049f0:	428b      	cmp	r3, r1
 80049f2:	d319      	bcc.n	8004a28 <__aeabi_uidiv+0x6c>
 80049f4:	e000      	b.n	80049f8 <__aeabi_uidiv+0x3c>
 80049f6:	0a09      	lsrs	r1, r1, #8
 80049f8:	0bc3      	lsrs	r3, r0, #15
 80049fa:	428b      	cmp	r3, r1
 80049fc:	d301      	bcc.n	8004a02 <__aeabi_uidiv+0x46>
 80049fe:	03cb      	lsls	r3, r1, #15
 8004a00:	1ac0      	subs	r0, r0, r3
 8004a02:	4152      	adcs	r2, r2
 8004a04:	0b83      	lsrs	r3, r0, #14
 8004a06:	428b      	cmp	r3, r1
 8004a08:	d301      	bcc.n	8004a0e <__aeabi_uidiv+0x52>
 8004a0a:	038b      	lsls	r3, r1, #14
 8004a0c:	1ac0      	subs	r0, r0, r3
 8004a0e:	4152      	adcs	r2, r2
 8004a10:	0b43      	lsrs	r3, r0, #13
 8004a12:	428b      	cmp	r3, r1
 8004a14:	d301      	bcc.n	8004a1a <__aeabi_uidiv+0x5e>
 8004a16:	034b      	lsls	r3, r1, #13
 8004a18:	1ac0      	subs	r0, r0, r3
 8004a1a:	4152      	adcs	r2, r2
 8004a1c:	0b03      	lsrs	r3, r0, #12
 8004a1e:	428b      	cmp	r3, r1
 8004a20:	d301      	bcc.n	8004a26 <__aeabi_uidiv+0x6a>
 8004a22:	030b      	lsls	r3, r1, #12
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	4152      	adcs	r2, r2
 8004a28:	0ac3      	lsrs	r3, r0, #11
 8004a2a:	428b      	cmp	r3, r1
 8004a2c:	d301      	bcc.n	8004a32 <__aeabi_uidiv+0x76>
 8004a2e:	02cb      	lsls	r3, r1, #11
 8004a30:	1ac0      	subs	r0, r0, r3
 8004a32:	4152      	adcs	r2, r2
 8004a34:	0a83      	lsrs	r3, r0, #10
 8004a36:	428b      	cmp	r3, r1
 8004a38:	d301      	bcc.n	8004a3e <__aeabi_uidiv+0x82>
 8004a3a:	028b      	lsls	r3, r1, #10
 8004a3c:	1ac0      	subs	r0, r0, r3
 8004a3e:	4152      	adcs	r2, r2
 8004a40:	0a43      	lsrs	r3, r0, #9
 8004a42:	428b      	cmp	r3, r1
 8004a44:	d301      	bcc.n	8004a4a <__aeabi_uidiv+0x8e>
 8004a46:	024b      	lsls	r3, r1, #9
 8004a48:	1ac0      	subs	r0, r0, r3
 8004a4a:	4152      	adcs	r2, r2
 8004a4c:	0a03      	lsrs	r3, r0, #8
 8004a4e:	428b      	cmp	r3, r1
 8004a50:	d301      	bcc.n	8004a56 <__aeabi_uidiv+0x9a>
 8004a52:	020b      	lsls	r3, r1, #8
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	4152      	adcs	r2, r2
 8004a58:	d2cd      	bcs.n	80049f6 <__aeabi_uidiv+0x3a>
 8004a5a:	09c3      	lsrs	r3, r0, #7
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d301      	bcc.n	8004a64 <__aeabi_uidiv+0xa8>
 8004a60:	01cb      	lsls	r3, r1, #7
 8004a62:	1ac0      	subs	r0, r0, r3
 8004a64:	4152      	adcs	r2, r2
 8004a66:	0983      	lsrs	r3, r0, #6
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	d301      	bcc.n	8004a70 <__aeabi_uidiv+0xb4>
 8004a6c:	018b      	lsls	r3, r1, #6
 8004a6e:	1ac0      	subs	r0, r0, r3
 8004a70:	4152      	adcs	r2, r2
 8004a72:	0943      	lsrs	r3, r0, #5
 8004a74:	428b      	cmp	r3, r1
 8004a76:	d301      	bcc.n	8004a7c <__aeabi_uidiv+0xc0>
 8004a78:	014b      	lsls	r3, r1, #5
 8004a7a:	1ac0      	subs	r0, r0, r3
 8004a7c:	4152      	adcs	r2, r2
 8004a7e:	0903      	lsrs	r3, r0, #4
 8004a80:	428b      	cmp	r3, r1
 8004a82:	d301      	bcc.n	8004a88 <__aeabi_uidiv+0xcc>
 8004a84:	010b      	lsls	r3, r1, #4
 8004a86:	1ac0      	subs	r0, r0, r3
 8004a88:	4152      	adcs	r2, r2
 8004a8a:	08c3      	lsrs	r3, r0, #3
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	d301      	bcc.n	8004a94 <__aeabi_uidiv+0xd8>
 8004a90:	00cb      	lsls	r3, r1, #3
 8004a92:	1ac0      	subs	r0, r0, r3
 8004a94:	4152      	adcs	r2, r2
 8004a96:	0883      	lsrs	r3, r0, #2
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	d301      	bcc.n	8004aa0 <__aeabi_uidiv+0xe4>
 8004a9c:	008b      	lsls	r3, r1, #2
 8004a9e:	1ac0      	subs	r0, r0, r3
 8004aa0:	4152      	adcs	r2, r2
 8004aa2:	0843      	lsrs	r3, r0, #1
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	d301      	bcc.n	8004aac <__aeabi_uidiv+0xf0>
 8004aa8:	004b      	lsls	r3, r1, #1
 8004aaa:	1ac0      	subs	r0, r0, r3
 8004aac:	4152      	adcs	r2, r2
 8004aae:	1a41      	subs	r1, r0, r1
 8004ab0:	d200      	bcs.n	8004ab4 <__aeabi_uidiv+0xf8>
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4152      	adcs	r2, r2
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4770      	bx	lr
 8004aba:	e7ff      	b.n	8004abc <__aeabi_uidiv+0x100>
 8004abc:	b501      	push	{r0, lr}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f000 f80c 	bl	8004adc <__aeabi_idiv0>
 8004ac4:	bd02      	pop	{r1, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)

08004ac8 <__aeabi_uidivmod>:
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d0f7      	beq.n	8004abc <__aeabi_uidiv+0x100>
 8004acc:	b503      	push	{r0, r1, lr}
 8004ace:	f7ff ff75 	bl	80049bc <__aeabi_uidiv>
 8004ad2:	bc0e      	pop	{r1, r2, r3}
 8004ad4:	4342      	muls	r2, r0
 8004ad6:	1a89      	subs	r1, r1, r2
 8004ad8:	4718      	bx	r3
 8004ada:	46c0      	nop			; (mov r8, r8)

08004adc <__aeabi_idiv0>:
 8004adc:	4770      	bx	lr
 8004ade:	46c0      	nop			; (mov r8, r8)

08004ae0 <WWDG_IRQHandler>:
//}

//extern volatile uint32_t MSec;

void WWDG_IRQHandler(void) {
    GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_SET);
 8004ae0:	2180      	movs	r1, #128	; 0x80
//    return ms;
//}

//extern volatile uint32_t MSec;

void WWDG_IRQHandler(void) {
 8004ae2:	b508      	push	{r3, lr}
    GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_SET);
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <WWDG_IRQHandler+0x10>)
 8004ae6:	0109      	lsls	r1, r1, #4
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f7fb fbd7 	bl	800029c <GPIO_WriteBit>
    //GPIO_WriteBit(GPIOB, GPIO_Pin_11, (n&1) ? Bit_SET : Bit_RESET);

}
 8004aee:	bd08      	pop	{r3, pc}
 8004af0:	48000400 	.word	0x48000400

08004af4 <USART2_IRQHandler>:
void USART2_IRQHandler(void) {
}
 8004af4:	4770      	bx	lr

08004af6 <USART1_IRQHandler>:
void USART1_IRQHandler(void) {
}
 8004af6:	4770      	bx	lr

08004af8 <TS_IRQHandler>:
void TS_IRQHandler(void) {
}
 8004af8:	4770      	bx	lr
	...

08004afc <main>:
  //setup the graphic struct
  u8g2_t u8g2;

   
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 8004afc:	21fa      	movs	r1, #250	; 0xfa
//    ISO7816_DisableAllPassword(ResetI2CPassword);
//}


int main(void)
{
 8004afe:	b5f0      	push	{r4, r5, r6, r7, lr}
  //setup the graphic struct
  u8g2_t u8g2;

   
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 8004b00:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <main+0x184>)
//    ISO7816_DisableAllPassword(ResetI2CPassword);
//}


int main(void)
{
 8004b02:	b0a5      	sub	sp, #148	; 0x94
  //setup the graphic struct
  u8g2_t u8g2;

   
  //setup systick handler tick every 1ms
  SysTick_Config(SystemCoreClock/1000);
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	0089      	lsls	r1, r1, #2
 8004b08:	f7ff ff58 	bl	80049bc <__aeabi_uidiv>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8004b0c:	4a5d      	ldr	r2, [pc, #372]	; (8004c84 <main+0x188>)
 8004b0e:	3801      	subs	r0, #1
 8004b10:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8004b12:	20c0      	movs	r0, #192	; 0xc0
 8004b14:	495c      	ldr	r1, [pc, #368]	; (8004c88 <main+0x18c>)
 8004b16:	0600      	lsls	r0, r0, #24
 8004b18:	6a0b      	ldr	r3, [r1, #32]

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8004b1a:	2780      	movs	r7, #128	; 0x80
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	4303      	orrs	r3, r0
 8004b22:	620b      	str	r3, [r1, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8004b24:	2300      	movs	r3, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  int n = 0;

  // Initialize GPIO clock  
  // see stm32f0xx_rcc.h
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8004b26:	2080      	movs	r0, #128	; 0x80
 8004b28:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	3307      	adds	r3, #7
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	0280      	lsls	r0, r0, #10
 8004b30:	2101      	movs	r1, #1
 8004b32:	f7fb fdcf 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8004b36:	2080      	movs	r0, #128	; 0x80
 8004b38:	2101      	movs	r1, #1
 8004b3a:	02c0      	lsls	r0, r0, #11
 8004b3c:	f7fb fdca 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8004b40:	2080      	movs	r0, #128	; 0x80
 8004b42:	2101      	movs	r1, #1
 8004b44:	0300      	lsls	r0, r0, #12
 8004b46:	f7fb fdc5 	bl	80006d4 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8004b4a:	2080      	movs	r0, #128	; 0x80
  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004b4c:	2501      	movs	r5, #1
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004b4e:	2602      	movs	r6, #2
  //WWDG_SetWindowValue(0xff)
  
  // Initialize LED pins
  // see stm32f0xx_gpio.h

  GPIO_StructInit(&GPIO_InitStructure);
 8004b50:	ac02      	add	r4, sp, #8
  // Initialize GPIO clock  
  // see stm32f0xx_rcc.h
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 8004b52:	2101      	movs	r1, #1
 8004b54:	03c0      	lsls	r0, r0, #15
 8004b56:	f7fb fdbd 	bl	80006d4 <RCC_AHBPeriphClockCmd>


  Timer_Config(); 
 8004b5a:	f000 f8ec 	bl	8004d36 <Timer_Config>
  Interrupts_Config(); 
 8004b5e:	f000 f8bd 	bl	8004cdc <Interrupts_Config>
  //WWDG_SetWindowValue(0xff)
  
  // Initialize LED pins
  // see stm32f0xx_gpio.h

  GPIO_StructInit(&GPIO_InitStructure);
 8004b62:	1c20      	adds	r0, r4, #0
 8004b64:	f7fb fb64 	bl	8000230 <GPIO_StructInit>

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8004b68:	013f      	lsls	r7, r7, #4
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b6a:	4848      	ldr	r0, [pc, #288]	; (8004c8c <main+0x190>)
 8004b6c:	1c21      	adds	r1, r4, #0

  //RCC_APB1ENR ^= 0x400
  // Pin PC9

  //tooth 1
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8004b6e:	9702      	str	r7, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004b70:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004b72:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b74:	f7fb faf8 	bl	8000168 <GPIO_Init>

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8004b78:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b7a:	4844      	ldr	r0, [pc, #272]	; (8004c8c <main+0x190>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8004b7c:	015b      	lsls	r3, r3, #5
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b7e:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 2
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8004b80:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004b82:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004b84:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b86:	f7fb faef 	bl	8000168 <GPIO_Init>

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8004b8a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b8c:	483f      	ldr	r0, [pc, #252]	; (8004c8c <main+0x190>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8004b8e:	019b      	lsls	r3, r3, #6
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b90:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 3
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8004b92:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004b94:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004b96:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b98:	f7fb fae6 	bl	8000168 <GPIO_Init>
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8004b9c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b9e:	483b      	ldr	r0, [pc, #236]	; (8004c8c <main+0x190>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8004ba0:	01db      	lsls	r3, r3, #7
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004ba2:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 
  //tooth 4 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 8004ba4:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004ba6:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004ba8:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004baa:	f7fb fadd 	bl	8000168 <GPIO_Init>

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004bae:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bb0:	4836      	ldr	r0, [pc, #216]	; (8004c8c <main+0x190>)
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004bb2:	021b      	lsls	r3, r3, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bb4:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //tooth 5
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004bb6:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004bb8:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004bba:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bbc:	f7fb fad4 	bl	8000168 <GPIO_Init>

  //Left Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004bc0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bc2:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //Left Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004bc4:	00db      	lsls	r3, r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bc6:	05c0      	lsls	r0, r0, #23
 8004bc8:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);

  //Left Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004bca:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004bcc:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004bce:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bd0:	f7fb faca 	bl	8000168 <GPIO_Init>
  //red
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004bd4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bd6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  //red
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004bd8:	009b      	lsls	r3, r3, #2
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bda:	05c0      	lsls	r0, r0, #23
 8004bdc:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  //red
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8004bde:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004be0:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004be2:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004be4:	f7fb fac0 	bl	8000168 <GPIO_Init>
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004be8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bea:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004bec:	005b      	lsls	r3, r3, #1
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bee:	05c0      	lsls	r0, r0, #23
 8004bf0:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8004bf2:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004bf4:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004bf6:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004bf8:	f7fb fab6 	bl	8000168 <GPIO_Init>

  //Right Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004bfc:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bfe:	4823      	ldr	r0, [pc, #140]	; (8004c8c <main+0x190>)
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  //Right Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004c00:	00db      	lsls	r3, r3, #3
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c02:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  //Right Eye
  //green
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8004c04:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004c06:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004c08:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c0a:	f7fb faad 	bl	8000168 <GPIO_Init>
  //red
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8004c0e:	2308      	movs	r3, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c10:	481e      	ldr	r0, [pc, #120]	; (8004c8c <main+0x190>)
 8004c12:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  //red
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8004c14:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004c16:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004c18:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c1a:	f7fb faa5 	bl	8000168 <GPIO_Init>
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004c1e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004c20:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004c22:	021b      	lsls	r3, r3, #8
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004c24:	05c0      	lsls	r0, r0, #23
 8004c26:	1c21      	adds	r1, r4, #0
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  //blue 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8004c28:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004c2a:	7125      	strb	r5, [r4, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8004c2c:	7166      	strb	r6, [r4, #5]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004c2e:	f7fb fa9b 	bl	8000168 <GPIO_Init>

  
  GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_SET);
 8004c32:	4816      	ldr	r0, [pc, #88]	; (8004c8c <main+0x190>)
 8004c34:	1c39      	adds	r1, r7, #0
 8004c36:	1c2a      	adds	r2, r5, #0
 8004c38:	f7fb fb30 	bl	800029c <GPIO_WriteBit>

  //init the display  
  u8g2_Setup_ssd1306_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_stm32f0_hw_spi, u8x8_gpio_and_delay_ozseccon);
 8004c3c:	4914      	ldr	r1, [pc, #80]	; (8004c90 <main+0x194>)
 8004c3e:	a804      	add	r0, sp, #16
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <main+0x198>)
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <main+0x19c>)
 8004c44:	f7fc fe62 	bl	800190c <u8g2_Setup_ssd1306_128x64_noname_1>
  //u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_gpio_and_delay_lpc11u3x);  // init u8g2 structure
  u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8004c48:	a804      	add	r0, sp, #16
 8004c4a:	f7fc fc27 	bl	800149c <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8004c4e:	a804      	add	r0, sp, #16
 8004c50:	2100      	movs	r1, #0
 8004c52:	f7fc fc2b 	bl	80014ac <u8x8_SetPowerSave>
  //u8g2_SetupBitmap(&u8g2, &u8g2_cb_r0, 128, 64);
  //u8x8_SetPowerSave(u8g2_GetU8x8(&u8g2), 0);
  //u8g2_SetFont(&u8g2, u8g2_font_u8glib_4_tf);

  while(1){
    for(uint8_t i=0;i<(128-20);i++){
 8004c56:	2400      	movs	r4, #0
      u8g2_ClearBuffer(&u8g2);
 8004c58:	a804      	add	r0, sp, #16
 8004c5a:	f7fc fcd7 	bl	800160c <u8g2_ClearBuffer>
      u8g2_DrawBox(&u8g2, i,0,20,64);
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	1c21      	adds	r1, r4, #0
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	a804      	add	r0, sp, #16
 8004c66:	2200      	movs	r2, #0
 8004c68:	3b2c      	subs	r3, #44	; 0x2c
  //u8g2_SetupBitmap(&u8g2, &u8g2_cb_r0, 128, 64);
  //u8x8_SetPowerSave(u8g2_GetU8x8(&u8g2), 0);
  //u8g2_SetFont(&u8g2, u8g2_font_u8glib_4_tf);

  while(1){
    for(uint8_t i=0;i<(128-20);i++){
 8004c6a:	3401      	adds	r4, #1
      u8g2_ClearBuffer(&u8g2);
      u8g2_DrawBox(&u8g2, i,0,20,64);
 8004c6c:	f7fc fe6e 	bl	800194c <u8g2_DrawBox>
  //u8g2_SetupBitmap(&u8g2, &u8g2_cb_r0, 128, 64);
  //u8x8_SetPowerSave(u8g2_GetU8x8(&u8g2), 0);
  //u8g2_SetFont(&u8g2, u8g2_font_u8glib_4_tf);

  while(1){
    for(uint8_t i=0;i<(128-20);i++){
 8004c70:	b2e4      	uxtb	r4, r4
      u8g2_ClearBuffer(&u8g2);
      u8g2_DrawBox(&u8g2, i,0,20,64);
      u8g2_SendBuffer(&u8g2);
 8004c72:	a804      	add	r0, sp, #16
 8004c74:	f7fc fcd6 	bl	8001624 <u8g2_SendBuffer>
  //u8g2_SetupBitmap(&u8g2, &u8g2_cb_r0, 128, 64);
  //u8x8_SetPowerSave(u8g2_GetU8x8(&u8g2), 0);
  //u8g2_SetFont(&u8g2, u8g2_font_u8glib_4_tf);

  while(1){
    for(uint8_t i=0;i<(128-20);i++){
 8004c78:	2c6c      	cmp	r4, #108	; 0x6c
 8004c7a:	d1ed      	bne.n	8004c58 <main+0x15c>
 8004c7c:	e7eb      	b.n	8004c56 <main+0x15a>
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	20000010 	.word	0x20000010
 8004c84:	e000e010 	.word	0xe000e010
 8004c88:	e000ed00 	.word	0xe000ed00
 8004c8c:	48000400 	.word	0x48000400
 8004c90:	080050dc 	.word	0x080050dc
 8004c94:	08003505 	.word	0x08003505
 8004c98:	080033e1 	.word	0x080033e1

08004c9c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004c9c:	4770      	bx	lr

08004c9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8004c9e:	e7fe      	b.n	8004c9e <HardFault_Handler>

08004ca0 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8004ca0:	4770      	bx	lr

08004ca2 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8004ca2:	4770      	bx	lr

08004ca4 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
    MSec++; 
 8004ca4:	4a02      	ldr	r2, [pc, #8]	; (8004cb0 <SysTick_Handler+0xc>)
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	4770      	bx	lr
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	200000b8 	.word	0x200000b8

08004cb4 <TIM2_IRQHandler>:
 * @retval None
 */
void TIMER_DELAY_IRQ_HANDLER(void)
{
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8004cb4:	2080      	movs	r0, #128	; 0x80
 * @brief  This function handles the timer interrupt.
 * @param  None
 * @retval None
 */
void TIMER_DELAY_IRQ_HANDLER(void)
{
 8004cb6:	b508      	push	{r3, lr}
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8004cb8:	05c0      	lsls	r0, r0, #23
 8004cba:	2101      	movs	r1, #1
 8004cbc:	f7fc fac6 	bl	800124c <TIM_ClearITPendingBit>
	decrement_delay();
 8004cc0:	f000 f8b6 	bl	8004e30 <decrement_delay>
}
 8004cc4:	bd08      	pop	{r3, pc}
	...

08004cc8 <TIM3_IRQHandler>:
 * @brief  This function handles the timer interrupt.
 * @param  None
 * @retval None
 */
void TIMER_TIMESTAMP_IRQ_HANDLER(void)
{
 8004cc8:	b508      	push	{r3, lr}
	/* Clear TIMER update interrupt flag */
	TIM_ClearITPendingBit(TIMER_TIMESTAMP, TIM_IT_Update);
 8004cca:	4803      	ldr	r0, [pc, #12]	; (8004cd8 <TIM3_IRQHandler+0x10>)
 8004ccc:	2101      	movs	r1, #1
 8004cce:	f7fc fabd 	bl	800124c <TIM_ClearITPendingBit>
	increment_timestamp();
 8004cd2:	f000 f8b9 	bl	8004e48 <increment_timestamp>
}
 8004cd6:	bd08      	pop	{r3, pc}
 8004cd8:	40000400 	.word	0x40000400

08004cdc <Interrupts_Config>:

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	4b02      	ldr	r3, [pc, #8]	; (8004ce8 <Interrupts_Config+0xc>)
 8004ce0:	0212      	lsls	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
  //NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
  //NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
  //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  //NVIC_Init(&NVIC_InitStructure);
	
}
 8004ce4:	4770      	bx	lr
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	e000e100 	.word	0xe000e100

08004cec <Timer_RCC_Config>:
 */
void Timer_RCC_Config( void )
{
	/*	enable TIM2 & TIM3 */
	//RCC_APB1PeriphClockCmd(		(TIMER_DELAY_CLOCK | TIMER_TIMESTAMP_CLOCK),
	RCC_APB1PeriphClockCmd(TIMER_DELAY_CLOCK,ENABLE);
 8004cec:	2001      	movs	r0, #1
 *	@brief  This function configures RCC for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_RCC_Config( void )
{
 8004cee:	b508      	push	{r3, lr}
	/*	enable TIM2 & TIM3 */
	//RCC_APB1PeriphClockCmd(		(TIMER_DELAY_CLOCK | TIMER_TIMESTAMP_CLOCK),
	RCC_APB1PeriphClockCmd(TIMER_DELAY_CLOCK,ENABLE);
 8004cf0:	1c01      	adds	r1, r0, #0
 8004cf2:	f7fb fd07 	bl	8000704 <RCC_APB1PeriphClockCmd>
}
 8004cf6:	bd08      	pop	{r3, pc}

08004cf8 <Timer_Structure_Config>:
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 8004cf8:	23fa      	movs	r3, #250	; 0xfa
 *	@brief  Structure configuration for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Structure_Config( void )
{
 8004cfa:	b530      	push	{r4, r5, lr}
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004cfc:	2480      	movs	r4, #128	; 0x80
 *	@brief  Structure configuration for the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Structure_Config( void )
{
 8004cfe:	b085      	sub	sp, #20
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 8004d00:	a901      	add	r1, sp, #4
 8004d02:	009b      	lsls	r3, r3, #2
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004d04:	2500      	movs	r5, #0
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
 8004d06:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
 8004d08:	2330      	movs	r3, #48	; 0x30
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004d0a:	05e4      	lsls	r4, r4, #23
 8004d0c:	1c20      	adds	r0, r4, #0
	 * --------------------------------------------------------------------------
	 * 72 MHz / 72 = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      /* 1000 */
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_DELAY_PRESCALER;    /* 72 */   
 8004d0e:	800b      	strh	r3, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004d10:	810d      	strh	r5, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 8004d12:	804d      	strh	r5, [r1, #2]
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004d14:	f7fb fdfc 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_DELAY, TIM_UpdateSource_Global);
 8004d18:	1c20      	adds	r0, r4, #0
 8004d1a:	1c29      	adds	r1, r5, #0
 8004d1c:	f7fb fe70 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8004d20:	1c20      	adds	r0, r4, #0
 8004d22:	2101      	movs	r1, #1
 8004d24:	f7fc fa92 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_DELAY, TIM_IT_Update, ENABLE);
 8004d28:	2101      	movs	r1, #1
 8004d2a:	1c20      	adds	r0, r4, #0
 8004d2c:	1c0a      	adds	r2, r1, #0
 8004d2e:	f7fc fa6b 	bl	8001208 <TIM_ITConfig>
	//TIM_ClearITPendingBit(TIMER_TIMESTAMP, TIM_IT_Update);
	//	
	///* Enable TIMER Update interrupt */
	//TIM_ITConfig(TIMER_TIMESTAMP, TIM_IT_Update, ENABLE);
	
}
 8004d32:	b005      	add	sp, #20
 8004d34:	bd30      	pop	{r4, r5, pc}

08004d36 <Timer_Config>:
 *	@brief  This function configures the Timers
 *  @param  None
 *  @retval None
 */
void Timer_Config( void )
{
 8004d36:	b508      	push	{r3, lr}
	Timer_RCC_Config( );
 8004d38:	f7ff ffd8 	bl	8004cec <Timer_RCC_Config>
	Timer_Structure_Config( );
 8004d3c:	f7ff ffdc 	bl	8004cf8 <Timer_Structure_Config>
}
 8004d40:	bd08      	pop	{r3, pc}
	...

08004d44 <delay_ms>:
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 8004d44:	23fa      	movs	r3, #250	; 0xfa
 *	@brief  Time delay in millisecond
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
 8004d46:	b530      	push	{r4, r5, lr}
	counter_delay_ms = delay;
 8004d48:	4d1b      	ldr	r5, [pc, #108]	; (8004db8 <delay_ms+0x74>)
 *	@brief  Time delay in millisecond
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
 8004d4a:	b085      	sub	sp, #20
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 8004d4c:	a901      	add	r1, sp, #4
 *  @param  delay : delay in ms.
 *  @retval none
 */
void delay_ms(uint16_t delay)
{
	counter_delay_ms = delay;
 8004d4e:	8028      	strh	r0, [r5, #0]
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 8004d50:	009b      	lsls	r3, r3, #2
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004d52:	2080      	movs	r0, #128	; 0x80
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004d54:	2400      	movs	r4, #0
	 * Delay TIMER configuration
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
 8004d56:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
 8004d58:	2330      	movs	r3, #48	; 0x30
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004d5a:	05c0      	lsls	r0, r0, #23
	 * --------------------------------------------------------------------------
	 * 48 MHz / 48  = 1MHz (1us)
	 * 1us * 1000 + 1us ~= 1ms	
	 * -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler			= TIMER_DELAY_PRESCALER;       
 8004d5c:	800b      	strh	r3, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004d5e:	810c      	strh	r4, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 8004d60:	804c      	strh	r4, [r1, #2]
	TIM_TimeBaseInit(TIMER_DELAY, &TIM_TimeBaseStructure);
 8004d62:	f7fb fdd5 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_DELAY, TIM_UpdateSource_Global);
 8004d66:	2080      	movs	r0, #128	; 0x80
 8004d68:	1c21      	adds	r1, r4, #0
 8004d6a:	05c0      	lsls	r0, r0, #23
 8004d6c:	f7fb fe48 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_DELAY, TIM_IT_Update);
 8004d70:	2080      	movs	r0, #128	; 0x80
 8004d72:	2101      	movs	r1, #1
 8004d74:	05c0      	lsls	r0, r0, #23
 8004d76:	f7fc fa69 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_DELAY, TIM_IT_Update, ENABLE);
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	2080      	movs	r0, #128	; 0x80
 8004d7e:	1c0a      	adds	r2, r1, #0
 8004d80:	05c0      	lsls	r0, r0, #23
 8004d82:	f7fc fa41 	bl	8001208 <TIM_ITConfig>

	/* Disable timer	*/
	TIM_Cmd(TIMER_DELAY, DISABLE);
 8004d86:	2080      	movs	r0, #128	; 0x80
 8004d88:	1c21      	adds	r1, r4, #0
 8004d8a:	05c0      	lsls	r0, r0, #23
 8004d8c:	f7fb fe62 	bl	8000a54 <TIM_Cmd>
{
	counter_delay_ms = delay;
	
	TimerDelay_ms_Config ();
	
	TIM_SetCounter(TIMER_DELAY, 0);
 8004d90:	2080      	movs	r0, #128	; 0x80
 8004d92:	1c21      	adds	r1, r4, #0
 8004d94:	05c0      	lsls	r0, r0, #23
 8004d96:	f7fb fe1d 	bl	80009d4 <TIM_SetCounter>
	/* TIM2 enable counter */
    TIM_Cmd(TIMER_DELAY, ENABLE);
 8004d9a:	2080      	movs	r0, #128	; 0x80
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	05c0      	lsls	r0, r0, #23
 8004da0:	f7fb fe58 	bl	8000a54 <TIM_Cmd>
	/* Wait for 'delay' milliseconds */
	while(counter_delay_ms != 0);
 8004da4:	8829      	ldrh	r1, [r5, #0]
 8004da6:	b289      	uxth	r1, r1
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d1fb      	bne.n	8004da4 <delay_ms+0x60>
	/* TIM2 disable counter */
	TIM_Cmd(TIMER_DELAY, DISABLE);
 8004dac:	2080      	movs	r0, #128	; 0x80
 8004dae:	05c0      	lsls	r0, r0, #23
 8004db0:	f7fb fe50 	bl	8000a54 <TIM_Cmd>
}
 8004db4:	b005      	add	sp, #20
 8004db6:	bd30      	pop	{r4, r5, pc}
 8004db8:	200000b2 	.word	0x200000b2

08004dbc <delay_us>:
 *	@brief  Time delay in microsecond
 *  @param  delay : delay in us.
 *  @retval none
 */
void delay_us(uint16_t delay)
{
 8004dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	counter_delay_ms = delay;
 8004dbe:	4e1b      	ldr	r6, [pc, #108]	; (8004e2c <delay_us+0x70>)
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 8004dc0:	2330      	movs	r3, #48	; 0x30
 *  @param  delay : delay in us.
 *  @retval none
 */
void delay_us(uint16_t delay)
{
	counter_delay_ms = delay;
 8004dc2:	8030      	strh	r0, [r6, #0]
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8004dc4:	2080      	movs	r0, #128	; 0x80
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
 8004dc6:	2401      	movs	r4, #1
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004dc8:	2500      	movs	r5, #0
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 8004dca:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8004dcc:	05c0      	lsls	r0, r0, #23
	* Delay TIMER configuration (us)
	* --------------------------------------------------------------------------
	* 72 MHz / 1 = 72MHz (0.013us)
	* 1us * 71 + 1us ~= 1us	
	* -------------------------------------------------------------------------- */ 
	TIM_TimeBaseStructure.TIM_Period 			= TIMER_US_DELAY_PERIOD;      
 8004dce:	604b      	str	r3, [r1, #4]
	TIM_TimeBaseStructure.TIM_Prescaler 		= TIMER_US_DELAY_PRESCALER;       
 8004dd0:	800c      	strh	r4, [r1, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision 	= TIM_CKD_DIV1;    
 8004dd2:	810d      	strh	r5, [r1, #8]
	TIM_TimeBaseStructure.TIM_CounterMode 		= TIM_CounterMode_Up;
 8004dd4:	804d      	strh	r5, [r1, #2]
	TIM_TimeBaseInit(TIMER_US_DELAY, &TIM_TimeBaseStructure);
 8004dd6:	f7fb fd9b 	bl	8000910 <TIM_TimeBaseInit>
	
	TIM_UpdateRequestConfig(TIMER_US_DELAY, TIM_UpdateSource_Global);
 8004dda:	2080      	movs	r0, #128	; 0x80
 8004ddc:	1c29      	adds	r1, r5, #0
 8004dde:	05c0      	lsls	r0, r0, #23
 8004de0:	f7fb fe0e 	bl	8000a00 <TIM_UpdateRequestConfig>
	
	TIM_ClearITPendingBit(TIMER_US_DELAY, TIM_IT_Update);
 8004de4:	2080      	movs	r0, #128	; 0x80
 8004de6:	1c21      	adds	r1, r4, #0
 8004de8:	05c0      	lsls	r0, r0, #23
 8004dea:	f7fc fa2f 	bl	800124c <TIM_ClearITPendingBit>
		
	/* Enable TIMER Update interrupt */
	TIM_ITConfig(TIMER_US_DELAY, TIM_IT_Update, ENABLE);
 8004dee:	2080      	movs	r0, #128	; 0x80
 8004df0:	1c22      	adds	r2, r4, #0
 8004df2:	05c0      	lsls	r0, r0, #23
 8004df4:	1c21      	adds	r1, r4, #0
 8004df6:	f7fc fa07 	bl	8001208 <TIM_ITConfig>

	/* Disable timer	*/
	TIM_Cmd(TIMER_US_DELAY, DISABLE);
 8004dfa:	2080      	movs	r0, #128	; 0x80
 8004dfc:	1c29      	adds	r1, r5, #0
 8004dfe:	05c0      	lsls	r0, r0, #23
 8004e00:	f7fb fe28 	bl	8000a54 <TIM_Cmd>
{
	counter_delay_ms = delay;
	
	TimerDelay_us_Config();

	TIM_SetCounter(TIMER_US_DELAY, 0);
 8004e04:	2080      	movs	r0, #128	; 0x80
 8004e06:	1c29      	adds	r1, r5, #0
 8004e08:	05c0      	lsls	r0, r0, #23
 8004e0a:	f7fb fde3 	bl	80009d4 <TIM_SetCounter>
	/* TIM2 enable counter */
    TIM_Cmd(TIMER_US_DELAY, ENABLE);
 8004e0e:	2080      	movs	r0, #128	; 0x80
 8004e10:	1c21      	adds	r1, r4, #0
 8004e12:	05c0      	lsls	r0, r0, #23
 8004e14:	f7fb fe1e 	bl	8000a54 <TIM_Cmd>
	/* Wait for 'delay' us */
	while(counter_delay_ms != 0);
 8004e18:	8831      	ldrh	r1, [r6, #0]
 8004e1a:	b289      	uxth	r1, r1
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d1fb      	bne.n	8004e18 <delay_us+0x5c>
	/* TIM2 disable counter */
	TIM_Cmd(TIMER_US_DELAY, DISABLE);
 8004e20:	2080      	movs	r0, #128	; 0x80
 8004e22:	05c0      	lsls	r0, r0, #23
 8004e24:	f7fb fe16 	bl	8000a54 <TIM_Cmd>
}
 8004e28:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	200000b2 	.word	0x200000b2

08004e30 <decrement_delay>:
 *  @param  None
 *  @retval None
 */
void decrement_delay(void)
{
	if(counter_delay_ms != 0)
 8004e30:	4a04      	ldr	r2, [pc, #16]	; (8004e44 <decrement_delay+0x14>)
 8004e32:	8813      	ldrh	r3, [r2, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <decrement_delay+0x10>
	{
		/* Decrements the counter */ 
		counter_delay_ms--;
 8004e38:	8813      	ldrh	r3, [r2, #0]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
	}
}
 8004e40:	4770      	bx	lr
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	200000b2 	.word	0x200000b2

08004e48 <increment_timestamp>:
 *  @param  None
 *  @retval None
 */
void increment_timestamp(void)
{
	if(timestamp_us <= 0xFFFFFFFE)
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <increment_timestamp+0x10>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	3201      	adds	r2, #1
 8004e4e:	d002      	beq.n	8004e56 <increment_timestamp+0xe>
	{
		timestamp_us++;
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	3201      	adds	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
	}
}
 8004e56:	4770      	bx	lr
 8004e58:	200000b4 	.word	0x200000b4

08004e5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8004e5c:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e5e:	2001      	movs	r0, #1

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8004e60:	240f      	movs	r4, #15
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <SystemInit+0x98>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4302      	orrs	r2, r0
 8004e68:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	4a22      	ldr	r2, [pc, #136]	; (8004ef8 <SystemInit+0x9c>)
 8004e6e:	400a      	ands	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	4a21      	ldr	r2, [pc, #132]	; (8004efc <SystemInit+0xa0>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	4a20      	ldr	r2, [pc, #128]	; (8004f00 <SystemInit+0xa4>)
 8004e7e:	400a      	ands	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <SystemInit+0xa8>)
 8004e86:	4011      	ands	r1, r2
 8004e88:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8004e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e8c:	43a1      	bics	r1, r4
 8004e8e:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8004e90:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004e92:	491d      	ldr	r1, [pc, #116]	; (8004f08 <SystemInit+0xac>)
 8004e94:	4021      	ands	r1, r4
 8004e96:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8004e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e9a:	4381      	bics	r1, r0
 8004e9c:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004ea2:	9100      	str	r1, [sp, #0]
 8004ea4:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8004ea6:	4919      	ldr	r1, [pc, #100]	; (8004f0c <SystemInit+0xb0>)
 8004ea8:	3010      	adds	r0, #16
 8004eaa:	6008      	str	r0, [r1, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004eac:	6859      	ldr	r1, [r3, #4]
 8004eae:	6059      	str	r1, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8004eb0:	6859      	ldr	r1, [r3, #4]
 8004eb2:	6059      	str	r1, [r3, #4]

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004eb4:	6859      	ldr	r1, [r3, #4]
 8004eb6:	400a      	ands	r2, r1
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8004eb8:	21a0      	movs	r1, #160	; 0xa0
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004eba:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	0389      	lsls	r1, r1, #14
 8004ec0:	430a      	orrs	r2, r1
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8004ec2:	2180      	movs	r1, #128	; 0x80
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

  /* PLL configuration = (HSI/2) * 12 = ~48 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL12);
 8004ec4:	605a      	str	r2, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	0449      	lsls	r1, r1, #17
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <SystemInit+0x98>)
 8004ed2:	0189      	lsls	r1, r1, #6
 8004ed4:	d5fb      	bpl.n	8004ece <SystemInit+0x72>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004ed6:	2003      	movs	r0, #3
 8004ed8:	6851      	ldr	r1, [r2, #4]
 8004eda:	4381      	bics	r1, r0
 8004edc:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004ede:	6851      	ldr	r1, [r2, #4]
 8004ee0:	3801      	subs	r0, #1
 8004ee2:	4301      	orrs	r1, r0
 8004ee4:	6051      	str	r1, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8004ee6:	220c      	movs	r2, #12
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	400a      	ands	r2, r1
 8004eec:	2a08      	cmp	r2, #8
 8004eee:	d1fa      	bne.n	8004ee6 <SystemInit+0x8a>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8004ef0:	bd13      	pop	{r0, r1, r4, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	f8ffb80c 	.word	0xf8ffb80c
 8004efc:	fef6ffff 	.word	0xfef6ffff
 8004f00:	fffbffff 	.word	0xfffbffff
 8004f04:	ffc0ffff 	.word	0xffc0ffff
 8004f08:	fffffeac 	.word	0xfffffeac
 8004f0c:	40022000 	.word	0x40022000

08004f10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f10:	480d      	ldr	r0, [pc, #52]	; (8004f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f16:	e003      	b.n	8004f20 <LoopCopyDataInit>

08004f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004f1e:	3104      	adds	r1, #4

08004f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f20:	480b      	ldr	r0, [pc, #44]	; (8004f50 <LoopForever+0xa>)
  ldr r3, =_edata
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <LoopForever+0xe>)
  adds r2, r0, r1
 8004f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004f28:	d3f6      	bcc.n	8004f18 <CopyDataInit>
  ldr r2, =_sbss
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <LoopForever+0x12>)
  b LoopFillZerobss
 8004f2c:	e002      	b.n	8004f34 <LoopFillZerobss>

08004f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004f30:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f32:	3204      	adds	r2, #4

08004f34 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <LoopForever+0x16>)
  cmp r2, r3
 8004f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004f38:	d3f9      	bcc.n	8004f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f3a:	f7ff ff8f 	bl	8004e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f3e:	f000 f811 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f42:	f7ff fddb 	bl	8004afc <main>

08004f46 <LoopForever>:
  
LoopForever:
    b LoopForever
 8004f46:	e7fe      	b.n	8004f46 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f48:	20001800 	.word	0x20001800
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8004f4c:	0800555c 	.word	0x0800555c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004f54:	20000014 	.word	0x20000014
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8004f58:	20000014 	.word	0x20000014
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8004f5c:	200000bc 	.word	0x200000bc

08004f60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f60:	e7fe      	b.n	8004f60 <ADC1_COMP_IRQHandler>
	...

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4e0d      	ldr	r6, [pc, #52]	; (8004f9c <__libc_init_array+0x38>)
 8004f68:	4d0d      	ldr	r5, [pc, #52]	; (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	2400      	movs	r4, #0
 8004f6c:	1bad      	subs	r5, r5, r6
 8004f6e:	10ad      	asrs	r5, r5, #2
 8004f70:	d005      	beq.n	8004f7e <__libc_init_array+0x1a>
 8004f72:	00a3      	lsls	r3, r4, #2
 8004f74:	58f3      	ldr	r3, [r6, r3]
 8004f76:	3401      	adds	r4, #1
 8004f78:	4798      	blx	r3
 8004f7a:	42a5      	cmp	r5, r4
 8004f7c:	d1f9      	bne.n	8004f72 <__libc_init_array+0xe>
 8004f7e:	f000 fae1 	bl	8005544 <_init>
 8004f82:	4e08      	ldr	r6, [pc, #32]	; (8004fa4 <__libc_init_array+0x40>)
 8004f84:	4d08      	ldr	r5, [pc, #32]	; (8004fa8 <__libc_init_array+0x44>)
 8004f86:	2400      	movs	r4, #0
 8004f88:	1bad      	subs	r5, r5, r6
 8004f8a:	10ad      	asrs	r5, r5, #2
 8004f8c:	d005      	beq.n	8004f9a <__libc_init_array+0x36>
 8004f8e:	00a3      	lsls	r3, r4, #2
 8004f90:	58f3      	ldr	r3, [r6, r3]
 8004f92:	3401      	adds	r4, #1
 8004f94:	4798      	blx	r3
 8004f96:	42a5      	cmp	r5, r4
 8004f98:	d1f9      	bne.n	8004f8e <__libc_init_array+0x2a>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fac <memcpy>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	2a0f      	cmp	r2, #15
 8004fb0:	d932      	bls.n	8005018 <memcpy+0x6c>
 8004fb2:	1c04      	adds	r4, r0, #0
 8004fb4:	430c      	orrs	r4, r1
 8004fb6:	1c0b      	adds	r3, r1, #0
 8004fb8:	07a4      	lsls	r4, r4, #30
 8004fba:	d131      	bne.n	8005020 <memcpy+0x74>
 8004fbc:	1c15      	adds	r5, r2, #0
 8004fbe:	1c04      	adds	r4, r0, #0
 8004fc0:	3d10      	subs	r5, #16
 8004fc2:	092d      	lsrs	r5, r5, #4
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	012d      	lsls	r5, r5, #4
 8004fc8:	1949      	adds	r1, r1, r5
 8004fca:	681e      	ldr	r6, [r3, #0]
 8004fcc:	6026      	str	r6, [r4, #0]
 8004fce:	685e      	ldr	r6, [r3, #4]
 8004fd0:	6066      	str	r6, [r4, #4]
 8004fd2:	689e      	ldr	r6, [r3, #8]
 8004fd4:	60a6      	str	r6, [r4, #8]
 8004fd6:	68de      	ldr	r6, [r3, #12]
 8004fd8:	3310      	adds	r3, #16
 8004fda:	60e6      	str	r6, [r4, #12]
 8004fdc:	3410      	adds	r4, #16
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	d1f3      	bne.n	8004fca <memcpy+0x1e>
 8004fe2:	230f      	movs	r3, #15
 8004fe4:	1945      	adds	r5, r0, r5
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d91b      	bls.n	8005024 <memcpy+0x78>
 8004fec:	1f1c      	subs	r4, r3, #4
 8004fee:	2300      	movs	r3, #0
 8004ff0:	08a4      	lsrs	r4, r4, #2
 8004ff2:	3401      	adds	r4, #1
 8004ff4:	00a4      	lsls	r4, r4, #2
 8004ff6:	58ce      	ldr	r6, [r1, r3]
 8004ff8:	50ee      	str	r6, [r5, r3]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d1fa      	bne.n	8004ff6 <memcpy+0x4a>
 8005000:	18ed      	adds	r5, r5, r3
 8005002:	18c9      	adds	r1, r1, r3
 8005004:	2303      	movs	r3, #3
 8005006:	401a      	ands	r2, r3
 8005008:	d005      	beq.n	8005016 <memcpy+0x6a>
 800500a:	2300      	movs	r3, #0
 800500c:	5ccc      	ldrb	r4, [r1, r3]
 800500e:	54ec      	strb	r4, [r5, r3]
 8005010:	3301      	adds	r3, #1
 8005012:	4293      	cmp	r3, r2
 8005014:	d1fa      	bne.n	800500c <memcpy+0x60>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	1c05      	adds	r5, r0, #0
 800501a:	2a00      	cmp	r2, #0
 800501c:	d1f5      	bne.n	800500a <memcpy+0x5e>
 800501e:	e7fa      	b.n	8005016 <memcpy+0x6a>
 8005020:	1c05      	adds	r5, r0, #0
 8005022:	e7f2      	b.n	800500a <memcpy+0x5e>
 8005024:	1c1a      	adds	r2, r3, #0
 8005026:	e7f8      	b.n	800501a <memcpy+0x6e>

08005028 <memset>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	0783      	lsls	r3, r0, #30
 800502c:	d03f      	beq.n	80050ae <memset+0x86>
 800502e:	1e54      	subs	r4, r2, #1
 8005030:	2a00      	cmp	r2, #0
 8005032:	d03b      	beq.n	80050ac <memset+0x84>
 8005034:	b2ce      	uxtb	r6, r1
 8005036:	1c03      	adds	r3, r0, #0
 8005038:	2503      	movs	r5, #3
 800503a:	e003      	b.n	8005044 <memset+0x1c>
 800503c:	1e62      	subs	r2, r4, #1
 800503e:	2c00      	cmp	r4, #0
 8005040:	d034      	beq.n	80050ac <memset+0x84>
 8005042:	1c14      	adds	r4, r2, #0
 8005044:	3301      	adds	r3, #1
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	7016      	strb	r6, [r2, #0]
 800504a:	422b      	tst	r3, r5
 800504c:	d1f6      	bne.n	800503c <memset+0x14>
 800504e:	2c03      	cmp	r4, #3
 8005050:	d924      	bls.n	800509c <memset+0x74>
 8005052:	25ff      	movs	r5, #255	; 0xff
 8005054:	400d      	ands	r5, r1
 8005056:	022a      	lsls	r2, r5, #8
 8005058:	4315      	orrs	r5, r2
 800505a:	042a      	lsls	r2, r5, #16
 800505c:	4315      	orrs	r5, r2
 800505e:	2c0f      	cmp	r4, #15
 8005060:	d911      	bls.n	8005086 <memset+0x5e>
 8005062:	1c26      	adds	r6, r4, #0
 8005064:	3e10      	subs	r6, #16
 8005066:	0936      	lsrs	r6, r6, #4
 8005068:	3601      	adds	r6, #1
 800506a:	0136      	lsls	r6, r6, #4
 800506c:	1c1a      	adds	r2, r3, #0
 800506e:	199b      	adds	r3, r3, r6
 8005070:	6015      	str	r5, [r2, #0]
 8005072:	6055      	str	r5, [r2, #4]
 8005074:	6095      	str	r5, [r2, #8]
 8005076:	60d5      	str	r5, [r2, #12]
 8005078:	3210      	adds	r2, #16
 800507a:	4293      	cmp	r3, r2
 800507c:	d1f8      	bne.n	8005070 <memset+0x48>
 800507e:	220f      	movs	r2, #15
 8005080:	4014      	ands	r4, r2
 8005082:	2c03      	cmp	r4, #3
 8005084:	d90a      	bls.n	800509c <memset+0x74>
 8005086:	1f26      	subs	r6, r4, #4
 8005088:	08b6      	lsrs	r6, r6, #2
 800508a:	3601      	adds	r6, #1
 800508c:	00b6      	lsls	r6, r6, #2
 800508e:	1c1a      	adds	r2, r3, #0
 8005090:	199b      	adds	r3, r3, r6
 8005092:	c220      	stmia	r2!, {r5}
 8005094:	4293      	cmp	r3, r2
 8005096:	d1fc      	bne.n	8005092 <memset+0x6a>
 8005098:	2203      	movs	r2, #3
 800509a:	4014      	ands	r4, r2
 800509c:	2c00      	cmp	r4, #0
 800509e:	d005      	beq.n	80050ac <memset+0x84>
 80050a0:	b2c9      	uxtb	r1, r1
 80050a2:	191c      	adds	r4, r3, r4
 80050a4:	7019      	strb	r1, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	d1fb      	bne.n	80050a4 <memset+0x7c>
 80050ac:	bd70      	pop	{r4, r5, r6, pc}
 80050ae:	1c14      	adds	r4, r2, #0
 80050b0:	1c03      	adds	r3, r0, #0
 80050b2:	e7cc      	b.n	800504e <memset+0x26>
 80050b4:	ffffffff 	.word	0xffffffff
 80050b8:	ffffffff 	.word	0xffffffff

080050bc <u8g2_cb_mirror>:
 80050bc:	08001701 080017e9                       ........

080050c4 <u8g2_cb_r3>:
 80050c4:	08001795 08001869                       ....i...

080050cc <u8g2_cb_r2>:
 80050cc:	0800175d 08001839                       ]...9...

080050d4 <u8g2_cb_r1>:
 80050d4:	08001729 08001811                       ).......

080050dc <u8g2_cb_r0>:
 80050dc:	08001701 080017d5 080023fe 080023f4     .........#...#..
 80050ec:	080023f4 080023fe 080023fe 080023fe     .#...#...#...#..
 80050fc:	08002448 0800242c 0800242c 08002442     H$..,$..,$..B$..
 800510c:	08002448 08002448 08002486 080024aa     H$..H$...$...$..
 800511c:	08002498 08002480 08002486 08002486     .$...$...$...$..
 800512c:	080024f4 080024d8 080024d8 080024ee     .$...$...$...$..
 800513c:	080024f4 080024f4 08002532 08002556     .$...$..2%..V%..
 800514c:	08002544 0800252c 08002532 08002532     D%..,%..2%..2%..
 800515c:	080025f2 080025b2 08002588 080025fc     .%...%...%...%..
 800516c:	080025f2 080025f2 080026f2 080026d4     .%...%...&...&..
 800517c:	080026d4 080026c2 080026d0 080026d0     .&...&...&...&..
 800518c:	0800276e 08002750 08002788 0800273e     n'..P'...'..>'..
 800519c:	0800276a 0800276a 08002800 0800281c     j'..j'...(...(..
 80051ac:	0800283e 080027da 08002848 080027f0     >(...'..H(...'..
 80051bc:	08002892 080028ac 080028ac 080028c4     .(...(...(...(..
 80051cc:	08002878 08002882                       x(...(..

080051d4 <u8x8_d_ssd1306_128x64_noname_powersave0_seq>:
 80051d4:	19af1518 000000ff                       ........

080051dc <u8x8_d_ssd1306_128x64_noname_powersave1_seq>:
 80051dc:	19ae1518 000000ff                       ........

080051e4 <u8x8_d_ssd1306_128x64_noname_flip0_seq>:
 80051e4:	15a11518 00ff19c8                       ........

080051ec <u8x8_d_ssd1306_128x64_noname_flip1_seq>:
 80051ec:	15a01518 00ff19c0                       ........

080051f4 <u8x8_d_ssd1306_128x64_noname_init_seq>:
 80051f4:	15ae1518 158016d5 153f16a8 150016d3     ..........?.....
 8005204:	168d1540 16201514 15a11500 16da15c8     @..... .........
 8005214:	16811512 16d915cf 16db15f1 152e1540     ............@...
 8005224:	19a615a4 000000ff                       ........

0800522c <u8x8_ssd1306_128x64_noname_display_info>:
 800522c:	0a140100 32326464 007a1200 96280400     ....dd22..z...(.
 800523c:	00000810 00400080                       ......@.

08005244 <u8x8_d_ssd1306_128x64_vcomh0_init_seq>:
 8005244:	15ae1518 158016d5 153f16a8 150016d3     ..........?.....
 8005254:	168d1540 16201514 15a11500 16da15c8     @..... .........
 8005264:	16811512 16d915ef 16db15a1 152e1500     ................
 8005274:	19a615a4 000000ff                       ........

0800527c <u8x8_d_ssd1306_128x64_alt0_init_seq>:
 800527c:	15ae1518 158016d5 153f16a8 150016d3     ..........?.....
 800528c:	168d1540 16201514 15a11500 16da15c8     @..... .........
 800529c:	16811502 16d915cf 16db15f1 152e1540     ............@...
 80052ac:	19a615a4 000000ff                       ........

080052b4 <u8x8_sh1106_128x64_noname_display_info>:
 80052b4:	0a140100 32326464 003d0900 96280403     ....dd22..=...(.
 80052c4:	02020810 00400080                       ......@.

080052cc <u8x8_d_sh1106_128x64_winstar_init_seq>:
 80052cc:	15ae1518 16d515a4 16a81550 16d3153f     ........P...?...
 80052dc:	15401500 158b16ad 152216d9 153516db     ..@......."...5.
 80052ec:	16811532 15a615ff 191216da 000000ff     2...............
 80052fc:	08002d2c 08002df8 08002df8 08002d4a     ,-...-...-..J-..
 800530c:	08002dc0 08002ddc 08002df8 08002df8     .-...-...-...-..
 800531c:	08002df8 08002df8 08002df8 08002df8     .-...-...-...-..
 800532c:	08002d18 08002e34 08002eea 08002eea     .-..4...........
 800533c:	08002e4c 08002eb2 08002ece 08002eea     L...............
 800534c:	08002eea 08002eea 08002eea 08002eea     ................
 800535c:	08002eea 08002e24 08002f20 08002fd6     ....$... /.../..
 800536c:	08002fd6 08002f38 08002f9e 08002fba     ./..8/.../.../..
 800537c:	08002fd6 08002fd6 08002fd6 08002fd6     ./.../.../.../..
 800538c:	08002fd6 08002fd6 08002f10 08003018     ./.../.../...0..
 800539c:	080030f8 080030f8 08003036 080030c0     .0...0..60...0..
 80053ac:	080030dc 080030f8 080030f8 080030f8     .0...0...0...0..
 80053bc:	080030f8 080030f8 080030f8 08003006     .0...0...0...0..
 80053cc:	0800316a 08003218 08003218 08003182     j1...2...2...1..
 80053dc:	080031e8 08003200 08003218 08003218     .1...2...2...2..
 80053ec:	08003218 08003218 08003218 08003218     .2...2...2...2..
 80053fc:	0800315a 0800325e 080032fa 080032fa     Z1..^2...2...2..
 800540c:	08003284 0800323e 08003248 080032fa     .2..>2..H2...2..
 800541c:	080032fa 080032fa 080032fa 080032fa     .2...2...2...2..
 800542c:	080032fa 08003254 0800339e 080033d6     .2..T2...3...3..
 800543c:	080033d6 080033ba 0800331e 08003372     .3...3...3..r3..
 800544c:	080033d6 080033d6 080033d6 080033d6     .3...3...3...3..
 800545c:	080033d6 080033d6 0800336e 0800341a     .3...3..n3...4..
 800546c:	080034bc 080034c4 08003414 08003414     .4...4...4...4..
 800547c:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 800548c:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 800549c:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 80054ac:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 80054bc:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 80054cc:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 80054dc:	080034f0 080034f0 080034f0 080034f0     .4...4...4...4..
 80054ec:	080034e2 080033f8 080034d0 08003526     .4...3...4..&5..
 80054fc:	080035c4 080035c4 0800354a 0800357c     .5...5..J5..|5..
 800550c:	080035a0 080035c4 080035c4 080035c4     .5...5...5...5..
 800551c:	080035c4 080035c4 080035c4 0800351c     .5...5...5...5..

0800552c <u8x8_null_display_info>:
 800552c:	00000100 00000000 003d0900 00000400     ..........=.....
 800553c:	00000101 00080008                       ........

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
